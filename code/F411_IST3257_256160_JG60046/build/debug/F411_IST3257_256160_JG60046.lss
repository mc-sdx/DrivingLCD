
build/debug/F411_IST3257_256160_JG60046.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d30  08004d30  000060f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d38  08004d38  000060f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08004d40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000becc  200000f8  08004e38  000060f8  2**2
                  ALLOC
 10 ._user_heap_stack 00003204  2000bfc4  08004e38  00006fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015945  00000000  00000000  00006161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7d  00000000  00000000  0001baa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  0001f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b16  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e727  00000000  00000000  00020eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004afb  00000000  00000000  0002f5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000023fc  00000000  00000000  000340d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00008efb  00000000  00000000  000364d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000181  00000000  00000000  0003f3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f004 fc02 	bl	80049c0 <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c05      	ldr	r4, [pc, #20]	@ (80001e4 <__do_global_dtors_aux+0x18>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b933      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x12>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	200000f8 	.word	0x200000f8
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08004cb8 	.word	0x08004cb8

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <frame_dummy+0x10>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4903      	ldr	r1, [pc, #12]	@ (8000204 <frame_dummy+0x14>)
 80001f8:	4803      	ldr	r0, [pc, #12]	@ (8000208 <frame_dummy+0x18>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	00000000 	.word	0x00000000
 8000204:	200000fc 	.word	0x200000fc
 8000208:	08004cb8 	.word	0x08004cb8

0800020c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800020c:	b500      	push	{lr}
 800020e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000210:	2100      	movs	r1, #0
 8000212:	9101      	str	r1, [sp, #4]
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_DMA_Init+0x30>)
 8000216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000218:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800021c:	631a      	str	r2, [r3, #48]	@ 0x30
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000228:	460a      	mov	r2, r1
 800022a:	203a      	movs	r0, #58	@ 0x3a
 800022c:	f000 fbb2 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000230:	203a      	movs	r0, #58	@ 0x3a
 8000232:	f000 fbbf 	bl	80009b4 <HAL_NVIC_EnableIRQ>

}
 8000236:	b003      	add	sp, #12
 8000238:	f85d fb04 	ldr.w	pc, [sp], #4
 800023c:	40023800 	.word	0x40023800

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000244:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	ad03      	add	r5, sp, #12
 8000248:	2400      	movs	r4, #0
 800024a:	9403      	str	r4, [sp, #12]
 800024c:	9404      	str	r4, [sp, #16]
 800024e:	9405      	str	r4, [sp, #20]
 8000250:	9406      	str	r4, [sp, #24]
 8000252:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000254:	9400      	str	r4, [sp, #0]
 8000256:	4b21      	ldr	r3, [pc, #132]	@ (80002dc <MX_GPIO_Init+0x9c>)
 8000258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800025a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800025e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000262:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000266:	9200      	str	r2, [sp, #0]
 8000268:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	9401      	str	r4, [sp, #4]
 800026c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800026e:	f042 0201 	orr.w	r2, r2, #1
 8000272:	631a      	str	r2, [r3, #48]	@ 0x30
 8000274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000276:	f002 0201 	and.w	r2, r2, #1
 800027a:	9201      	str	r2, [sp, #4]
 800027c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	9402      	str	r4, [sp, #8]
 8000280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000282:	f042 0202 	orr.w	r2, r2, #2
 8000286:	631a      	str	r2, [r3, #48]	@ 0x30
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000292:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 80002e4 <MX_GPIO_Init+0xa4>
 8000296:	4622      	mov	r2, r4
 8000298:	2118      	movs	r1, #24
 800029a:	4640      	mov	r0, r8
 800029c:	f000 fe8a 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80002a0:	4e0f      	ldr	r6, [pc, #60]	@ (80002e0 <MX_GPIO_Init+0xa0>)
 80002a2:	4622      	mov	r2, r4
 80002a4:	f242 0101 	movw	r1, #8193	@ 0x2001
 80002a8:	4630      	mov	r0, r6
 80002aa:	f000 fe83 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 80002ae:	2318      	movs	r3, #24
 80002b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2701      	movs	r7, #1
 80002b4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ba:	4629      	mov	r1, r5
 80002bc:	4640      	mov	r0, r8
 80002be:	f000 fd95 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|SD_CS_Pin;
 80002c2:	f242 0301 	movw	r3, #8193	@ 0x2001
 80002c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ce:	4629      	mov	r1, r5
 80002d0:	4630      	mov	r0, r6
 80002d2:	f000 fd8b 	bl	8000dec <HAL_GPIO_Init>

}
 80002d6:	b008      	add	sp, #32
 80002d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020400 	.word	0x40020400
 80002e4:	40020000 	.word	0x40020000

080002e8 <HAL_SPI_TxCpltCallback>:
/* USER CODE BEGIN 0 */

volatile uint8_t spi_dma_busy = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002e8:	b508      	push	{r3, lr}
    if (hspi->Instance == SPI1)
 80002ea:	6802      	ldr	r2, [r0, #0]
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <HAL_SPI_TxCpltCallback+0x20>)
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d000      	beq.n	80002f4 <HAL_SPI_TxCpltCallback+0xc>
    {
        HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
        spi_dma_busy = 0;
    }
}
 80002f2:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2110      	movs	r1, #16
 80002f8:	4804      	ldr	r0, [pc, #16]	@ (800030c <HAL_SPI_TxCpltCallback+0x24>)
 80002fa:	f000 fe5b 	bl	8000fb4 <HAL_GPIO_WritePin>
        spi_dma_busy = 0;
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <HAL_SPI_TxCpltCallback+0x28>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
}
 8000304:	e7f5      	b.n	80002f2 <HAL_SPI_TxCpltCallback+0xa>
 8000306:	bf00      	nop
 8000308:	40013000 	.word	0x40013000
 800030c:	40020000 	.word	0x40020000
 8000310:	20000118 	.word	0x20000118

08000314 <CDC_ReceiveCallBack>:
// 我们在这里提供强定义来接管USB数据接收
extern USBD_HandleTypeDef hUsbDeviceFS;
static uint32_t received_count = 0;

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len)
{
 8000314:	b538      	push	{r3, r4, r5, lr}
    // 将接收到的数据包拷贝到后台缓冲区的正确位置
    if ((received_count + Len) <= IMAGE_SIZE_BYTES)
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <CDC_ReceiveCallBack+0x3c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	185c      	adds	r4, r3, r1
 800031c:	f5b4 4fa0 	cmp.w	r4, #20480	@ 0x5000
 8000320:	d90b      	bls.n	800033a <CDC_ReceiveCallBack+0x26>
        // 可选：在这里处理错误，例如重置接收计数器
        // received_count = 0;
    }

    // 检查是否已接收到一帧完整的数据
    if (received_count >= IMAGE_SIZE_BYTES)
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <CDC_ReceiveCallBack+0x3c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800032a:	d305      	bcc.n	8000338 <CDC_ReceiveCallBack+0x24>
    {
        // 设置新帧接收完成标志
        new_frame_received_flag = 1;
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <CDC_ReceiveCallBack+0x40>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
        
        // 复位计数器，为下一帧做准备
        received_count = 0;
 8000332:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <CDC_ReceiveCallBack+0x3c>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
        // CDC_Transmit_FS((uint8_t*)&ack, 1);
    }

    // 【已移除】不再需要手动调用，系统会在 usbd_cdc_if.c 中自动调用
    // USBD_CDC_ReceivePacket(&hUsbDeviceFS); 
}
 8000338:	bd38      	pop	{r3, r4, r5, pc}
 800033a:	460a      	mov	r2, r1
        memcpy(back_buffer_ptr + received_count, Buf, Len);
 800033c:	4906      	ldr	r1, [pc, #24]	@ (8000358 <CDC_ReceiveCallBack+0x44>)
 800033e:	680d      	ldr	r5, [r1, #0]
 8000340:	4601      	mov	r1, r0
 8000342:	18e8      	adds	r0, r5, r3
 8000344:	f004 fb2e 	bl	80049a4 <memcpy>
        received_count += Len;
 8000348:	4b01      	ldr	r3, [pc, #4]	@ (8000350 <CDC_ReceiveCallBack+0x3c>)
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	e7e9      	b.n	8000322 <CDC_ReceiveCallBack+0xe>
 800034e:	bf00      	nop
 8000350:	20000114 	.word	0x20000114
 8000354:	20000119 	.word	0x20000119
 8000358:	20000120 	.word	0x20000120

0800035c <SdCmd>:
// --- LCD底层驱动函数 (8位SPI) ---
void SdCmd(uint16_t Command)
{
 800035c:	b510      	push	{r4, lr}
 800035e:	b082      	sub	sp, #8
    uint8_t cmd_buffer[2];
    cmd_buffer[0] = (Command >> 8) & 0xFF; // High Byte
 8000360:	0a03      	lsrs	r3, r0, #8
 8000362:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd_buffer[1] = Command & 0xFF;        // Low Byte
 8000366:	f88d 0005 	strb.w	r0, [sp, #5]

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	480b      	ldr	r0, [pc, #44]	@ (800039c <SdCmd+0x40>)
 8000370:	f000 fe20 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <SdCmd+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	2110      	movs	r1, #16
 800037a:	4620      	mov	r0, r4
 800037c:	f000 fe1a 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd_buffer, 2, 100);
 8000380:	2364      	movs	r3, #100	@ 0x64
 8000382:	2202      	movs	r2, #2
 8000384:	a901      	add	r1, sp, #4
 8000386:	4807      	ldr	r0, [pc, #28]	@ (80003a4 <SdCmd+0x48>)
 8000388:	f002 f893 	bl	80024b2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2110      	movs	r1, #16
 8000390:	4620      	mov	r0, r4
 8000392:	f000 fe0f 	bl	8000fb4 <HAL_GPIO_WritePin>
}
 8000396:	b002      	add	sp, #8
 8000398:	bd10      	pop	{r4, pc}
 800039a:	bf00      	nop
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020000 	.word	0x40020000
 80003a4:	2000a384 	.word	0x2000a384

080003a8 <SdData>:

void SdData(uint16_t DData)
{
 80003a8:	b510      	push	{r4, lr}
 80003aa:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    data_buffer[0] = (DData >> 8) & 0xFF; // High Byte
 80003ac:	0a03      	lsrs	r3, r0, #8
 80003ae:	f88d 3004 	strb.w	r3, [sp, #4]
    data_buffer[1] = DData & 0xFF;        // Low Byte
 80003b2:	f88d 0005 	strb.w	r0, [sp, #5]

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	4611      	mov	r1, r2
 80003ba:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <SdData+0x40>)
 80003bc:	f000 fdfa 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <SdData+0x44>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	4620      	mov	r0, r4
 80003c8:	f000 fdf4 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_buffer, 2, 100);
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	2202      	movs	r2, #2
 80003d0:	a901      	add	r1, sp, #4
 80003d2:	4807      	ldr	r0, [pc, #28]	@ (80003f0 <SdData+0x48>)
 80003d4:	f002 f86d 	bl	80024b2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2110      	movs	r1, #16
 80003dc:	4620      	mov	r0, r4
 80003de:	f000 fde9 	bl	8000fb4 <HAL_GPIO_WritePin>
}
 80003e2:	b002      	add	sp, #8
 80003e4:	bd10      	pop	{r4, pc}
 80003e6:	bf00      	nop
 80003e8:	40020400 	.word	0x40020400
 80003ec:	40020000 	.word	0x40020000
 80003f0:	2000a384 	.word	0x2000a384

080003f4 <IST3257_UpdateScreen_DMA>:


void IST3257_UpdateScreen_DMA(uint8_t* buffer_to_send)
{
 80003f4:	b538      	push	{r3, r4, r5, lr}
 80003f6:	4604      	mov	r4, r0
    while (spi_dma_busy) { __NOP(); }
 80003f8:	e000      	b.n	80003fc <IST3257_UpdateScreen_DMA+0x8>
 80003fa:	bf00      	nop
 80003fc:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <IST3257_UpdateScreen_DMA+0x4c>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1fa      	bne.n	80003fa <IST3257_UpdateScreen_DMA+0x6>
    spi_dma_busy = 1;
 8000404:	2501      	movs	r5, #1
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <IST3257_UpdateScreen_DMA+0x4c>)
 8000408:	701d      	strb	r5, [r3, #0]
    SdCmd(0x0008); SdData(0x0000);
 800040a:	2008      	movs	r0, #8
 800040c:	f7ff ffa6 	bl	800035c <SdCmd>
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ffc9 	bl	80003a8 <SdData>
    SdCmd(0x0009);
 8000416:	2009      	movs	r0, #9
 8000418:	f7ff ffa0 	bl	800035c <SdCmd>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800041c:	462a      	mov	r2, r5
 800041e:	4629      	mov	r1, r5
 8000420:	4808      	ldr	r0, [pc, #32]	@ (8000444 <IST3257_UpdateScreen_DMA+0x50>)
 8000422:	f000 fdc7 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2110      	movs	r1, #16
 800042a:	4807      	ldr	r0, [pc, #28]	@ (8000448 <IST3257_UpdateScreen_DMA+0x54>)
 800042c:	f000 fdc2 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, buffer_to_send, FRAME_SIZE_BYTES);
 8000430:	f44f 42a2 	mov.w	r2, #20736	@ 0x5100
 8000434:	4621      	mov	r1, r4
 8000436:	4805      	ldr	r0, [pc, #20]	@ (800044c <IST3257_UpdateScreen_DMA+0x58>)
 8000438:	f002 f91e 	bl	8002678 <HAL_SPI_Transmit_DMA>
}
 800043c:	bd38      	pop	{r3, r4, r5, pc}
 800043e:	bf00      	nop
 8000440:	20000118 	.word	0x20000118
 8000444:	40020400 	.word	0x40020400
 8000448:	40020000 	.word	0x40020000
 800044c:	2000a384 	.word	0x2000a384

08000450 <IST3257_UpdateScreen>:

// 保留您之前的阻塞式刷新函数
void IST3257_UpdateScreen(void)
{
 8000450:	b510      	push	{r4, lr}
    SdCmd(0x0008);
 8000452:	2008      	movs	r0, #8
 8000454:	f7ff ff82 	bl	800035c <SdCmd>
    SdData(0x0000);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ffa5 	bl	80003a8 <SdData>
    SdCmd(0x0009);
 800045e:	2009      	movs	r0, #9
 8000460:	f7ff ff7c 	bl	800035c <SdCmd>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000464:	2201      	movs	r2, #1
 8000466:	4611      	mov	r1, r2
 8000468:	480b      	ldr	r0, [pc, #44]	@ (8000498 <IST3257_UpdateScreen+0x48>)
 800046a:	f000 fda3 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800046e:	4c0b      	ldr	r4, [pc, #44]	@ (800049c <IST3257_UpdateScreen+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	2110      	movs	r1, #16
 8000474:	4620      	mov	r0, r4
 8000476:	f000 fd9d 	bl	8000fb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, back_buffer_ptr, FRAME_SIZE_BYTES, 1000);
 800047a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800047e:	f44f 42a2 	mov.w	r2, #20736	@ 0x5100
 8000482:	4907      	ldr	r1, [pc, #28]	@ (80004a0 <IST3257_UpdateScreen+0x50>)
 8000484:	6809      	ldr	r1, [r1, #0]
 8000486:	4807      	ldr	r0, [pc, #28]	@ (80004a4 <IST3257_UpdateScreen+0x54>)
 8000488:	f002 f813 	bl	80024b2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2110      	movs	r1, #16
 8000490:	4620      	mov	r0, r4
 8000492:	f000 fd8f 	bl	8000fb4 <HAL_GPIO_WritePin>
}
 8000496:	bd10      	pop	{r4, pc}
 8000498:	40020400 	.word	0x40020400
 800049c:	40020000 	.word	0x40020000
 80004a0:	20000120 	.word	0x20000120
 80004a4:	2000a384 	.word	0x2000a384

080004a8 <IST3257_DrawPixel>:
// --- 保留您之前的函数 (修正了绘图目标) ---
void IST3257_DrawPixel(uint16_t x, uint16_t y, uint8_t level) {
    if (x >= IST3257_WIDTH || y >= IST3257_HEIGHT) {
 80004a8:	28ff      	cmp	r0, #255	@ 0xff
 80004aa:	d81b      	bhi.n	80004e4 <IST3257_DrawPixel+0x3c>
 80004ac:	29a1      	cmp	r1, #161	@ 0xa1
 80004ae:	d819      	bhi.n	80004e4 <IST3257_DrawPixel+0x3c>
void IST3257_DrawPixel(uint16_t x, uint16_t y, uint8_t level) {
 80004b0:	b410      	push	{r4}
        return;
    }
    level &= 0x0F;
 80004b2:	f002 020f 	and.w	r2, r2, #15
    // 修正：让绘图函数总是画在 back_buffer_ptr 指向的缓冲区
    uint8_t *p = (uint8_t*)back_buffer_ptr + (y * (IST3257_WIDTH / 2)) + (x / 2);
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <IST3257_DrawPixel+0x40>)
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	0843      	lsrs	r3, r0, #1
 80004bc:	eb03 13c1 	add.w	r3, r3, r1, lsl #7

    if (x % 2 == 0) {
 80004c0:	f010 0f01 	tst.w	r0, #1
 80004c4:	d108      	bne.n	80004d8 <IST3257_DrawPixel+0x30>
        *p = (*p & 0x0F) | (level << 4);
 80004c6:	5ce1      	ldrb	r1, [r4, r3]
 80004c8:	f001 010f 	and.w	r1, r1, #15
 80004cc:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 80004d0:	54e2      	strb	r2, [r4, r3]
    } else {
        *p = (*p & 0xF0) | level;
    }
}
 80004d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004d6:	4770      	bx	lr
        *p = (*p & 0xF0) | level;
 80004d8:	5ce1      	ldrb	r1, [r4, r3]
 80004da:	f021 010f 	bic.w	r1, r1, #15
 80004de:	430a      	orrs	r2, r1
 80004e0:	54e2      	strb	r2, [r4, r3]
 80004e2:	e7f6      	b.n	80004d2 <IST3257_DrawPixel+0x2a>
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000120 	.word	0x20000120

080004ec <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ee:	e7fe      	b.n	80004ee <Error_Handler+0x2>

080004f0 <SystemClock_Config>:
{
 80004f0:	b510      	push	{r4, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f4:	ac08      	add	r4, sp, #32
 80004f6:	2230      	movs	r2, #48	@ 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4620      	mov	r0, r4
 80004fc:	f004 fa25 	bl	800494a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	2300      	movs	r3, #0
 8000502:	9303      	str	r3, [sp, #12]
 8000504:	9304      	str	r3, [sp, #16]
 8000506:	9305      	str	r3, [sp, #20]
 8000508:	9306      	str	r3, [sp, #24]
 800050a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4a21      	ldr	r2, [pc, #132]	@ (8000594 <SystemClock_Config+0xa4>)
 8000510:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000512:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000516:	6411      	str	r1, [r2, #64]	@ 0x40
 8000518:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800051a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800051e:	9201      	str	r2, [sp, #4]
 8000520:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <SystemClock_Config+0xa8>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000534:	9302      	str	r3, [sp, #8]
 8000536:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000540:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800054a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800054c:	230f      	movs	r3, #15
 800054e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000550:	2390      	movs	r3, #144	@ 0x90
 8000552:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000554:	2304      	movs	r3, #4
 8000556:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000558:	2305      	movs	r3, #5
 800055a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	4620      	mov	r0, r4
 800055e:	f001 fb87 	bl	8001c70 <HAL_RCC_OscConfig>
 8000562:	b990      	cbnz	r0, 800058a <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000574:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000578:	2101      	movs	r1, #1
 800057a:	a803      	add	r0, sp, #12
 800057c:	f001 fdce 	bl	800211c <HAL_RCC_ClockConfig>
 8000580:	b928      	cbnz	r0, 800058e <SystemClock_Config+0x9e>
  HAL_RCC_EnableCSS();
 8000582:	f001 fd71 	bl	8002068 <HAL_RCC_EnableCSS>
}
 8000586:	b014      	add	sp, #80	@ 0x50
 8000588:	bd10      	pop	{r4, pc}
    Error_Handler();
 800058a:	f7ff ffaf 	bl	80004ec <Error_Handler>
    Error_Handler();
 800058e:	f7ff ffad 	bl	80004ec <Error_Handler>
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40007000 	.word	0x40007000

0800059c <main>:
{
 800059c:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800059e:	f000 f965 	bl	800086c <HAL_Init>
  SystemClock_Config();
 80005a2:	f7ff ffa5 	bl	80004f0 <SystemClock_Config>
  MX_GPIO_Init();
 80005a6:	f7ff fe4b 	bl	8000240 <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f7ff fe2f 	bl	800020c <MX_DMA_Init>
  MX_SPI1_Init();
 80005ae:	f000 f8bf 	bl	8000730 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80005b2:	f002 ff0d 	bl	80033d0 <MX_USB_DEVICE_Init>
  HAL_Delay(1000); // 等待USB枚举完成
 80005b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ba:	f000 f983 	bl	80008c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80005be:	4c54      	ldr	r4, [pc, #336]	@ (8000710 <main+0x174>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	2108      	movs	r1, #8
 80005c4:	4620      	mov	r0, r4
 80005c6:	f000 fcf5 	bl	8000fb4 <HAL_GPIO_WritePin>
  HAL_Delay(20); // 手册要求复位低电平至少保持10ms [cite: 1324]
 80005ca:	2014      	movs	r0, #20
 80005cc:	f000 f97a 	bl	80008c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2108      	movs	r1, #8
 80005d4:	4620      	mov	r0, r4
 80005d6:	f000 fced 	bl	8000fb4 <HAL_GPIO_WritePin>
  HAL_Delay(20); // 手册要求复位后至少等待10ms再发送指令 [cite: 1327]
 80005da:	2014      	movs	r0, #20
 80005dc:	f000 f972 	bl	80008c4 <HAL_Delay>
  SdCmd(0x0000);    // Index: R00h, Start Oscillator 
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff febb 	bl	800035c <SdCmd>
  SdData(0x0001);   // Data:  OSC bit = 1, 启动振荡器 [cite: 1018]
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff fede 	bl	80003a8 <SdData>
  HAL_Delay(5);     // 短暂延时等待振荡器稳定
 80005ec:	2005      	movs	r0, #5
 80005ee:	f000 f969 	bl	80008c4 <HAL_Delay>
  SdCmd(0x0001);    // Index: R01h, Driver control 
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff feb2 	bl	800035c <SdCmd>
  SdData(0x0000);   // Data:  NL=00 -> Duty 1/162, SHL=0, SGS=0 [cite: 1037]
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fed5 	bl	80003a8 <SdData>
  SdCmd(0x0023);    // Index: R23h, Display Mode Control 
 80005fe:	2023      	movs	r0, #35	@ 0x23
 8000600:	f7ff feac 	bl	800035c <SdCmd>
  SdData(0x0003);   // Data:  DSPM=100
 8000604:	2003      	movs	r0, #3
 8000606:	f7ff fecf 	bl	80003a8 <SdData>
  SdCmd(0x0028);      // Index: R28h, Frame Rate Control
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f7ff fea6 	bl	800035c <SdCmd>
  SdData(0x0088);
 8000610:	2088      	movs	r0, #136	@ 0x88
 8000612:	f7ff fec9 	bl	80003a8 <SdData>
  SdCmd(0x0004);    // Index: R04h, Power control (2) 
 8000616:	2004      	movs	r0, #4
 8000618:	f7ff fea0 	bl	800035c <SdCmd>
  SdData(0x0065);   // Data:  Bias=1/12 (110), Booster=x7 (101) [cite: 1075, 1077]
 800061c:	2065      	movs	r0, #101	@ 0x65
 800061e:	f7ff fec3 	bl	80003a8 <SdData>
  SdCmd(0x0002);
 8000622:	2002      	movs	r0, #2
 8000624:	f7ff fe9a 	bl	800035c <SdCmd>
  SdData(0x0100 + 20);//20-Line 反转
 8000628:	f44f 708a 	mov.w	r0, #276	@ 0x114
 800062c:	f7ff febc 	bl	80003a8 <SdData>
  SdCmd(0x0005);    // Index: R05h, Contrast control 
 8000630:	2005      	movs	r0, #5
 8000632:	f7ff fe93 	bl	800035c <SdCmd>
  SdData(0x0061);   // Data:  设置一个中间对比度值 (61/127)
 8000636:	2061      	movs	r0, #97	@ 0x61
 8000638:	f7ff feb6 	bl	80003a8 <SdData>
  SdCmd(0x0003);    // Index: R03h, Power control (1) 
 800063c:	2003      	movs	r0, #3
 800063e:	f7ff fe8d 	bl	800035c <SdCmd>
  SdData(0x0940);   // Data: VSON=1, DC1=1, VMEN=1 
 8000642:	f44f 6014 	mov.w	r0, #2368	@ 0x940
 8000646:	f7ff feaf 	bl	80003a8 <SdData>
  HAL_Delay(15);    // 等待电压稳定，手册要求至少10ms [cite: 1335]
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f93a 	bl	80008c4 <HAL_Delay>
  SdCmd(0x0003);    // Index: R03h, Power control (1) 
 8000650:	2003      	movs	r0, #3
 8000652:	f7ff fe83 	bl	800035c <SdCmd>
  SdData(0x0B60);   // Data: 在上一步基础上，增加 VGEN=1, DC2=1 
 8000656:	f44f 6036 	mov.w	r0, #2912	@ 0xb60
 800065a:	f7ff fea5 	bl	80003a8 <SdData>
  HAL_Delay(15);    // 等待电压稳定，手册要求至少10ms [cite: 1339]
 800065e:	200f      	movs	r0, #15
 8000660:	f000 f930 	bl	80008c4 <HAL_Delay>
  SdCmd(0x0003);    // Index: R03h, Power control (1) 
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff fe79 	bl	800035c <SdCmd>
  SdData(0x0F70);   // Data: 在上一步基础上，增加 VOEN=1, DC3=1 
 800066a:	f44f 6077 	mov.w	r0, #3952	@ 0xf70
 800066e:	f7ff fe9b 	bl	80003a8 <SdData>
  HAL_Delay(15);    // 等待电压稳定，手册要求至少10ms [cite: 1343]
 8000672:	200f      	movs	r0, #15
 8000674:	f000 f926 	bl	80008c4 <HAL_Delay>
  SdCmd(0x0007);    // Index: R07h, Display control 
 8000678:	2007      	movs	r0, #7
 800067a:	f7ff fe6f 	bl	800035c <SdCmd>
  SdData(0x0001);   // Data:  D=1, 开启显示驱动输出 [cite: 1128
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fe92 	bl	80003a8 <SdData>
  front_buffer_ptr = framebuffer1;
 8000684:	4823      	ldr	r0, [pc, #140]	@ (8000714 <main+0x178>)
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <main+0x17c>)
 8000688:	6018      	str	r0, [r3, #0]
  back_buffer_ptr = framebuffer2;
 800068a:	4c24      	ldr	r4, [pc, #144]	@ (800071c <main+0x180>)
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <main+0x184>)
 800068e:	601c      	str	r4, [r3, #0]
  memset(front_buffer_ptr, 0, FRAME_SIZE_BYTES);
 8000690:	f44f 45a2 	mov.w	r5, #20736	@ 0x5100
 8000694:	462a      	mov	r2, r5
 8000696:	2100      	movs	r1, #0
 8000698:	f004 f957 	bl	800494a <memset>
  memset(back_buffer_ptr, 0, FRAME_SIZE_BYTES);
 800069c:	462a      	mov	r2, r5
 800069e:	2100      	movs	r1, #0
 80006a0:	4620      	mov	r0, r4
 80006a2:	f004 f952 	bl	800494a <memset>
  for(int i = 32; i < 256-32; i++)
 80006a6:	2520      	movs	r5, #32
 80006a8:	e012      	b.n	80006d0 <main+0x134>
      IST3257_DrawPixel(i, j, (i/2) % 16);
 80006aa:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 80006ae:	1052      	asrs	r2, r2, #1
 80006b0:	4253      	negs	r3, r2
 80006b2:	f002 020f 	and.w	r2, r2, #15
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	bf58      	it	pl
 80006bc:	425a      	negpl	r2, r3
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	b2a1      	uxth	r1, r4
 80006c2:	b2a8      	uxth	r0, r5
 80006c4:	f7ff fef0 	bl	80004a8 <IST3257_DrawPixel>
    for(int j = 32; j < 160-32; j++)
 80006c8:	3401      	adds	r4, #1
 80006ca:	2c7f      	cmp	r4, #127	@ 0x7f
 80006cc:	dded      	ble.n	80006aa <main+0x10e>
  for(int i = 32; i < 256-32; i++)
 80006ce:	3501      	adds	r5, #1
 80006d0:	2ddf      	cmp	r5, #223	@ 0xdf
 80006d2:	dc01      	bgt.n	80006d8 <main+0x13c>
    for(int j = 32; j < 160-32; j++)
 80006d4:	2420      	movs	r4, #32
 80006d6:	e7f8      	b.n	80006ca <main+0x12e>
  IST3257_UpdateScreen();
 80006d8:	f7ff feba 	bl	8000450 <IST3257_UpdateScreen>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <main+0x188>)
 80006de:	f003 f8e5 	bl	80038ac <USBD_CDC_ReceivePacket>
 80006e2:	e00c      	b.n	80006fe <main+0x162>
            __NOP();
 80006e4:	bf00      	nop
        while (spi_dma_busy) {
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <main+0x18c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1fa      	bne.n	80006e4 <main+0x148>
        uint8_t *temp_ptr = front_buffer_ptr;
 80006ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <main+0x17c>)
 80006f0:	6811      	ldr	r1, [r2, #0]
        front_buffer_ptr = back_buffer_ptr;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <main+0x184>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	6010      	str	r0, [r2, #0]
        back_buffer_ptr = temp_ptr;
 80006f8:	6019      	str	r1, [r3, #0]
        IST3257_UpdateScreen_DMA(front_buffer_ptr);
 80006fa:	f7ff fe7b 	bl	80003f4 <IST3257_UpdateScreen_DMA>
    if (new_frame_received_flag)
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <main+0x190>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0fb      	beq.n	80006fe <main+0x162>
        new_frame_received_flag = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <main+0x190>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
        while (spi_dma_busy) {
 800070c:	e7eb      	b.n	80006e6 <main+0x14a>
 800070e:	bf00      	nop
 8000710:	40020000 	.word	0x40020000
 8000714:	20005224 	.word	0x20005224
 8000718:	2000011c 	.word	0x2000011c
 800071c:	20000124 	.word	0x20000124
 8000720:	20000120 	.word	0x20000120
 8000724:	2000a3e0 	.word	0x2000a3e0
 8000728:	20000118 	.word	0x20000118
 800072c:	20000119 	.word	0x20000119

08000730 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000730:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_SPI1_Init+0x3c>)
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_SPI1_Init+0x40>)
 8000736:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000738:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800073c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	2300      	movs	r3, #0
 8000740:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000742:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074e:	2208      	movs	r2, #8
 8000750:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000758:	230a      	movs	r3, #10
 800075a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075c:	f001 fe4a 	bl	80023f4 <HAL_SPI_Init>
 8000760:	b900      	cbnz	r0, 8000764 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000762:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000764:	f7ff fec2 	bl	80004ec <Error_Handler>
}
 8000768:	e7fb      	b.n	8000762 <MX_SPI1_Init+0x32>
 800076a:	bf00      	nop
 800076c:	2000a384 	.word	0x2000a384
 8000770:	40013000 	.word	0x40013000

08000774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	2300      	movs	r3, #0
 800077a:	9303      	str	r3, [sp, #12]
 800077c:	9304      	str	r3, [sp, #16]
 800077e:	9305      	str	r3, [sp, #20]
 8000780:	9306      	str	r3, [sp, #24]
 8000782:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000784:	6802      	ldr	r2, [r0, #0]
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <HAL_SPI_MspInit+0x9c>)
 8000788:	429a      	cmp	r2, r3
 800078a:	d001      	beq.n	8000790 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800078c:	b009      	add	sp, #36	@ 0x24
 800078e:	bd30      	pop	{r4, r5, pc}
 8000790:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000792:	2500      	movs	r5, #0
 8000794:	9501      	str	r5, [sp, #4]
 8000796:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800079a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800079c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80007a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80007a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	9502      	str	r5, [sp, #8]
 80007ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b0:	f042 0201 	orr.w	r2, r2, #1
 80007b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007c0:	23a0      	movs	r3, #160	@ 0xa0
 80007c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007cc:	2305      	movs	r3, #5
 80007ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	a903      	add	r1, sp, #12
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <HAL_SPI_MspInit+0xa0>)
 80007d4:	f000 fb0a 	bl	8000dec <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80007d8:	480f      	ldr	r0, [pc, #60]	@ (8000818 <HAL_SPI_MspInit+0xa4>)
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_SPI_MspInit+0xa8>)
 80007dc:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80007de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007e2:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ee:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f0:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f2:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80007f4:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007f6:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007f8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007fa:	f000 f96f 	bl	8000adc <HAL_DMA_Init>
 80007fe:	b918      	cbnz	r0, 8000808 <HAL_SPI_MspInit+0x94>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_SPI_MspInit+0xa4>)
 8000802:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000804:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000806:	e7c1      	b.n	800078c <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000808:	f7ff fe70 	bl	80004ec <Error_Handler>
 800080c:	e7f8      	b.n	8000800 <HAL_SPI_MspInit+0x8c>
 800080e:	bf00      	nop
 8000810:	40013000 	.word	0x40013000
 8000814:	40020000 	.word	0x40020000
 8000818:	2000a324 	.word	0x2000a324
 800081c:	40026440 	.word	0x40026440

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b510      	push	{r4, lr}
 8000822:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_InitTick+0x40>)
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <HAL_InitTick+0x44>)
 8000832:	6810      	ldr	r0, [r2, #0]
 8000834:	fbb0 f0f3 	udiv	r0, r0, r3
 8000838:	f000 f8c0 	bl	80009bc <HAL_SYSTICK_Config>
 800083c:	b968      	cbnz	r0, 800085a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	2c0f      	cmp	r4, #15
 8000840:	d901      	bls.n	8000846 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	e00a      	b.n	800085c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000846:	2200      	movs	r2, #0
 8000848:	4621      	mov	r1, r4
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	f000 f8a1 	bl	8000994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_InitTick+0x48>)
 8000854:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000856:	2000      	movs	r0, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
}
 800085c:	bd10      	pop	{r4, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_Init>:
{
 800086c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_Init+0x30>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000876:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800087e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000886:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f871 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f7ff ffc6 	bl	8000820 <HAL_InitTick>
  HAL_MspInit();
 8000894:	f000 fb94 	bl	8000fc0 <HAL_MspInit>
}
 8000898:	2000      	movs	r0, #0
 800089a:	bd08      	pop	{r3, pc}
 800089c:	40023c00 	.word	0x40023c00

080008a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <HAL_IncTick+0x10>)
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_IncTick+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	440b      	add	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2000a3dc 	.word	0x2000a3dc
 80008b4:	20000000 	.word	0x20000000

080008b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008b8:	4b01      	ldr	r3, [pc, #4]	@ (80008c0 <HAL_GetTick+0x8>)
 80008ba:	6818      	ldr	r0, [r3, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000a3dc 	.word	0x2000a3dc

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fff6 	bl	80008b8 <HAL_GetTick>
 80008cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008d2:	d002      	beq.n	80008da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <HAL_Delay+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008da:	f7ff ffed 	bl	80008b8 <HAL_GetTick>
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	d3fa      	bcc.n	80008da <HAL_Delay+0x16>
  {
  }
}
 80008e4:	bd38      	pop	{r3, r4, r5, pc}
 80008e6:	bf00      	nop
 80008e8:	20000000 	.word	0x20000000

080008ec <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db07      	blt.n	8000900 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f0:	f000 021f 	and.w	r2, r0, #31
 80008f4:	0940      	lsrs	r0, r0, #5
 80008f6:	2301      	movs	r3, #1
 80008f8:	4093      	lsls	r3, r2
 80008fa:	4a02      	ldr	r2, [pc, #8]	@ (8000904 <__NVIC_EnableIRQ+0x18>)
 80008fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000908:	2800      	cmp	r0, #0
 800090a:	db08      	blt.n	800091e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	0109      	lsls	r1, r1, #4
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000914:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000918:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800091c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	f000 000f 	and.w	r0, r0, #15
 8000922:	0109      	lsls	r1, r1, #4
 8000924:	b2c9      	uxtb	r1, r1
 8000926:	4b01      	ldr	r3, [pc, #4]	@ (800092c <__NVIC_SetPriority+0x24>)
 8000928:	5419      	strb	r1, [r3, r0]
  }
}
 800092a:	4770      	bx	lr
 800092c:	e000ed14 	.word	0xe000ed14

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000932:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000936:	f1c0 0c07 	rsb	ip, r0, #7
 800093a:	f1bc 0f04 	cmp.w	ip, #4
 800093e:	bf28      	it	cs
 8000940:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000944:	1d03      	adds	r3, r0, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d90f      	bls.n	800096a <NVIC_EncodePriority+0x3a>
 800094a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 3eff 	mov.w	lr, #4294967295
 8000950:	fa0e f00c 	lsl.w	r0, lr, ip
 8000954:	ea21 0100 	bic.w	r1, r1, r0
 8000958:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095a:	fa0e fe03 	lsl.w	lr, lr, r3
 800095e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000962:	ea41 0002 	orr.w	r0, r1, r2
 8000966:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	2300      	movs	r3, #0
 800096c:	e7ee      	b.n	800094c <NVIC_EncodePriority+0x1c>
	...

08000970 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000972:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000974:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	0200      	lsls	r0, r0, #8
 800097e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000982:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800098c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b510      	push	{r4, lr}
 8000996:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_NVIC_SetPriority+0x1c>)
 800099a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80009a0:	f7ff ffc6 	bl	8000930 <NVIC_EncodePriority>
 80009a4:	4601      	mov	r1, r0
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff ffae 	bl	8000908 <__NVIC_SetPriority>
}
 80009ac:	bd10      	pop	{r4, pc}
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b6:	f7ff ff99 	bl	80008ec <__NVIC_EnableIRQ>
}
 80009ba:	bd08      	pop	{r3, pc}

080009bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	3801      	subs	r0, #1
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009c2:	d20b      	bcs.n	80009dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80009c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <HAL_SYSTICK_Config+0x24>)
 80009cc:	21f0      	movs	r1, #240	@ 0xf0
 80009ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d2:	2000      	movs	r0, #0
 80009d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	2207      	movs	r2, #7
 80009d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009e4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80009e6:	6805      	ldr	r5, [r0, #0]
 80009e8:	682c      	ldr	r4, [r5, #0]
 80009ea:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80009ee:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80009f0:	6804      	ldr	r4, [r0, #0]
 80009f2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80009f4:	6883      	ldr	r3, [r0, #8]
 80009f6:	2b40      	cmp	r3, #64	@ 0x40
 80009f8:	d005      	beq.n	8000a06 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80009fa:	6803      	ldr	r3, [r0, #0]
 80009fc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80009fe:	6803      	ldr	r3, [r0, #0]
 8000a00:	60da      	str	r2, [r3, #12]
  }
}
 8000a02:	bc30      	pop	{r4, r5}
 8000a04:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000a06:	6803      	ldr	r3, [r0, #0]
 8000a08:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a0a:	6803      	ldr	r3, [r0, #0]
 8000a0c:	60d9      	str	r1, [r3, #12]
 8000a0e:	e7f8      	b.n	8000a02 <DMA_SetConfig+0x1e>

08000a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000a10:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	3910      	subs	r1, #16
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <DMA_CalcBaseAndBitshift+0x34>)
 8000a1a:	fba2 4201 	umull	r4, r2, r2, r1
 8000a1e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a20:	4c09      	ldr	r4, [pc, #36]	@ (8000a48 <DMA_CalcBaseAndBitshift+0x38>)
 8000a22:	5ca2      	ldrb	r2, [r4, r2]
 8000a24:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000a26:	295f      	cmp	r1, #95	@ 0x5f
 8000a28:	d907      	bls.n	8000a3a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a2a:	f36f 0309 	bfc	r3, #0, #10
 8000a2e:	3304      	adds	r3, #4
 8000a30:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000a32:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a38:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000a3a:	f36f 0309 	bfc	r3, #0, #10
 8000a3e:	6583      	str	r3, [r0, #88]	@ 0x58
 8000a40:	e7f7      	b.n	8000a32 <DMA_CalcBaseAndBitshift+0x22>
 8000a42:	bf00      	nop
 8000a44:	aaaaaaab 	.word	0xaaaaaaab
 8000a48:	08004cd0 	.word	0x08004cd0

08000a4c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000a4c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000a4e:	6982      	ldr	r2, [r0, #24]
 8000a50:	b992      	cbnz	r2, 8000a78 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d00a      	beq.n	8000a6c <DMA_CheckFifoParam+0x20>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d002      	beq.n	8000a60 <DMA_CheckFifoParam+0x14>
 8000a5a:	b10b      	cbz	r3, 8000a60 <DMA_CheckFifoParam+0x14>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a60:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000a62:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000a66:	d128      	bne.n	8000aba <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000a68:	2000      	movs	r0, #0
 8000a6a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000a72:	d024      	beq.n	8000abe <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000a74:	2000      	movs	r0, #0
 8000a76:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000a78:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000a7c:	d009      	beq.n	8000a92 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d925      	bls.n	8000ace <DMA_CheckFifoParam+0x82>
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d125      	bne.n	8000ad2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a86:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000a88:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000a8c:	d123      	bne.n	8000ad6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000a8e:	2000      	movs	r0, #0
 8000a90:	4770      	bx	lr
    switch (tmp)
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d803      	bhi.n	8000a9e <DMA_CheckFifoParam+0x52>
 8000a96:	e8df f003 	tbb	[pc, r3]
 8000a9a:	0414      	.short	0x0414
 8000a9c:	0a14      	.short	0x0a14
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000aa2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000aa4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000aa8:	d10d      	bne.n	8000ac6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000aaa:	2000      	movs	r0, #0
 8000aac:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000aae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000ab4:	d009      	beq.n	8000aca <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	4770      	bx	lr
        status = HAL_ERROR;
 8000aba:	2001      	movs	r0, #1
 8000abc:	4770      	bx	lr
        status = HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	4770      	bx	lr
      status = HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	4770      	bx	lr
        status = HAL_ERROR;
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	4770      	bx	lr
        status = HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	4770      	bx	lr
      status = HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4770      	bx	lr
    switch (tmp)
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000ad6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000ad8:	4770      	bx	lr
	...

08000adc <HAL_DMA_Init>:
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff feea 	bl	80008b8 <HAL_GetTick>
  if(hdma == NULL)
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d05b      	beq.n	8000ba0 <HAL_DMA_Init+0xc4>
 8000ae8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000af0:	2300      	movs	r3, #0
 8000af2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000af6:	6822      	ldr	r2, [r4, #0]
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f023 0301 	bic.w	r3, r3, #1
 8000afe:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	f012 0f01 	tst.w	r2, #1
 8000b08:	d00a      	beq.n	8000b20 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b0a:	f7ff fed5 	bl	80008b8 <HAL_GetTick>
 8000b0e:	1b43      	subs	r3, r0, r5
 8000b10:	2b05      	cmp	r3, #5
 8000b12:	d9f5      	bls.n	8000b00 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b14:	2320      	movs	r3, #32
 8000b16:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000b20:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b22:	4920      	ldr	r1, [pc, #128]	@ (8000ba4 <HAL_DMA_Init+0xc8>)
 8000b24:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b26:	6862      	ldr	r2, [r4, #4]
 8000b28:	68a0      	ldr	r0, [r4, #8]
 8000b2a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b2c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b2e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b30:	6920      	ldr	r0, [r4, #16]
 8000b32:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b36:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b38:	69a0      	ldr	r0, [r4, #24]
 8000b3a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b3c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b40:	6a20      	ldr	r0, [r4, #32]
 8000b42:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b44:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b46:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000b48:	2904      	cmp	r1, #4
 8000b4a:	d01e      	beq.n	8000b8a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000b4c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000b4e:	6826      	ldr	r6, [r4, #0]
 8000b50:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b52:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000b56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000b58:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d107      	bne.n	8000b6e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000b5e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000b60:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000b64:	b11b      	cbz	r3, 8000b6e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff ff70 	bl	8000a4c <DMA_CheckFifoParam>
 8000b6c:	b990      	cbnz	r0, 8000b94 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000b6e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff ff4d 	bl	8000a10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b76:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000b78:	233f      	movs	r3, #63	@ 0x3f
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000b88:	e7c9      	b.n	8000b1e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000b8c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000b8e:	4301      	orrs	r1, r0
 8000b90:	430a      	orrs	r2, r1
 8000b92:	e7db      	b.n	8000b4c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8000b9e:	e7be      	b.n	8000b1e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	e7bc      	b.n	8000b1e <HAL_DMA_Init+0x42>
 8000ba4:	f010803f 	.word	0xf010803f

08000ba8 <HAL_DMA_Start_IT>:
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bac:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000bae:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000bb2:	2801      	cmp	r0, #1
 8000bb4:	d02a      	beq.n	8000c0c <HAL_DMA_Start_IT+0x64>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bbc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000bc0:	2801      	cmp	r0, #1
 8000bc2:	d004      	beq.n	8000bce <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8000bca:	2002      	movs	r0, #2
}
 8000bcc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff ff03 	bl	80009e4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bde:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000be0:	233f      	movs	r3, #63	@ 0x3f
 8000be2:	4093      	lsls	r3, r2
 8000be4:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	6813      	ldr	r3, [r2, #0]
 8000bea:	f043 0316 	orr.w	r3, r3, #22
 8000bee:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000bf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000bf2:	b123      	cbz	r3, 8000bfe <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000bfe:	6822      	ldr	r2, [r4, #0]
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7df      	b.n	8000bcc <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	e7dd      	b.n	8000bcc <HAL_DMA_Start_IT+0x24>

08000c10 <HAL_DMA_IRQHandler>:
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c1a:	4b72      	ldr	r3, [pc, #456]	@ (8000de4 <HAL_DMA_IRQHandler+0x1d4>)
 8000c1c:	681d      	ldr	r5, [r3, #0]
 8000c1e:	4b72      	ldr	r3, [pc, #456]	@ (8000de8 <HAL_DMA_IRQHandler+0x1d8>)
 8000c20:	fba3 3505 	umull	r3, r5, r3, r5
 8000c24:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c26:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8000c28:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c2a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	4093      	lsls	r3, r2
 8000c30:	4233      	tst	r3, r6
 8000c32:	d010      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	f012 0f04 	tst.w	r2, #4
 8000c3c:	d00b      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f022 0204 	bic.w	r2, r2, #4
 8000c44:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c46:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000c48:	2308      	movs	r3, #8
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c4e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c56:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	4233      	tst	r3, r6
 8000c5e:	d009      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c60:	6822      	ldr	r2, [r4, #0]
 8000c62:	6952      	ldr	r2, [r2, #20]
 8000c64:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000c68:	d004      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c6a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c74:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c76:	2304      	movs	r3, #4
 8000c78:	4093      	lsls	r3, r2
 8000c7a:	4233      	tst	r3, r6
 8000c7c:	d009      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	f012 0f02 	tst.w	r2, #2
 8000c86:	d004      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c88:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c92:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c94:	2310      	movs	r3, #16
 8000c96:	4093      	lsls	r3, r2
 8000c98:	4233      	tst	r3, r6
 8000c9a:	d024      	beq.n	8000ce6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c9c:	6822      	ldr	r2, [r4, #0]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	f012 0f08 	tst.w	r2, #8
 8000ca4:	d01f      	beq.n	8000ce6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ca6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000cb0:	d00d      	beq.n	8000cce <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000cb8:	d104      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000cba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cbc:	b19b      	cbz	r3, 8000ce6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	4798      	blx	r3
 8000cc2:	e010      	b.n	8000ce6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cc4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000cc6:	b173      	cbz	r3, 8000ce6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4798      	blx	r3
 8000ccc:	e00b      	b.n	8000ce6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000cd4:	d103      	bne.n	8000cde <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f022 0208 	bic.w	r2, r2, #8
 8000cdc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000cde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ce0:	b10b      	cbz	r3, 8000ce6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ce8:	2320      	movs	r3, #32
 8000cea:	4093      	lsls	r3, r2
 8000cec:	4233      	tst	r3, r6
 8000cee:	d054      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	f012 0f10 	tst.w	r2, #16
 8000cf8:	d04f      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cfa:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cfc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d00e      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000d0c:	d033      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000d14:	d12a      	bne.n	8000d6c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d03e      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4798      	blx	r3
 8000d20:	e03b      	b.n	8000d9a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d22:	6822      	ldr	r2, [r4, #0]
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	f023 0316 	bic.w	r3, r3, #22
 8000d2a:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	6953      	ldr	r3, [r2, #20]
 8000d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d34:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d38:	b1a3      	cbz	r3, 8000d64 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	f023 0308 	bic.w	r3, r3, #8
 8000d42:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d44:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000d46:	233f      	movs	r3, #63	@ 0x3f
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000d52:	2300      	movs	r3, #0
 8000d54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000d58:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d03f      	beq.n	8000dde <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000d5e:	4620      	mov	r0, r4
 8000d60:	4798      	blx	r3
        return;
 8000d62:	e03c      	b.n	8000dde <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d64:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1e7      	bne.n	8000d3a <HAL_DMA_IRQHandler+0x12a>
 8000d6a:	e7eb      	b.n	8000d44 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8000d6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d6e:	b1a3      	cbz	r3, 8000d9a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8000d70:	4620      	mov	r0, r4
 8000d72:	4798      	blx	r3
 8000d74:	e011      	b.n	8000d9a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000d7c:	d109      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	f022 0210 	bic.w	r2, r2, #16
 8000d84:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8000d92:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d94:	b10b      	cbz	r3, 8000d9a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8000d96:	4620      	mov	r0, r4
 8000d98:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d9c:	b1fb      	cbz	r3, 8000dde <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000da0:	f013 0f01 	tst.w	r3, #1
 8000da4:	d017      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000da6:	2305      	movs	r3, #5
 8000da8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	3301      	adds	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d804      	bhi.n	8000dca <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f013 0f01 	tst.w	r3, #1
 8000dc8:	d1f5      	bne.n	8000db6 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000dd6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000dd8:	b10b      	cbz	r3, 8000dde <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8000dda:	4620      	mov	r0, r4
 8000ddc:	4798      	blx	r3
}
 8000dde:	b003      	add	sp, #12
 8000de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	1b4e81b5 	.word	0x1b4e81b5

08000dec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	f200 80d7 	bhi.w	8000fa2 <HAL_GPIO_Init+0x1b6>
{
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	e065      	b.n	8000ec6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e00:	2403      	movs	r4, #3
 8000e02:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e06:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	68cc      	ldr	r4, [r1, #12]
 8000e0c:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e10:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000e12:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e16:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	684a      	ldr	r2, [r1, #4]
 8000e1c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000e24:	6042      	str	r2, [r0, #4]
 8000e26:	e05c      	b.n	8000ee2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	08dc      	lsrs	r4, r3, #3
 8000e2a:	3408      	adds	r4, #8
 8000e2c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e30:	f003 0507 	and.w	r5, r3, #7
 8000e34:	00ad      	lsls	r5, r5, #2
 8000e36:	f04f 0e0f 	mov.w	lr, #15
 8000e3a:	fa0e fe05 	lsl.w	lr, lr, r5
 8000e3e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e42:	690a      	ldr	r2, [r1, #16]
 8000e44:	40aa      	lsls	r2, r5
 8000e46:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000e4e:	e05c      	b.n	8000f0a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e50:	2204      	movs	r2, #4
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x6a>
 8000e54:	2200      	movs	r2, #0
 8000e56:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e5a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	3402      	adds	r4, #2
 8000e5e:	4d51      	ldr	r5, [pc, #324]	@ (8000fa4 <HAL_GPIO_Init+0x1b8>)
 8000e60:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e64:	4a50      	ldr	r2, [pc, #320]	@ (8000fa8 <HAL_GPIO_Init+0x1bc>)
 8000e66:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	ea6f 020c 	mvn.w	r2, ip
 8000e6c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e70:	684e      	ldr	r6, [r1, #4]
 8000e72:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000e76:	d001      	beq.n	8000e7c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000e78:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000e7c:	4c4a      	ldr	r4, [pc, #296]	@ (8000fa8 <HAL_GPIO_Init+0x1bc>)
 8000e7e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000e80:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e86:	684e      	ldr	r6, [r1, #4]
 8000e88:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000e8c:	d001      	beq.n	8000e92 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000e8e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000e92:	4c45      	ldr	r4, [pc, #276]	@ (8000fa8 <HAL_GPIO_Init+0x1bc>)
 8000e94:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000e96:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9c:	684e      	ldr	r6, [r1, #4]
 8000e9e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000ea2:	d001      	beq.n	8000ea8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000ea4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000ea8:	4c3f      	ldr	r4, [pc, #252]	@ (8000fa8 <HAL_GPIO_Init+0x1bc>)
 8000eaa:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb0:	684d      	ldr	r5, [r1, #4]
 8000eb2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000eb6:	d001      	beq.n	8000ebc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000eb8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000ebc:	4c3a      	ldr	r4, [pc, #232]	@ (8000fa8 <HAL_GPIO_Init+0x1bc>)
 8000ebe:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d86b      	bhi.n	8000f9e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	680c      	ldr	r4, [r1, #0]
 8000ecc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000ed0:	ea32 0404 	bics.w	r4, r2, r4
 8000ed4:	d1f4      	bne.n	8000ec0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	684c      	ldr	r4, [r1, #4]
 8000ed8:	f004 0403 	and.w	r4, r4, #3
 8000edc:	3c01      	subs	r4, #1
 8000ede:	2c01      	cmp	r4, #1
 8000ee0:	d98b      	bls.n	8000dfa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee2:	684a      	ldr	r2, [r1, #4]
 8000ee4:	f002 0203 	and.w	r2, r2, #3
 8000ee8:	2a03      	cmp	r2, #3
 8000eea:	d009      	beq.n	8000f00 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000eec:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	005d      	lsls	r5, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	40aa      	lsls	r2, r5
 8000ef4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	688a      	ldr	r2, [r1, #8]
 8000efa:	40aa      	lsls	r2, r5
 8000efc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000efe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	684a      	ldr	r2, [r1, #4]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	2a02      	cmp	r2, #2
 8000f08:	d08e      	beq.n	8000e28 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000f0a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f16:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	684a      	ldr	r2, [r1, #4]
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f24:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000f26:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	684a      	ldr	r2, [r1, #4]
 8000f2a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000f2e:	d0c7      	beq.n	8000ec0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	2200      	movs	r2, #0
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_GPIO_Init+0x1c0>)
 8000f36:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000f38:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000f3c:	6454      	str	r4, [r2, #68]	@ 0x44
 8000f3e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f40:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f44:	9201      	str	r2, [sp, #4]
 8000f46:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f48:	089c      	lsrs	r4, r3, #2
 8000f4a:	1ca5      	adds	r5, r4, #2
 8000f4c:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <HAL_GPIO_Init+0x1b8>)
 8000f4e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f52:	f003 0e03 	and.w	lr, r3, #3
 8000f56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f60:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <HAL_GPIO_Init+0x1c4>)
 8000f66:	4290      	cmp	r0, r2
 8000f68:	f43f af74 	beq.w	8000e54 <HAL_GPIO_Init+0x68>
 8000f6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f70:	4290      	cmp	r0, r2
 8000f72:	d00e      	beq.n	8000f92 <HAL_GPIO_Init+0x1a6>
 8000f74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d00c      	beq.n	8000f96 <HAL_GPIO_Init+0x1aa>
 8000f7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f80:	4290      	cmp	r0, r2
 8000f82:	d00a      	beq.n	8000f9a <HAL_GPIO_Init+0x1ae>
 8000f84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	f43f af61 	beq.w	8000e50 <HAL_GPIO_Init+0x64>
 8000f8e:	2207      	movs	r2, #7
 8000f90:	e761      	b.n	8000e56 <HAL_GPIO_Init+0x6a>
 8000f92:	2201      	movs	r2, #1
 8000f94:	e75f      	b.n	8000e56 <HAL_GPIO_Init+0x6a>
 8000f96:	2202      	movs	r2, #2
 8000f98:	e75d      	b.n	8000e56 <HAL_GPIO_Init+0x6a>
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	e75b      	b.n	8000e56 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	4770      	bx	lr
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40013c00 	.word	0x40013c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	b10a      	cbz	r2, 8000fba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	6181      	str	r1, [r0, #24]
 8000fb8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fba:	0409      	lsls	r1, r1, #16
 8000fbc:	6181      	str	r1, [r0, #24]
  }
}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	9100      	str	r1, [sp, #0]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_MspInit+0x34>)
 8000fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fce:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fd2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fd6:	9200      	str	r2, [sp, #0]
 8000fd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	9101      	str	r1, [sp, #4]
 8000fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fde:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	b002      	add	sp, #8
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffc:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffe:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001002:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8001006:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800100a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800100c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100e:	429a      	cmp	r2, r3
 8001010:	d854      	bhi.n	80010bc <PCD_WriteEmptyTxFifo+0xc4>
 8001012:	4607      	mov	r7, r0
 8001014:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001016:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001018:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800101c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001020:	69d2      	ldr	r2, [r2, #28]
 8001022:	429a      	cmp	r2, r3
 8001024:	d300      	bcc.n	8001028 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001026:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001028:	f102 0903 	add.w	r9, r2, #3
 800102c:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001030:	e015      	b.n	800105e <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001032:	f106 0903 	add.w	r9, r6, #3
 8001036:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800103a:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800103c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001040:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001044:	6a29      	ldr	r1, [r5, #32]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	b2b3      	uxth	r3, r6
 800104a:	b2e2      	uxtb	r2, r4
 800104c:	4640      	mov	r0, r8
 800104e:	f001 ff30 	bl	8002eb2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001052:	6a2b      	ldr	r3, [r5, #32]
 8001054:	4433      	add	r3, r6
 8001056:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001058:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800105a:	4433      	add	r3, r6
 800105c:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800105e:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800106a:	454b      	cmp	r3, r9
 800106c:	d312      	bcc.n	8001094 <PCD_WriteEmptyTxFifo+0x9c>
 800106e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001072:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001076:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800107a:	429a      	cmp	r2, r3
 800107c:	d20a      	bcs.n	8001094 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800107e:	b14b      	cbz	r3, 8001094 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8001080:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8001082:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001086:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800108a:	69d6      	ldr	r6, [r2, #28]
 800108c:	429e      	cmp	r6, r3
 800108e:	d3d0      	bcc.n	8001032 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001090:	461e      	mov	r6, r3
 8001092:	e7ce      	b.n	8001032 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001094:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001098:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800109c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d80f      	bhi.n	80010c4 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010a4:	f004 040f 	and.w	r4, r4, #15
 80010a8:	2201      	movs	r2, #1
 80010aa:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80010ac:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80010b0:	ea23 0302 	bic.w	r3, r3, r2
 80010b4:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80010b8:	2000      	movs	r0, #0
 80010ba:	e000      	b.n	80010be <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
}
 80010be:	b003      	add	sp, #12
 80010c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	e7fa      	b.n	80010be <PCD_WriteEmptyTxFifo+0xc6>

080010c8 <HAL_PCD_Init>:
{
 80010c8:	b530      	push	{r4, r5, lr}
 80010ca:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d07a      	beq.n	80011c6 <HAL_PCD_Init+0xfe>
 80010d0:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80010d2:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d4:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80010d8:	b1c3      	cbz	r3, 800110c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80010da:	2303      	movs	r3, #3
 80010dc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80010e0:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80010e4:	d017      	beq.n	8001116 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	f001 fc94 	bl	8002a14 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ec:	7c23      	ldrb	r3, [r4, #16]
 80010ee:	f88d 3000 	strb.w	r3, [sp]
 80010f2:	1d23      	adds	r3, r4, #4
 80010f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	f001 fbca 	bl	8002890 <USB_CoreInit>
 80010fc:	b170      	cbz	r0, 800111c <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fe:	2302      	movs	r3, #2
 8001100:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001104:	2501      	movs	r5, #1
}
 8001106:	4628      	mov	r0, r5
 8001108:	b003      	add	sp, #12
 800110a:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800110c:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001110:	f002 fc14 	bl	800393c <HAL_PCD_MspInit>
 8001114:	e7e1      	b.n	80010da <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	71a3      	strb	r3, [r4, #6]
 800111a:	e7e4      	b.n	80010e6 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	6820      	ldr	r0, [r4, #0]
 8001120:	f002 f8dd 	bl	80032de <USB_SetCurrentMode>
 8001124:	4602      	mov	r2, r0
 8001126:	b9b8      	cbnz	r0, 8001158 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	4603      	mov	r3, r0
 800112a:	7920      	ldrb	r0, [r4, #4]
 800112c:	4298      	cmp	r0, r3
 800112e:	d918      	bls.n	8001162 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8001130:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001134:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001138:	2001      	movs	r0, #1
 800113a:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 800113c:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800113e:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001140:	2000      	movs	r0, #0
 8001142:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001144:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001146:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001148:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800114c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001150:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001152:	3301      	adds	r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	e7e8      	b.n	800112a <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001158:	2302      	movs	r3, #2
 800115a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800115e:	2501      	movs	r5, #1
 8001160:	e7d1      	b.n	8001106 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	4290      	cmp	r0, r2
 8001164:	d917      	bls.n	8001196 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8001166:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800116a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800116e:	2100      	movs	r1, #0
 8001170:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001174:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001178:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 800117c:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001180:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001184:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800118c:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	3201      	adds	r2, #1
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	e7e5      	b.n	8001162 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001196:	7c23      	ldrb	r3, [r4, #16]
 8001198:	f88d 3000 	strb.w	r3, [sp]
 800119c:	1d23      	adds	r3, r4, #4
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	6820      	ldr	r0, [r4, #0]
 80011a2:	f001 fc8d 	bl	8002ac0 <USB_DevInit>
 80011a6:	4605      	mov	r5, r0
 80011a8:	b120      	cbz	r0, 80011b4 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80011b0:	2501      	movs	r5, #1
 80011b2:	e7a8      	b.n	8001106 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	f002 f84c 	bl	800325c <USB_DevDisconnect>
  return HAL_OK;
 80011c4:	e79f      	b.n	8001106 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80011c6:	2501      	movs	r5, #1
 80011c8:	e79d      	b.n	8001106 <HAL_PCD_Init+0x3e>

080011ca <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ca:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80011cc:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80011d0:	2a01      	cmp	r2, #1
 80011d2:	d01a      	beq.n	800120a <HAL_PCD_Start+0x40>
{
 80011d4:	b510      	push	{r4, lr}
 80011d6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011d8:	2201      	movs	r2, #1
 80011da:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80011e4:	d002      	beq.n	80011ec <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80011e6:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d009      	beq.n	8001200 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80011ec:	6820      	ldr	r0, [r4, #0]
 80011ee:	f001 fc0b 	bl	8002a08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011f2:	6820      	ldr	r0, [r4, #0]
 80011f4:	f002 f824 	bl	8003240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80011fe:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001202:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
 8001208:	e7f0      	b.n	80011ec <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 800120a:	2002      	movs	r0, #2
}
 800120c:	4770      	bx	lr
	...

08001210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001210:	b570      	push	{r4, r5, r6, lr}
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001216:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001218:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800121a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800121e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001222:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001224:	79a1      	ldrb	r1, [r4, #6]
 8001226:	2901      	cmp	r1, #1
 8001228:	d011      	beq.n	800124e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800122a:	4938      	ldr	r1, [pc, #224]	@ (800130c <PCD_EP_OutXfrComplete_int+0xfc>)
 800122c:	428e      	cmp	r6, r1
 800122e:	d056      	beq.n	80012de <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001230:	b93d      	cbnz	r5, 8001242 <PCD_EP_OutXfrComplete_int+0x32>
 8001232:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001236:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800123a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800123e:	2b00      	cmp	r3, #0
 8001240:	d05e      	beq.n	8001300 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001242:	b2e9      	uxtb	r1, r5
 8001244:	4620      	mov	r0, r4
 8001246:	f002 fbc5 	bl	80039d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800124a:	2000      	movs	r0, #0
 800124c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800124e:	f012 0f08 	tst.w	r2, #8
 8001252:	d009      	beq.n	8001268 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001254:	492e      	ldr	r1, [pc, #184]	@ (8001310 <PCD_EP_OutXfrComplete_int+0x100>)
 8001256:	428e      	cmp	r6, r1
 8001258:	d9f7      	bls.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
 800125a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800125e:	d0f4      	beq.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001260:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	e7f0      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001268:	f012 0f20 	tst.w	r2, #32
 800126c:	d002      	beq.n	8001274 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800126e:	2220      	movs	r2, #32
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e7ea      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001274:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001278:	d1e7      	bne.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800127a:	4925      	ldr	r1, [pc, #148]	@ (8001310 <PCD_EP_OutXfrComplete_int+0x100>)
 800127c:	428e      	cmp	r6, r1
 800127e:	d906      	bls.n	800128e <PCD_EP_OutXfrComplete_int+0x7e>
 8001280:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001284:	d003      	beq.n	800128e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001286:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e7dd      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800128e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001292:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001296:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012a0:	1acb      	subs	r3, r1, r3
 80012a2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80012a6:	b97d      	cbnz	r5, 80012c8 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80012a8:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80012ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80012b0:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80012b4:	b16a      	cbz	r2, 80012d2 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80012b6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80012ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80012be:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80012c2:	4419      	add	r1, r3
 80012c4:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80012c8:	b2e9      	uxtb	r1, r5
 80012ca:	4620      	mov	r0, r4
 80012cc:	f002 fb82 	bl	80039d4 <HAL_PCD_DataOutStageCallback>
 80012d0:	e7bb      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80012d2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80012d6:	2101      	movs	r1, #1
 80012d8:	f002 f840 	bl	800335c <USB_EP0_OutStart>
 80012dc:	e7f4      	b.n	80012c8 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80012de:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80012e2:	d003      	beq.n	80012ec <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80012e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e7ae      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ec:	f012 0f20 	tst.w	r2, #32
 80012f0:	d001      	beq.n	80012f6 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012f2:	2220      	movs	r2, #32
 80012f4:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80012f6:	b2e9      	uxtb	r1, r5
 80012f8:	4620      	mov	r0, r4
 80012fa:	f002 fb6b 	bl	80039d4 <HAL_PCD_DataOutStageCallback>
 80012fe:	e7a4      	b.n	800124a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001300:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001304:	2100      	movs	r1, #0
 8001306:	f002 f829 	bl	800335c <USB_EP0_OutStart>
 800130a:	e79a      	b.n	8001242 <PCD_EP_OutXfrComplete_int+0x32>
 800130c:	4f54310a 	.word	0x4f54310a
 8001310:	4f54300a 	.word	0x4f54300a

08001314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001318:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800131a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800131c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001320:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001324:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001326:	4295      	cmp	r5, r2
 8001328:	d907      	bls.n	800133a <PCD_EP_OutSetupPacket_int+0x26>
 800132a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800132e:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001332:	d002      	beq.n	800133a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001334:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001338:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800133a:	4620      	mov	r0, r4
 800133c:	f002 fb42 	bl	80039c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001342:	429d      	cmp	r5, r3
 8001344:	d902      	bls.n	800134c <PCD_EP_OutSetupPacket_int+0x38>
 8001346:	79a3      	ldrb	r3, [r4, #6]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d001      	beq.n	8001350 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800134c:	2000      	movs	r0, #0
 800134e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001350:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001354:	2101      	movs	r1, #1
 8001356:	6820      	ldr	r0, [r4, #0]
 8001358:	f002 f800 	bl	800335c <USB_EP0_OutStart>
 800135c:	e7f6      	b.n	800134c <PCD_EP_OutSetupPacket_int+0x38>
 800135e:	bf00      	nop
 8001360:	4f54300a 	.word	0x4f54300a

08001364 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001364:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001368:	2b01      	cmp	r3, #1
 800136a:	d00c      	beq.n	8001386 <HAL_PCD_SetAddress+0x22>
{
 800136c:	b510      	push	{r4, lr}
 800136e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001370:	2301      	movs	r3, #1
 8001372:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001376:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	f001 ff51 	bl	8003220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800137e:	2000      	movs	r0, #0
 8001380:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001384:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001386:	2002      	movs	r0, #2
}
 8001388:	4770      	bx	lr

0800138a <HAL_PCD_EP_Open>:
{
 800138a:	b538      	push	{r3, r4, r5, lr}
 800138c:	4605      	mov	r5, r0
 800138e:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001390:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001394:	d12b      	bne.n	80013ee <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001396:	f001 0e0f 	and.w	lr, r1, #15
 800139a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800139e:	00a4      	lsls	r4, r4, #2
 80013a0:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80013a4:	4404      	add	r4, r0
 80013a6:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80013a8:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80013ac:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80013b0:	2000      	movs	r0, #0
 80013b2:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b6:	f00c 0c0f 	and.w	ip, ip, #15
 80013ba:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80013be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80013c2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80013c4:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80013c6:	784a      	ldrb	r2, [r1, #1]
 80013c8:	b10a      	cbz	r2, 80013ce <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80013ca:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d01c      	beq.n	800140c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80013d2:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d01b      	beq.n	8001412 <HAL_PCD_EP_Open+0x88>
 80013da:	2301      	movs	r3, #1
 80013dc:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013e0:	6828      	ldr	r0, [r5, #0]
 80013e2:	f001 fc4a 	bl	8002c7a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80013ec:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	f001 000f 	and.w	r0, r1, #15
 80013f2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80013f6:	0089      	lsls	r1, r1, #2
 80013f8:	3110      	adds	r1, #16
 80013fa:	4429      	add	r1, r5
 80013fc:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80013fe:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001402:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001406:	2401      	movs	r4, #1
 8001408:	7544      	strb	r4, [r0, #21]
 800140a:	e7d4      	b.n	80013b6 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	714b      	strb	r3, [r1, #5]
 8001410:	e7df      	b.n	80013d2 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8001412:	2002      	movs	r0, #2
 8001414:	e7ea      	b.n	80013ec <HAL_PCD_EP_Open+0x62>

08001416 <HAL_PCD_EP_Close>:
{
 8001416:	b510      	push	{r4, lr}
 8001418:	4604      	mov	r4, r0
 800141a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800141c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001420:	d120      	bne.n	8001464 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001422:	f001 000f 	and.w	r0, r1, #15
 8001426:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001430:	4423      	add	r3, r4
 8001432:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001434:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001438:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800143c:	2300      	movs	r3, #0
 800143e:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001442:	f002 020f 	and.w	r2, r2, #15
 8001446:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001448:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800144c:	2b01      	cmp	r3, #1
 800144e:	d018      	beq.n	8001482 <HAL_PCD_EP_Close+0x6c>
 8001450:	2301      	movs	r3, #1
 8001452:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	f001 fc5c 	bl	8002d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800145c:	2000      	movs	r0, #0
 800145e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001462:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001464:	f001 000f 	and.w	r0, r1, #15
 8001468:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	3310      	adds	r3, #16
 8001470:	4423      	add	r3, r4
 8001472:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001474:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001478:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800147c:	2301      	movs	r3, #1
 800147e:	7543      	strb	r3, [r0, #21]
 8001480:	e7df      	b.n	8001442 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001482:	2002      	movs	r0, #2
 8001484:	e7ed      	b.n	8001462 <HAL_PCD_EP_Close+0x4c>

08001486 <HAL_PCD_EP_Receive>:
{
 8001486:	b510      	push	{r4, lr}
 8001488:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800148a:	f001 0c0f 	and.w	ip, r1, #15
 800148e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001492:	0089      	lsls	r1, r1, #2
 8001494:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001498:	4401      	add	r1, r0
 800149a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800149c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80014a0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80014a4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80014a8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80014b2:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80014b6:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80014ba:	7982      	ldrb	r2, [r0, #6]
 80014bc:	2a01      	cmp	r2, #1
 80014be:	d004      	beq.n	80014ca <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80014c0:	6800      	ldr	r0, [r0, #0]
 80014c2:	f001 fd0d 	bl	8002ee0 <USB_EPStartXfer>
}
 80014c6:	2000      	movs	r0, #0
 80014c8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80014ca:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80014ce:	e7f7      	b.n	80014c0 <HAL_PCD_EP_Receive+0x3a>

080014d0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014d0:	f001 010f 	and.w	r1, r1, #15
 80014d4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80014d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80014dc:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80014e0:	4770      	bx	lr

080014e2 <HAL_PCD_EP_Transmit>:
{
 80014e2:	b510      	push	{r4, lr}
 80014e4:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e6:	f001 0c0f 	and.w	ip, r1, #15
 80014ea:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80014ee:	0089      	lsls	r1, r1, #2
 80014f0:	3110      	adds	r1, #16
 80014f2:	4401      	add	r1, r0
 80014f4:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80014f6:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80014fa:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80014fe:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8001502:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800150c:	2301      	movs	r3, #1
 800150e:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001512:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8001516:	7982      	ldrb	r2, [r0, #6]
 8001518:	429a      	cmp	r2, r3
 800151a:	d004      	beq.n	8001526 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f001 fcdf 	bl	8002ee0 <USB_EPStartXfer>
}
 8001522:	2000      	movs	r0, #0
 8001524:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001526:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800152a:	e7f7      	b.n	800151c <HAL_PCD_EP_Transmit+0x3a>

0800152c <HAL_PCD_EP_SetStall>:
{
 800152c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800152e:	f001 050f 	and.w	r5, r1, #15
 8001532:	7902      	ldrb	r2, [r0, #4]
 8001534:	42aa      	cmp	r2, r5
 8001536:	d338      	bcc.n	80015aa <HAL_PCD_EP_SetStall+0x7e>
 8001538:	4604      	mov	r4, r0
 800153a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800153c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001540:	d11f      	bne.n	8001582 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001542:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001546:	0089      	lsls	r1, r1, #2
 8001548:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800154c:	4401      	add	r1, r0
 800154e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001550:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001554:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800155e:	2301      	movs	r3, #1
 8001560:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001562:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001564:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001568:	2b01      	cmp	r3, #1
 800156a:	d020      	beq.n	80015ae <HAL_PCD_EP_SetStall+0x82>
 800156c:	2301      	movs	r3, #1
 800156e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	f001 fdf9 	bl	800316a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001578:	b185      	cbz	r5, 800159c <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800157a:	2000      	movs	r0, #0
 800157c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001580:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001582:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001586:	0089      	lsls	r1, r1, #2
 8001588:	3110      	adds	r1, #16
 800158a:	4401      	add	r1, r0
 800158c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800158e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001592:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001596:	2201      	movs	r2, #1
 8001598:	755a      	strb	r2, [r3, #21]
 800159a:	e7e0      	b.n	800155e <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800159c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80015a0:	79a1      	ldrb	r1, [r4, #6]
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	f001 feda 	bl	800335c <USB_EP0_OutStart>
 80015a8:	e7e7      	b.n	800157a <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7e8      	b.n	8001580 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80015ae:	2002      	movs	r0, #2
 80015b0:	e7e6      	b.n	8001580 <HAL_PCD_EP_SetStall+0x54>

080015b2 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015b2:	f001 030f 	and.w	r3, r1, #15
 80015b6:	7902      	ldrb	r2, [r0, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d330      	bcc.n	800161e <HAL_PCD_EP_ClrStall+0x6c>
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80015c0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80015c4:	d11e      	bne.n	8001604 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80015ca:	0089      	lsls	r1, r1, #2
 80015cc:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80015d0:	4401      	add	r1, r0
 80015d2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80015d4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80015d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80015dc:	2000      	movs	r0, #0
 80015de:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80015e2:	2200      	movs	r2, #0
 80015e4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80015e8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d018      	beq.n	8001622 <HAL_PCD_EP_ClrStall+0x70>
 80015f0:	2301      	movs	r3, #1
 80015f2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f001 fde4 	bl	80031c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001602:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001604:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001608:	0089      	lsls	r1, r1, #2
 800160a:	3110      	adds	r1, #16
 800160c:	4401      	add	r1, r0
 800160e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001610:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001614:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001618:	2001      	movs	r0, #1
 800161a:	7550      	strb	r0, [r2, #21]
 800161c:	e7e1      	b.n	80015e2 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
}
 8001620:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001622:	2002      	movs	r0, #2
 8001624:	e7ed      	b.n	8001602 <HAL_PCD_EP_ClrStall+0x50>

08001626 <HAL_PCD_EP_Abort>:
{
 8001626:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001628:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800162c:	d10c      	bne.n	8001648 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800162e:	f001 010f 	and.w	r1, r1, #15
 8001632:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001636:	0089      	lsls	r1, r1, #2
 8001638:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800163c:	4401      	add	r1, r0
 800163e:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001640:	6800      	ldr	r0, [r0, #0]
 8001642:	f001 fbd7 	bl	8002df4 <USB_EPStopXfer>
}
 8001646:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001648:	f001 010f 	and.w	r1, r1, #15
 800164c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001650:	0089      	lsls	r1, r1, #2
 8001652:	3110      	adds	r1, #16
 8001654:	4401      	add	r1, r0
 8001656:	3104      	adds	r1, #4
 8001658:	e7f2      	b.n	8001640 <HAL_PCD_EP_Abort+0x1a>

0800165a <HAL_PCD_IRQHandler>:
{
 800165a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001662:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001664:	4628      	mov	r0, r5
 8001666:	f001 fe36 	bl	80032d6 <USB_GetMode>
 800166a:	b110      	cbz	r0, 8001672 <HAL_PCD_IRQHandler+0x18>
}
 800166c:	b003      	add	sp, #12
 800166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001672:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	f001 fdff 	bl	8003278 <USB_ReadInterrupts>
 800167a:	2800      	cmp	r0, #0
 800167c:	d0f6      	beq.n	800166c <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800167e:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001688:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800168c:	6820      	ldr	r0, [r4, #0]
 800168e:	f001 fdf3 	bl	8003278 <USB_ReadInterrupts>
 8001692:	f010 0f02 	tst.w	r0, #2
 8001696:	d004      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	6953      	ldr	r3, [r2, #20]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	f001 fde8 	bl	8003278 <USB_ReadInterrupts>
 80016a8:	f010 0f10 	tst.w	r0, #16
 80016ac:	d015      	beq.n	80016da <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6993      	ldr	r3, [r2, #24]
 80016b2:	f023 0310 	bic.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80016b8:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016bc:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016c0:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80016c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016c8:	d04c      	beq.n	8001764 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80016ce:	d06f      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	6993      	ldr	r3, [r2, #24]
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f001 fdcc 	bl	8003278 <USB_ReadInterrupts>
 80016e0:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80016e4:	d176      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016e6:	6820      	ldr	r0, [r4, #0]
 80016e8:	f001 fdc6 	bl	8003278 <USB_ReadInterrupts>
 80016ec:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80016f0:	f040 80e0 	bne.w	80018b4 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	f001 fdbf 	bl	8003278 <USB_ReadInterrupts>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	f2c0 8161 	blt.w	80019c2 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	f001 fdb9 	bl	8003278 <USB_ReadInterrupts>
 8001706:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800170a:	d009      	beq.n	8001720 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f013 0f01 	tst.w	r3, #1
 8001712:	f040 816e 	bne.w	80019f2 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	6953      	ldr	r3, [r2, #20]
 800171a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	f001 fda9 	bl	8003278 <USB_ReadInterrupts>
 8001726:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800172a:	f040 8166 	bne.w	80019fa <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	f001 fda2 	bl	8003278 <USB_ReadInterrupts>
 8001734:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001738:	f040 81b3 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	f001 fd9b 	bl	8003278 <USB_ReadInterrupts>
 8001742:	f010 0f08 	tst.w	r0, #8
 8001746:	f040 81c4 	bne.w	8001ad2 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800174a:	6820      	ldr	r0, [r4, #0]
 800174c:	f001 fd94 	bl	8003278 <USB_ReadInterrupts>
 8001750:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001754:	f000 81d7 	beq.w	8001b06 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001758:	69ab      	ldr	r3, [r5, #24]
 800175a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800175e:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001760:	2601      	movs	r6, #1
 8001762:	e1c0      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001764:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001768:	ea18 0f03 	tst.w	r8, r3
 800176c:	d0b0      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800176e:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800177c:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001780:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001784:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001788:	4628      	mov	r0, r5
 800178a:	f001 fccb 	bl	8003124 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800178e:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001792:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001796:	4453      	add	r3, sl
 8001798:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800179c:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80017a0:	9a01      	ldr	r2, [sp, #4]
 80017a2:	444a      	add	r2, r9
 80017a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017a8:	4453      	add	r3, sl
 80017aa:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80017ae:	e78f      	b.n	80016d0 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017b0:	2208      	movs	r2, #8
 80017b2:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80017b6:	4628      	mov	r0, r5
 80017b8:	f001 fcb4 	bl	8003124 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017bc:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80017c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017c4:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80017c8:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80017cc:	4442      	add	r2, r8
 80017ce:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80017d2:	e77d      	b.n	80016d0 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	f001 fd53 	bl	8003280 <USB_ReadDevAllOutEpInterrupt>
 80017da:	4680      	mov	r8, r0
      epnum = 0U;
 80017dc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80017de:	e035      	b.n	800184c <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017e0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80017e4:	2201      	movs	r2, #1
 80017e6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017ea:	4649      	mov	r1, r9
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7ff fd0f 	bl	8001210 <PCD_EP_OutXfrComplete_int>
 80017f2:	e03c      	b.n	800186e <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017f4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80017f8:	2208      	movs	r2, #8
 80017fa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017fe:	4649      	mov	r1, r9
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff fd87 	bl	8001314 <PCD_EP_OutSetupPacket_int>
 8001806:	e035      	b.n	8001874 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8001808:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800180c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001810:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001814:	2b01      	cmp	r3, #1
 8001816:	d041      	beq.n	800189c <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001818:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800181c:	2202      	movs	r2, #2
 800181e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001822:	f01a 0f20 	tst.w	sl, #32
 8001826:	d004      	beq.n	8001832 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001828:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800182c:	2220      	movs	r2, #32
 800182e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001832:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001836:	d005      	beq.n	8001844 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001838:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800183c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001840:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8001844:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001848:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800184c:	f1b8 0f00 	cmp.w	r8, #0
 8001850:	f43f af49 	beq.w	80016e6 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8001854:	f018 0f01 	tst.w	r8, #1
 8001858:	d0f4      	beq.n	8001844 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800185a:	fa5f fb89 	uxtb.w	fp, r9
 800185e:	4659      	mov	r1, fp
 8001860:	6820      	ldr	r0, [r4, #0]
 8001862:	f001 fd1d 	bl	80032a0 <USB_ReadDevOutEPInterrupt>
 8001866:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001868:	f010 0f01 	tst.w	r0, #1
 800186c:	d1b8      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800186e:	f01a 0f08 	tst.w	sl, #8
 8001872:	d1bf      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001874:	f01a 0f10 	tst.w	sl, #16
 8001878:	d004      	beq.n	8001884 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800187a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800187e:	2210      	movs	r2, #16
 8001880:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001884:	f01a 0f02 	tst.w	sl, #2
 8001888:	d0cb      	beq.n	8001822 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800188a:	696b      	ldr	r3, [r5, #20]
 800188c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001890:	d0ba      	beq.n	8001808 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	e7b5      	b.n	8001808 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 800189c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80018a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018aa:	4659      	mov	r1, fp
 80018ac:	4620      	mov	r0, r4
 80018ae:	f002 f8df 	bl	8003a70 <HAL_PCD_ISOOUTIncompleteCallback>
 80018b2:	e7b1      	b.n	8001818 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	f001 fceb 	bl	8003290 <USB_ReadDevAllInEpInterrupt>
 80018ba:	4680      	mov	r8, r0
      epnum = 0U;
 80018bc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80018be:	e025      	b.n	800190c <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c0:	4659      	mov	r1, fp
 80018c2:	4620      	mov	r0, r4
 80018c4:	f002 f892 	bl	80039ec <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018c8:	f01a 0f08 	tst.w	sl, #8
 80018cc:	d004      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018ce:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80018d2:	2208      	movs	r2, #8
 80018d4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018d8:	f01a 0f10 	tst.w	sl, #16
 80018dc:	d004      	beq.n	80018e8 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018de:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80018e2:	2210      	movs	r2, #16
 80018e4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018e8:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80018ec:	d004      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018ee:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80018f2:	2240      	movs	r2, #64	@ 0x40
 80018f4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018f8:	f01a 0f02 	tst.w	sl, #2
 80018fc:	d140      	bne.n	8001980 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018fe:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001902:	d159      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8001904:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001908:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800190c:	f1b8 0f00 	cmp.w	r8, #0
 8001910:	f43f aef0 	beq.w	80016f4 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001914:	f018 0f01 	tst.w	r8, #1
 8001918:	d0f4      	beq.n	8001904 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800191a:	fa5f fb89 	uxtb.w	fp, r9
 800191e:	4659      	mov	r1, fp
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	f001 fcc6 	bl	80032b2 <USB_ReadDevInEPInterrupt>
 8001926:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001928:	f010 0f01 	tst.w	r0, #1
 800192c:	d0cc      	beq.n	80018c8 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800192e:	f009 020f 	and.w	r2, r9, #15
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193a:	ea23 0302 	bic.w	r3, r3, r2
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001940:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001944:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001948:	79a3      	ldrb	r3, [r4, #6]
 800194a:	428b      	cmp	r3, r1
 800194c:	d1b8      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800194e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001952:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	69d9      	ldr	r1, [r3, #28]
 800195a:	440a      	add	r2, r1
 800195c:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800195e:	f1b9 0f00 	cmp.w	r9, #0
 8001962:	d1ad      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x266>
 8001964:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1a6      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001972:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001976:	2101      	movs	r1, #1
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	f001 fcef 	bl	800335c <USB_EP0_OutStart>
 800197e:	e79f      	b.n	80018c0 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001980:	4649      	mov	r1, r9
 8001982:	4628      	mov	r0, r5
 8001984:	f001 f84c 	bl	8002a20 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001988:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800198c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001990:	7ddb      	ldrb	r3, [r3, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001996:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800199a:	2202      	movs	r2, #2
 800199c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80019a0:	e7ad      	b.n	80018fe <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 80019a2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80019a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80019aa:	2200      	movs	r2, #0
 80019ac:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ae:	4659      	mov	r1, fp
 80019b0:	4620      	mov	r0, r4
 80019b2:	f002 f863 	bl	8003a7c <HAL_PCD_ISOINIncompleteCallback>
 80019b6:	e7ee      	b.n	8001996 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019b8:	4649      	mov	r1, r9
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fb1c 	bl	8000ff8 <PCD_WriteEmptyTxFifo>
 80019c0:	e7a0      	b.n	8001904 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80019ca:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d008      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 80019d2:	4620      	mov	r0, r4
 80019d4:	f002 f846 	bl	8003a64 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	6953      	ldr	r3, [r2, #20]
 80019dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	e68d      	b.n	8001700 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 80019e4:	2100      	movs	r1, #0
 80019e6:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 f93e 	bl	8001c6c <HAL_PCDEx_LPM_Callback>
 80019f0:	e7f2      	b.n	80019d8 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 80019f2:	4620      	mov	r0, r4
 80019f4:	f002 f81e 	bl	8003a34 <HAL_PCD_SuspendCallback>
 80019f8:	e68d      	b.n	8001716 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a02:	2110      	movs	r1, #16
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	f001 f80b 	bl	8002a20 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	e01a      	b.n	8001a42 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a0c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001a10:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001a14:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a18:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001a1c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001a20:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a24:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a28:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001a2c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001a30:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a34:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001a38:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001a3c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	3601      	adds	r6, #1
 8001a42:	7923      	ldrb	r3, [r4, #4]
 8001a44:	42b3      	cmp	r3, r6
 8001a46:	d8e1      	bhi.n	8001a0c <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a4e:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a50:	7be3      	ldrb	r3, [r4, #15]
 8001a52:	b1db      	cbz	r3, 8001a8c <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a58:	f043 030b 	orr.w	r3, r3, #11
 8001a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a62:	f043 030b 	orr.w	r3, r3, #11
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a68:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001a6c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a70:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a74:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001a78:	79a1      	ldrb	r1, [r4, #6]
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f001 fc6e 	bl	800335c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	6953      	ldr	r3, [r2, #20]
 8001a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	e650      	b.n	800172e <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a92:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a96:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f043 030b 	orr.w	r3, r3, #11
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	e7e2      	b.n	8001a68 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aa2:	6820      	ldr	r0, [r4, #0]
 8001aa4:	f001 fc4c 	bl	8003340 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	f001 f8d5 	bl	8002c58 <USB_GetDevSpeed>
 8001aae:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ab0:	6826      	ldr	r6, [r4, #0]
 8001ab2:	f000 fbe3 	bl	800227c <HAL_RCC_GetHCLKFreq>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	79e2      	ldrb	r2, [r4, #7]
 8001aba:	4630      	mov	r0, r6
 8001abc:	f000 ff32 	bl	8002924 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f001 ffa4 	bl	8003a0e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6953      	ldr	r3, [r2, #20]
 8001aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ace:	6153      	str	r3, [r2, #20]
 8001ad0:	e634      	b.n	800173c <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f001 ff95 	bl	8003a02 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6953      	ldr	r3, [r2, #20]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	6153      	str	r3, [r2, #20]
 8001ae2:	e632      	b.n	800174a <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae4:	3601      	adds	r6, #1
 8001ae6:	7923      	ldrb	r3, [r4, #4]
 8001ae8:	42b3      	cmp	r3, r6
 8001aea:	d90c      	bls.n	8001b06 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aec:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001af0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001af4:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1f3      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001afc:	b2f1      	uxtb	r1, r6
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fd91 	bl	8001626 <HAL_PCD_EP_Abort>
 8001b04:	e7ee      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b06:	6820      	ldr	r0, [r4, #0]
 8001b08:	f001 fbb6 	bl	8003278 <USB_ReadInterrupts>
 8001b0c:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001b10:	d125      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f001 fbb0 	bl	8003278 <USB_ReadInterrupts>
 8001b18:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001b1c:	d058      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x576>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e026      	b.n	8001b70 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b22:	3601      	adds	r6, #1
 8001b24:	7923      	ldrb	r3, [r4, #4]
 8001b26:	42b3      	cmp	r3, r6
 8001b28:	d91b      	bls.n	8001b62 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b2a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001b2e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b32:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001b36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x4c8>
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	daee      	bge.n	8001b22 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b44:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b50:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8001b54:	b2c9      	uxtb	r1, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fd65 	bl	8001626 <HAL_PCD_EP_Abort>
 8001b5c:	e7e1      	b.n	8001b22 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5e:	2601      	movs	r6, #1
 8001b60:	e7e0      	b.n	8001b24 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	6953      	ldr	r3, [r2, #20]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6a:	6153      	str	r3, [r2, #20]
 8001b6c:	e7d1      	b.n	8001b12 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6e:	3301      	adds	r3, #1
 8001b70:	7922      	ldrb	r2, [r4, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d927      	bls.n	8001bc6 <HAL_PCD_IRQHandler+0x56c>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b76:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001b7a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b7e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001b82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001b86:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x514>
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	daed      	bge.n	8001b6e <HAL_PCD_IRQHandler+0x514>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b92:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8001b96:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b9a:	f012 0f01 	tst.w	r2, #1
 8001b9e:	d1e6      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ba0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001ba4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001ba8:	2101      	movs	r1, #1
 8001baa:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bae:	69aa      	ldr	r2, [r5, #24]
 8001bb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bb4:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bb6:	696a      	ldr	r2, [r5, #20]
 8001bb8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001bbc:	d1d7      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc4:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	6953      	ldr	r3, [r2, #20]
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bce:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	f001 fb51 	bl	8003278 <USB_ReadInterrupts>
 8001bd6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8001bda:	d110      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x5a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	f001 fb4b 	bl	8003278 <USB_ReadInterrupts>
 8001be2:	f010 0f04 	tst.w	r0, #4
 8001be6:	f43f ad41 	beq.w	800166c <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bee:	f015 0f04 	tst.w	r5, #4
 8001bf2:	d10d      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x5b6>
      hpcd->Instance->GOTGINT |= RegVal;
 8001bf4:	6822      	ldr	r2, [r4, #0]
 8001bf6:	6853      	ldr	r3, [r2, #4]
 8001bf8:	432b      	orrs	r3, r5
 8001bfa:	6053      	str	r3, [r2, #4]
 8001bfc:	e536      	b.n	800166c <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f001 ff42 	bl	8003a88 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6953      	ldr	r3, [r2, #20]
 8001c08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	e7e5      	b.n	8001bdc <HAL_PCD_IRQHandler+0x582>
        HAL_PCD_DisconnectCallback(hpcd);
 8001c10:	4620      	mov	r0, r4
 8001c12:	f001 ff3f 	bl	8003a94 <HAL_PCD_DisconnectCallback>
 8001c16:	e7ed      	b.n	8001bf4 <HAL_PCD_IRQHandler+0x59a>

08001c18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c18:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c1a:	6804      	ldr	r4, [r0, #0]
 8001c1c:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001c1e:	b931      	cbnz	r1, 8001c2e <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001c20:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001c24:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001c26:	2000      	movs	r0, #0
 8001c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001c30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c32:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	e008      	b.n	8001c4c <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c3a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001c3e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001c42:	6849      	ldr	r1, [r1, #4]
 8001c44:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d3f2      	bcc.n	8001c3a <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001c54:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001c58:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8001c5c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001c60:	6060      	str	r0, [r4, #4]
 8001c62:	e7e0      	b.n	8001c26 <HAL_PCDEx_SetTxFiFo+0xe>

08001c64 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8001c68:	2000      	movs	r0, #0
 8001c6a:	4770      	bx	lr

08001c6c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f000 81e0 	beq.w	8002036 <HAL_RCC_OscConfig+0x3c6>
{
 8001c76:	b570      	push	{r4, r5, r6, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7c:	6803      	ldr	r3, [r0, #0]
 8001c7e:	f013 0f01 	tst.w	r3, #1
 8001c82:	d03b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c84:	4b9f      	ldr	r3, [pc, #636]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d02c      	beq.n	8001cea <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c90:	4b9c      	ldr	r3, [pc, #624]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d021      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca2:	d04f      	beq.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca8:	d052      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe0>
 8001caa:	4b96      	ldr	r3, [pc, #600]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d050      	beq.n	8001d64 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fdf9 	bl	80008b8 <HAL_GetTick>
 8001cc6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001cd0:	d114      	bne.n	8001cfc <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd2:	f7fe fdf1 	bl	80008b8 <HAL_GetTick>
 8001cd6:	1b40      	subs	r0, r0, r5
 8001cd8:	2864      	cmp	r0, #100	@ 0x64
 8001cda:	d9f5      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
 8001cde:	e1b1      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce0:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001ce8:	d0d8      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cea:	4b86      	ldr	r3, [pc, #536]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001cf2:	d003      	beq.n	8001cfc <HAL_RCC_OscConfig+0x8c>
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 819f 	beq.w	800203a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	f013 0f02 	tst.w	r3, #2
 8001d02:	d054      	beq.n	8001dae <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d04:	4b7f      	ldr	r3, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f013 0f0c 	tst.w	r3, #12
 8001d0c:	d03e      	beq.n	8001d8c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d033      	beq.n	8001d82 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d1a:	68e3      	ldr	r3, [r4, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d068      	beq.n	8001df2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b79      	ldr	r3, [pc, #484]	@ (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7fe fdc7 	bl	80008b8 <HAL_GetTick>
 8001d2a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b75      	ldr	r3, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f013 0f02 	tst.w	r3, #2
 8001d34:	d154      	bne.n	8001de0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7fe fdbf 	bl	80008b8 <HAL_GetTick>
 8001d3a:	1b40      	subs	r0, r0, r5
 8001d3c:	2802      	cmp	r0, #2
 8001d3e:	d9f5      	bls.n	8001d2c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001d40:	2003      	movs	r0, #3
 8001d42:	e17f      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	4a6f      	ldr	r2, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e7b5      	b.n	8001cbc <HAL_RCC_OscConfig+0x4c>
 8001d50:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e7ab      	b.n	8001cbc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001d64:	f7fe fda8 	bl	80008b8 <HAL_GetTick>
 8001d68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d72:	d0c3      	beq.n	8001cfc <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fda0 	bl	80008b8 <HAL_GetTick>
 8001d78:	1b40      	subs	r0, r0, r5
 8001d7a:	2864      	cmp	r0, #100	@ 0x64
 8001d7c:	d9f5      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001d7e:	2003      	movs	r0, #3
 8001d80:	e160      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b60      	ldr	r3, [pc, #384]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d8a:	d1c6      	bne.n	8001d1a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f013 0f02 	tst.w	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_OscConfig+0x12e>
 8001d96:	68e3      	ldr	r3, [r4, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f040 8150 	bne.w	800203e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4a59      	ldr	r2, [pc, #356]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001da6:	6921      	ldr	r1, [r4, #16]
 8001da8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f013 0f08 	tst.w	r3, #8
 8001db4:	d042      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001db6:	6963      	ldr	r3, [r4, #20]
 8001db8:	b36b      	cbz	r3, 8001e16 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7fe fd79 	bl	80008b8 <HAL_GetTick>
 8001dc6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dcc:	f013 0f02 	tst.w	r3, #2
 8001dd0:	d134      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7fe fd71 	bl	80008b8 <HAL_GetTick>
 8001dd6:	1b40      	subs	r0, r0, r5
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f5      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001ddc:	2003      	movs	r0, #3
 8001dde:	e131      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4a48      	ldr	r2, [pc, #288]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001de8:	6921      	ldr	r1, [r4, #16]
 8001dea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e7dd      	b.n	8001dae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b45      	ldr	r3, [pc, #276]	@ (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7fe fd5e 	bl	80008b8 <HAL_GetTick>
 8001dfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f013 0f02 	tst.w	r3, #2
 8001e06:	d0d2      	beq.n	8001dae <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7fe fd56 	bl	80008b8 <HAL_GetTick>
 8001e0c:	1b40      	subs	r0, r0, r5
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9f5      	bls.n	8001dfe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e116      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe fd4b 	bl	80008b8 <HAL_GetTick>
 8001e22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e28:	f013 0f02 	tst.w	r3, #2
 8001e2c:	d006      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7fe fd43 	bl	80008b8 <HAL_GetTick>
 8001e32:	1b40      	subs	r0, r0, r5
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d9f5      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001e38:	2003      	movs	r0, #3
 8001e3a:	e103      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f013 0f04 	tst.w	r3, #4
 8001e42:	d077      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e44:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001e4c:	d133      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e56:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e66:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_RCC_OscConfig+0x29c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e70:	d023      	beq.n	8001eba <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e72:	68a3      	ldr	r3, [r4, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d034      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x272>
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d038      	beq.n	8001eee <HAL_RCC_OscConfig+0x27e>
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8e:	68a3      	ldr	r3, [r4, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d03d      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe fd10 	bl	80008b8 <HAL_GetTick>
 8001e98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	f013 0f02 	tst.w	r3, #2
 8001ea2:	d146      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fd08 	bl	80008b8 <HAL_GetTick>
 8001ea8:	1b80      	subs	r0, r0, r6
 8001eaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001eae:	4298      	cmp	r0, r3
 8001eb0:	d9f3      	bls.n	8001e9a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	e0c6      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2500      	movs	r5, #0
 8001eb8:	e7d6      	b.n	8001e68 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_RCC_OscConfig+0x29c>)
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fcf8 	bl	80008b8 <HAL_GetTick>
 8001ec8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_RCC_OscConfig+0x29c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ed2:	d1ce      	bne.n	8001e72 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7fe fcf0 	bl	80008b8 <HAL_GetTick>
 8001ed8:	1b80      	subs	r0, r0, r6
 8001eda:	2802      	cmp	r0, #2
 8001edc:	d9f5      	bls.n	8001eca <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	e0b0      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	4a08      	ldr	r2, [pc, #32]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001ee4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eec:	e7cf      	b.n	8001e8e <HAL_RCC_OscConfig+0x21e>
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_OscConfig+0x294>)
 8001ef0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ef2:	f042 0204 	orr.w	r2, r2, #4
 8001ef6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ef8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f00:	e7c5      	b.n	8001e8e <HAL_RCC_OscConfig+0x21e>
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470000 	.word	0x42470000
 8001f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe fcd2 	bl	80008b8 <HAL_GetTick>
 8001f14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	f013 0f02 	tst.w	r3, #2
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe fcca 	bl	80008b8 <HAL_GetTick>
 8001f24:	1b80      	subs	r0, r0, r6
 8001f26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d9f3      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001f2e:	2003      	movs	r0, #3
 8001f30:	e088      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f32:	b9ed      	cbnz	r5, 8001f70 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f34:	69a3      	ldr	r3, [r4, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8083 	beq.w	8002042 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3c:	4a48      	ldr	r2, [pc, #288]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001f3e:	6892      	ldr	r2, [r2, #8]
 8001f40:	f002 020c 	and.w	r2, r2, #12
 8001f44:	2a08      	cmp	r2, #8
 8001f46:	d051      	beq.n	8001fec <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d017      	beq.n	8001f7c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b45      	ldr	r3, [pc, #276]	@ (8002064 <HAL_RCC_OscConfig+0x3f4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fcb1 	bl	80008b8 <HAL_GetTick>
 8001f56:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f60:	d042      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fca9 	bl	80008b8 <HAL_GetTick>
 8001f66:	1b00      	subs	r0, r0, r4
 8001f68:	2802      	cmp	r0, #2
 8001f6a:	d9f5      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	e069      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4a3b      	ldr	r2, [pc, #236]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001f72:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	e7db      	b.n	8001f34 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <HAL_RCC_OscConfig+0x3f4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001f82:	f7fe fc99 	bl	80008b8 <HAL_GetTick>
 8001f86:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f88:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f90:	d006      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7fe fc91 	bl	80008b8 <HAL_GetTick>
 8001f96:	1b40      	subs	r0, r0, r5
 8001f98:	2802      	cmp	r0, #2
 8001f9a:	d9f5      	bls.n	8001f88 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	e051      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa0:	69e3      	ldr	r3, [r4, #28]
 8001fa2:	6a22      	ldr	r2, [r4, #32]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001fa8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001fae:	0852      	lsrs	r2, r2, #1
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001fb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001fb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001fbc:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001fbe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_RCC_OscConfig+0x3f4>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fc77 	bl	80008b8 <HAL_GetTick>
 8001fca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fcc:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fc6f 	bl	80008b8 <HAL_GetTick>
 8001fda:	1b00      	subs	r0, r0, r4
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	d9f5      	bls.n	8001fcc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e02f      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e02d      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e02b      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d02b      	beq.n	8002048 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x3f0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001ff8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffa:	4291      	cmp	r1, r2
 8001ffc:	d126      	bne.n	800204c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002002:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	428a      	cmp	r2, r1
 8002006:	d123      	bne.n	8002050 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002008:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800200e:	401a      	ands	r2, r3
 8002010:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002014:	d11e      	bne.n	8002054 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002016:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800201a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800201c:	0852      	lsrs	r2, r2, #1
 800201e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002026:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800202a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002030:	d114      	bne.n	800205c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002032:	2000      	movs	r0, #0
 8002034:	e006      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
}
 8002038:	4770      	bx	lr
        return HAL_ERROR;
 800203a:	2001      	movs	r0, #1
 800203c:	e002      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800203e:	2001      	movs	r0, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002042:	2000      	movs	r0, #0
}
 8002044:	b002      	add	sp, #8
 8002046:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002048:	2001      	movs	r0, #1
 800204a:	e7fb      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800204c:	2001      	movs	r0, #1
 800204e:	e7f9      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 8002050:	2001      	movs	r0, #1
 8002052:	e7f7      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 8002054:	2001      	movs	r0, #1
 8002056:	e7f5      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 8002058:	2001      	movs	r0, #1
 800205a:	e7f3      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 800205c:	2001      	movs	r0, #1
 800205e:	e7f1      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
 8002060:	40023800 	.word	0x40023800
 8002064:	42470000 	.word	0x42470000

08002068 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002068:	4b01      	ldr	r3, [pc, #4]	@ (8002070 <HAL_RCC_EnableCSS+0x8>)
 800206a:	2201      	movs	r2, #1
 800206c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800206e:	4770      	bx	lr
 8002070:	42470000 	.word	0x42470000

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002076:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d041      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x92>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d141      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002094:	d012      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800209e:	481d      	ldr	r0, [pc, #116]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	fba1 0100 	umull	r0, r1, r1, r0
 80020a6:	f7fe f877 	bl	8000198 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020b2:	3301      	adds	r3, #1
 80020b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80020b6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020ba:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020be:	6858      	ldr	r0, [r3, #4]
 80020c0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80020c4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80020c8:	ebbc 0c00 	subs.w	ip, ip, r0
 80020cc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80020d0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80020d4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80020d8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80020dc:	ebb1 010c 	subs.w	r1, r1, ip
 80020e0:	eb63 030e 	sbc.w	r3, r3, lr
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ea:	00c9      	lsls	r1, r1, #3
 80020ec:	eb11 0c00 	adds.w	ip, r1, r0
 80020f0:	f143 0300 	adc.w	r3, r3, #0
 80020f4:	0299      	lsls	r1, r3, #10
 80020f6:	2300      	movs	r3, #0
 80020f8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80020fc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002100:	f7fe f84a 	bl	8000198 <__aeabi_uldivmod>
 8002104:	e7d1      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002106:	4803      	ldr	r0, [pc, #12]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002108:	e7d7      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210a:	4803      	ldr	r0, [pc, #12]	@ (8002118 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800210c:	e7d5      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x46>
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	017d7840 	.word	0x017d7840
 8002118:	00f42400 	.word	0x00f42400

0800211c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800211c:	2800      	cmp	r0, #0
 800211e:	f000 809b 	beq.w	8002258 <HAL_RCC_ClockConfig+0x13c>
{
 8002122:	b570      	push	{r4, r5, r6, lr}
 8002124:	460d      	mov	r5, r1
 8002126:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b4f      	ldr	r3, [pc, #316]	@ (8002268 <HAL_RCC_ClockConfig+0x14c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	428b      	cmp	r3, r1
 8002132:	d208      	bcs.n	8002146 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002134:	b2cb      	uxtb	r3, r1
 8002136:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <HAL_RCC_ClockConfig+0x14c>)
 8002138:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	428b      	cmp	r3, r1
 8002142:	f040 808b 	bne.w	800225c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	f013 0f02 	tst.w	r3, #2
 800214c:	d017      	beq.n	800217e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214e:	f013 0f04 	tst.w	r3, #4
 8002152:	d004      	beq.n	800215e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002156:	6893      	ldr	r3, [r2, #8]
 8002158:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800215c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f013 0f08 	tst.w	r3, #8
 8002164:	d004      	beq.n	8002170 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002166:	4a41      	ldr	r2, [pc, #260]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002168:	6893      	ldr	r3, [r2, #8]
 800216a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4a3e      	ldr	r2, [pc, #248]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002172:	6893      	ldr	r3, [r2, #8]
 8002174:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002178:	68a1      	ldr	r1, [r4, #8]
 800217a:	430b      	orrs	r3, r1
 800217c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f013 0f01 	tst.w	r3, #1
 8002184:	d032      	beq.n	80021ec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d021      	beq.n	80021d0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218c:	1e9a      	subs	r2, r3, #2
 800218e:	2a01      	cmp	r2, #1
 8002190:	d925      	bls.n	80021de <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4a36      	ldr	r2, [pc, #216]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f012 0f02 	tst.w	r2, #2
 800219a:	d061      	beq.n	8002260 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219c:	4933      	ldr	r1, [pc, #204]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 800219e:	688a      	ldr	r2, [r1, #8]
 80021a0:	f022 0203 	bic.w	r2, r2, #3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80021a8:	f7fe fb86 	bl	80008b8 <HAL_GetTick>
 80021ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	6862      	ldr	r2, [r4, #4]
 80021b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021bc:	d016      	beq.n	80021ec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021be:	f7fe fb7b 	bl	80008b8 <HAL_GetTick>
 80021c2:	1b80      	subs	r0, r0, r6
 80021c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d9f0      	bls.n	80021ae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80021cc:	2003      	movs	r0, #3
 80021ce:	e042      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80021d8:	d1e0      	bne.n	800219c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e03b      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80021e6:	d1d9      	bne.n	800219c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
 80021ea:	e034      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_RCC_ClockConfig+0x14c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d907      	bls.n	8002208 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	b2ea      	uxtb	r2, r5
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_ClockConfig+0x14c>)
 80021fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	42ab      	cmp	r3, r5
 8002206:	d12d      	bne.n	8002264 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f013 0f04 	tst.w	r3, #4
 800220e:	d006      	beq.n	800221e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4a16      	ldr	r2, [pc, #88]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002212:	6893      	ldr	r3, [r2, #8]
 8002214:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002218:	68e1      	ldr	r1, [r4, #12]
 800221a:	430b      	orrs	r3, r1
 800221c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f013 0f08 	tst.w	r3, #8
 8002224:	d007      	beq.n	8002236 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 8002228:	6893      	ldr	r3, [r2, #8]
 800222a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800222e:	6921      	ldr	r1, [r4, #16]
 8002230:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002234:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f7ff ff1d 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_RCC_ClockConfig+0x150>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002242:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x154>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	40d8      	lsrs	r0, r3
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_ClockConfig+0x158>)
 800224a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_RCC_ClockConfig+0x15c>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f7fe fae6 	bl	8000820 <HAL_InitTick>
  return HAL_OK;
 8002254:	2000      	movs	r0, #0
}
 8002256:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
}
 800225a:	4770      	bx	lr
      return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	e7fa      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
 8002262:	e7f8      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e7f6      	b.n	8002256 <HAL_RCC_ClockConfig+0x13a>
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	08004cd8 	.word	0x08004cd8
 8002274:	20000008 	.word	0x20000008
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800227c:	4b01      	ldr	r3, [pc, #4]	@ (8002284 <HAL_RCC_GetHCLKFreq+0x8>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002288:	4770      	bx	lr
	...

0800228c <HAL_RCC_NMI_IRQHandler>:
{
 800228c:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002296:	d100      	bne.n	800229a <HAL_RCC_NMI_IRQHandler+0xe>
}
 8002298:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800229a:	f7ff fff5 	bl	8002288 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800229e:	4b02      	ldr	r3, [pc, #8]	@ (80022a8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	739a      	strb	r2, [r3, #14]
}
 80022a4:	e7f8      	b.n	8002298 <HAL_RCC_NMI_IRQHandler+0xc>
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	4605      	mov	r5, r0
 80022b4:	4688      	mov	r8, r1
 80022b6:	4617      	mov	r7, r2
 80022b8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022ba:	f7fe fafd 	bl	80008b8 <HAL_GetTick>
 80022be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80022c0:	1a1b      	subs	r3, r3, r0
 80022c2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80022c6:	f7fe faf7 	bl	80008b8 <HAL_GetTick>
 80022ca:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80022d4:	fb09 f303 	mul.w	r3, r9, r3
 80022d8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	689c      	ldr	r4, [r3, #8]
 80022de:	ea38 0404 	bics.w	r4, r8, r4
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	42bb      	cmp	r3, r7
 80022ea:	d03d      	beq.n	8002368 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80022f0:	d0f3      	beq.n	80022da <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022f2:	f7fe fae1 	bl	80008b8 <HAL_GetTick>
 80022f6:	eba0 000a 	sub.w	r0, r0, sl
 80022fa:	4548      	cmp	r0, r9
 80022fc:	d203      	bcs.n	8002306 <SPI_WaitFlagStateUntilTimeout+0x5a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	bb73      	cbnz	r3, 8002360 <SPI_WaitFlagStateUntilTimeout+0xb4>
      {
        tmp_timeout = 0U;
 8002302:	4699      	mov	r9, r3
 8002304:	e7e9      	b.n	80022da <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002306:	682a      	ldr	r2, [r5, #0]
 8002308:	6853      	ldr	r3, [r2, #4]
 800230a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800230e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002310:	686b      	ldr	r3, [r5, #4]
 8002312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002316:	d00b      	beq.n	8002330 <SPI_WaitFlagStateUntilTimeout+0x84>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002318:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800231e:	d014      	beq.n	800234a <SPI_WaitFlagStateUntilTimeout+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002326:	2300      	movs	r3, #0
 8002328:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 800232c:	2003      	movs	r0, #3
 800232e:	e01c      	b.n	800236a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002330:	68ab      	ldr	r3, [r5, #8]
 8002332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002336:	d002      	beq.n	800233e <SPI_WaitFlagStateUntilTimeout+0x92>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233c:	d1ec      	bne.n	8002318 <SPI_WaitFlagStateUntilTimeout+0x6c>
          __HAL_SPI_DISABLE(hspi);
 800233e:	682a      	ldr	r2, [r5, #0]
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e7e6      	b.n	8002318 <SPI_WaitFlagStateUntilTimeout+0x6c>
          SPI_RESET_CRC(hspi);
 800234a:	682a      	ldr	r2, [r5, #0]
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	682a      	ldr	r2, [r5, #0]
 8002356:	6813      	ldr	r3, [r2, #0]
 8002358:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e7df      	b.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x74>
      }
      else
      {
        count--;
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	e7b8      	b.n	80022da <SPI_WaitFlagStateUntilTimeout+0x2e>
      }
    }
  }

  return HAL_OK;
 8002368:	2000      	movs	r0, #0
}
 800236a:	b002      	add	sp, #8
 800236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002370:	20000008 	.word	0x20000008

08002374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	4616      	mov	r6, r2
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800237e:	9200      	str	r2, [sp, #0]
 8002380:	460b      	mov	r3, r1
 8002382:	2201      	movs	r2, #1
 8002384:	2102      	movs	r1, #2
 8002386:	f7ff ff91 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 800238a:	b9d0      	cbnz	r0, 80023c2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <SPI_EndRxTxTransaction+0x78>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a17      	ldr	r2, [pc, #92]	@ (80023f0 <SPI_EndRxTxTransaction+0x7c>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023a8:	d011      	beq.n	80023ce <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023aa:	9b03      	ldr	r3, [sp, #12]
 80023ac:	b13b      	cbz	r3, 80023be <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023bc:	d1f5      	bne.n	80023aa <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80023be:	b004      	add	sp, #16
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80023ca:	2003      	movs	r0, #3
 80023cc:	e7f7      	b.n	80023be <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023ce:	9600      	str	r6, [sp, #0]
 80023d0:	462b      	mov	r3, r5
 80023d2:	2200      	movs	r2, #0
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff ff68 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 80023dc:	2800      	cmp	r0, #0
 80023de:	d0ee      	beq.n	80023be <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
 80023ea:	e7e8      	b.n	80023be <SPI_EndRxTxTransaction+0x4a>
 80023ec:	20000008 	.word	0x20000008
 80023f0:	165e9f81 	.word	0x165e9f81

080023f4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d05a      	beq.n	80024ae <HAL_SPI_Init+0xba>
{
 80023f8:	b510      	push	{r4, lr}
 80023fa:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80023fe:	b933      	cbnz	r3, 800240e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002400:	6843      	ldr	r3, [r0, #4]
 8002402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002406:	d005      	beq.n	8002414 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002408:	2300      	movs	r3, #0
 800240a:	61c3      	str	r3, [r0, #28]
 800240c:	e002      	b.n	8002414 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002412:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002418:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800241c:	2b00      	cmp	r3, #0
 800241e:	d040      	beq.n	80024a2 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800242e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002436:	68a2      	ldr	r2, [r4, #8]
 8002438:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 800243c:	4313      	orrs	r3, r2
 800243e:	68e2      	ldr	r2, [r4, #12]
 8002440:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002444:	4313      	orrs	r3, r2
 8002446:	6922      	ldr	r2, [r4, #16]
 8002448:	f002 0202 	and.w	r2, r2, #2
 800244c:	4313      	orrs	r3, r2
 800244e:	6962      	ldr	r2, [r4, #20]
 8002450:	f002 0201 	and.w	r2, r2, #1
 8002454:	4313      	orrs	r3, r2
 8002456:	69a2      	ldr	r2, [r4, #24]
 8002458:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800245c:	4313      	orrs	r3, r2
 800245e:	69e2      	ldr	r2, [r4, #28]
 8002460:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002464:	4313      	orrs	r3, r2
 8002466:	6a22      	ldr	r2, [r4, #32]
 8002468:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800246c:	4313      	orrs	r3, r2
 800246e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002470:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002474:	6821      	ldr	r1, [r4, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800247a:	8b63      	ldrh	r3, [r4, #26]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002482:	f002 0210 	and.w	r2, r2, #16
 8002486:	6821      	ldr	r1, [r4, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	69d3      	ldr	r3, [r2, #28]
 8002490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002494:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002496:	2000      	movs	r0, #0
 8002498:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800249a:	2301      	movs	r3, #1
 800249c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80024a0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7fe f964 	bl	8000774 <HAL_SPI_MspInit>
 80024ac:	e7b8      	b.n	8002420 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
}
 80024b0:	4770      	bx	lr

080024b2 <HAL_SPI_Transmit>:
{
 80024b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024b6:	b083      	sub	sp, #12
 80024b8:	4604      	mov	r4, r0
 80024ba:	4689      	mov	r9, r1
 80024bc:	4690      	mov	r8, r2
 80024be:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 80024c0:	f7fe f9fa 	bl	80008b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80024c4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 80cd 	bne.w	8002668 <HAL_SPI_Transmit+0x1b6>
 80024ce:	4606      	mov	r6, r0
 80024d0:	b2df      	uxtb	r7, r3
  if ((pData == NULL) || (Size == 0U))
 80024d2:	f1b9 0f00 	cmp.w	r9, #0
 80024d6:	f000 80c8 	beq.w	800266a <HAL_SPI_Transmit+0x1b8>
 80024da:	f1b8 0f00 	cmp.w	r8, #0
 80024de:	f000 80c4 	beq.w	800266a <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 80024e2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f000 80c3 	beq.w	8002672 <HAL_SPI_Transmit+0x1c0>
 80024ec:	2301      	movs	r3, #1
 80024ee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024f2:	2303      	movs	r3, #3
 80024f4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024fc:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002500:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002504:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002508:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800250a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800250c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800250e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002510:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002518:	d01e      	beq.n	8002558 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002522:	d103      	bne.n	800252c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800252a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252c:	68e3      	ldr	r3, [r4, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002532:	d01c      	beq.n	800256e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	b113      	cbz	r3, 800253e <HAL_SPI_Transmit+0x8c>
 8002538:	f1b8 0f01 	cmp.w	r8, #1
 800253c:	d15f      	bne.n	80025fe <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800253e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002548:	3301      	adds	r3, #1
 800254a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800254c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8002556:	e052      	b.n	80025fe <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002560:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e7d5      	b.n	800251a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256e:	6863      	ldr	r3, [r4, #4]
 8002570:	b113      	cbz	r3, 8002578 <HAL_SPI_Transmit+0xc6>
 8002572:	f1b8 0f01 	cmp.w	r8, #1
 8002576:	d115      	bne.n	80025a4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002578:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002582:	3302      	adds	r3, #2
 8002584:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002586:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29b      	uxth	r3, r3
 800258e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8002590:	e008      	b.n	80025a4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002592:	f7fe f991 	bl	80008b8 <HAL_GetTick>
 8002596:	1b80      	subs	r0, r0, r6
 8002598:	42a8      	cmp	r0, r5
 800259a:	d302      	bcc.n	80025a2 <HAL_SPI_Transmit+0xf0>
 800259c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025a0:	d115      	bne.n	80025ce <HAL_SPI_Transmit+0x11c>
 80025a2:	b1a5      	cbz	r5, 80025ce <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 80025a4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d042      	beq.n	8002632 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	f012 0f02 	tst.w	r2, #2
 80025b4:	d0ed      	beq.n	8002592 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025be:	3302      	adds	r3, #2
 80025c0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80025c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80025cc:	e7ea      	b.n	80025a4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025d4:	2300      	movs	r3, #0
 80025d6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025da:	2703      	movs	r7, #3
 80025dc:	e045      	b.n	800266a <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025e6:	3301      	adds	r3, #1
 80025e8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80025ea:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80025ee:	fa1f fc8c 	uxth.w	ip, ip
 80025f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80025f6:	fa1f fc8c 	uxth.w	ip, ip
 80025fa:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80025fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002600:	b29b      	uxth	r3, r3
 8002602:	b1b3      	cbz	r3, 8002632 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	f012 0f02 	tst.w	r2, #2
 800260c:	d1e7      	bne.n	80025de <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800260e:	f7fe f953 	bl	80008b8 <HAL_GetTick>
 8002612:	1b80      	subs	r0, r0, r6
 8002614:	42a8      	cmp	r0, r5
 8002616:	d302      	bcc.n	800261e <HAL_SPI_Transmit+0x16c>
 8002618:	f1b5 3fff 	cmp.w	r5, #4294967295
 800261c:	d101      	bne.n	8002622 <HAL_SPI_Transmit+0x170>
 800261e:	2d00      	cmp	r5, #0
 8002620:	d1ed      	bne.n	80025fe <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8002622:	2301      	movs	r3, #1
 8002624:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002628:	2300      	movs	r3, #0
 800262a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800262e:	2703      	movs	r7, #3
 8002630:	e01b      	b.n	800266a <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002632:	4632      	mov	r2, r6
 8002634:	4629      	mov	r1, r5
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff fe9c 	bl	8002374 <SPI_EndRxTxTransaction>
 800263c:	b108      	cbz	r0, 8002642 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800263e:	2320      	movs	r3, #32
 8002640:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002642:	68a3      	ldr	r3, [r4, #8]
 8002644:	b933      	cbnz	r3, 8002654 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	9201      	str	r2, [sp, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002654:	2301      	movs	r3, #1
 8002656:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800265a:	2300      	movs	r3, #0
 800265c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002660:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002662:	b913      	cbnz	r3, 800266a <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8002664:	2700      	movs	r7, #0
 8002666:	e000      	b.n	800266a <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8002668:	2702      	movs	r7, #2
}
 800266a:	4638      	mov	r0, r7
 800266c:	b003      	add	sp, #12
 800266e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8002672:	2702      	movs	r7, #2
 8002674:	e7f9      	b.n	800266a <HAL_SPI_Transmit+0x1b8>
	...

08002678 <HAL_SPI_Transmit_DMA>:
{
 8002678:	b538      	push	{r3, r4, r5, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 800267a:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800267e:	2b01      	cmp	r3, #1
 8002680:	d15e      	bne.n	8002740 <HAL_SPI_Transmit_DMA+0xc8>
 8002682:	4604      	mov	r4, r0
 8002684:	b2dd      	uxtb	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8002686:	2900      	cmp	r1, #0
 8002688:	d05b      	beq.n	8002742 <HAL_SPI_Transmit_DMA+0xca>
 800268a:	2a00      	cmp	r2, #0
 800268c:	d059      	beq.n	8002742 <HAL_SPI_Transmit_DMA+0xca>
  __HAL_LOCK(hspi);
 800268e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002692:	2b01      	cmp	r3, #1
 8002694:	d057      	beq.n	8002746 <HAL_SPI_Transmit_DMA+0xce>
 8002696:	2301      	movs	r3, #1
 8002698:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800269c:	2303      	movs	r3, #3
 800269e:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026a6:	6301      	str	r1, [r0, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026a8:	8682      	strh	r2, [r0, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026aa:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ac:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80026ae:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026b0:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026b2:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026b4:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b6:	6883      	ldr	r3, [r0, #8]
 80026b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026bc:	d02d      	beq.n	800271a <HAL_SPI_Transmit_DMA+0xa2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80026be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026c0:	4a22      	ldr	r2, [pc, #136]	@ (800274c <HAL_SPI_Transmit_DMA+0xd4>)
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80026c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026c6:	4a22      	ldr	r2, [pc, #136]	@ (8002750 <HAL_SPI_Transmit_DMA+0xd8>)
 80026c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80026ca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026cc:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <HAL_SPI_Transmit_DMA+0xdc>)
 80026ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80026d0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026d2:	2200      	movs	r2, #0
 80026d4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026d6:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80026d8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026da:	b29b      	uxth	r3, r3
 80026dc:	320c      	adds	r2, #12
 80026de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80026e0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80026e2:	f7fe fa61 	bl	8000ba8 <HAL_DMA_Start_IT>
 80026e6:	4601      	mov	r1, r0
 80026e8:	bb10      	cbnz	r0, 8002730 <HAL_SPI_Transmit_DMA+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80026f2:	d103      	bne.n	80026fc <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fa:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80026fc:	2300      	movs	r3, #0
 80026fe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	6853      	ldr	r3, [r2, #4]
 8002706:	f043 0320 	orr.w	r3, r3, #32
 800270a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	6853      	ldr	r3, [r2, #4]
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 8002716:	460d      	mov	r5, r1
 8002718:	e013      	b.n	8002742 <HAL_SPI_Transmit_DMA+0xca>
    __HAL_SPI_DISABLE(hspi);
 800271a:	6802      	ldr	r2, [r0, #0]
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002722:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e7c6      	b.n	80026be <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002738:	2300      	movs	r3, #0
 800273a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800273e:	e000      	b.n	8002742 <HAL_SPI_Transmit_DMA+0xca>
    return HAL_BUSY;
 8002740:	2502      	movs	r5, #2
}
 8002742:	4628      	mov	r0, r5
 8002744:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8002746:	2502      	movs	r5, #2
 8002748:	e7fb      	b.n	8002742 <HAL_SPI_Transmit_DMA+0xca>
 800274a:	bf00      	nop
 800274c:	0800275b 	.word	0x0800275b
 8002750:	08002789 	.word	0x08002789
 8002754:	08002767 	.word	0x08002767

08002758 <HAL_SPI_TxHalfCpltCallback>:
}
 8002758:	4770      	bx	lr

0800275a <SPI_DMAHalfTransmitCplt>:
{
 800275a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800275c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800275e:	f7ff fffb 	bl	8002758 <HAL_SPI_TxHalfCpltCallback>
}
 8002762:	bd08      	pop	{r3, pc}

08002764 <HAL_SPI_ErrorCallback>:
}
 8002764:	4770      	bx	lr

08002766 <SPI_DMAError>:
{
 8002766:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002768:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800276a:	6802      	ldr	r2, [r0, #0]
 800276c:	6853      	ldr	r3, [r2, #4]
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002774:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002782:	f7ff ffef 	bl	8002764 <HAL_SPI_ErrorCallback>
}
 8002786:	bd08      	pop	{r3, pc}

08002788 <SPI_DMATransmitCplt>:
{
 8002788:	b530      	push	{r4, r5, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800278e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 8002790:	f7fe f892 	bl	80008b8 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800279c:	d123      	bne.n	80027e6 <SPI_DMATransmitCplt+0x5e>
 800279e:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027a0:	6821      	ldr	r1, [r4, #0]
 80027a2:	684b      	ldr	r3, [r1, #4]
 80027a4:	f023 0320 	bic.w	r3, r3, #32
 80027a8:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027aa:	6821      	ldr	r1, [r4, #0]
 80027ac:	684b      	ldr	r3, [r1, #4]
 80027ae:	f023 0302 	bic.w	r3, r3, #2
 80027b2:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027b4:	2164      	movs	r1, #100	@ 0x64
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fddc 	bl	8002374 <SPI_EndRxTxTransaction>
 80027bc:	b118      	cbz	r0, 80027c6 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027c0:	f043 0320 	orr.w	r3, r3, #32
 80027c4:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	b933      	cbnz	r3, 80027d8 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	9201      	str	r2, [sp, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80027dc:	2301      	movs	r3, #1
 80027de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027e4:	b923      	cbnz	r3, 80027f0 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fd fd7e 	bl	80002e8 <HAL_SPI_TxCpltCallback>
}
 80027ec:	b003      	add	sp, #12
 80027ee:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ffb7 	bl	8002764 <HAL_SPI_ErrorCallback>
      return;
 80027f6:	e7f9      	b.n	80027ec <SPI_DMATransmitCplt+0x64>

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027fa:	f7ff fd47 	bl	800228c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fe:	e7fe      	b.n	80027fe <NMI_Handler+0x6>

08002800 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <HardFault_Handler>

08002802 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <MemManage_Handler>

08002804 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <BusFault_Handler>

08002806 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <UsageFault_Handler>

08002808 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002808:	4770      	bx	lr

0800280a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	4770      	bx	lr

0800280c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280c:	4770      	bx	lr

0800280e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f7fe f846 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	bd08      	pop	{r3, pc}
	...

08002818 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800281a:	4802      	ldr	r0, [pc, #8]	@ (8002824 <DMA2_Stream2_IRQHandler+0xc>)
 800281c:	f7fe f9f8 	bl	8000c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002820:	bd08      	pop	{r3, pc}
 8002822:	bf00      	nop
 8002824:	2000a324 	.word	0x2000a324

08002828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800282a:	4802      	ldr	r0, [pc, #8]	@ (8002834 <OTG_FS_IRQHandler+0xc>)
 800282c:	f7fe ff15 	bl	800165a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002830:	bd08      	pop	{r3, pc}
 8002832:	bf00      	nop
 8002834:	2000b8dc 	.word	0x2000b8dc

08002838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002838:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	3301      	adds	r3, #1
 8002842:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002844:	9b01      	ldr	r3, [sp, #4]
 8002846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800284a:	d81c      	bhi.n	8002886 <USB_CoreReset+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800284c:	6903      	ldr	r3, [r0, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	daf5      	bge.n	800283e <USB_CoreReset+0x6>

  count = 10U;
 8002852:	230a      	movs	r3, #10
 8002854:	9301      	str	r3, [sp, #4]

  /* few cycles before setting core reset */
  while (count > 0U)
 8002856:	e002      	b.n	800285e <USB_CoreReset+0x26>
  {
    count--;
 8002858:	9b01      	ldr	r3, [sp, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800285e:	9b01      	ldr	r3, [sp, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <USB_CoreReset+0x20>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002864:	6903      	ldr	r3, [r0, #16]
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	3301      	adds	r3, #1
 8002870:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002878:	d808      	bhi.n	800288c <USB_CoreReset+0x54>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800287a:	6903      	ldr	r3, [r0, #16]
 800287c:	f013 0f01 	tst.w	r3, #1
 8002880:	d1f4      	bne.n	800286c <USB_CoreReset+0x34>

  return HAL_OK;
 8002882:	2000      	movs	r0, #0
 8002884:	e000      	b.n	8002888 <USB_CoreReset+0x50>
      return HAL_TIMEOUT;
 8002886:	2003      	movs	r0, #3
}
 8002888:	b002      	add	sp, #8
 800288a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800288c:	2003      	movs	r0, #3
 800288e:	e7fb      	b.n	8002888 <USB_CoreReset+0x50>

08002890 <USB_CoreInit>:
{
 8002890:	b084      	sub	sp, #16
 8002892:	b510      	push	{r4, lr}
 8002894:	4604      	mov	r4, r0
 8002896:	a803      	add	r0, sp, #12
 8002898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800289c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d121      	bne.n	80028e8 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028ac:	68e3      	ldr	r3, [r4, #12]
 80028ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80028b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028b6:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028b8:	68e3      	ldr	r3, [r4, #12]
 80028ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80028be:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80028c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d00a      	beq.n	80028de <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7ff ffb5 	bl	8002838 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80028ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d01c      	beq.n	8002910 <USB_CoreInit+0x80>
}
 80028d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028da:	b004      	add	sp, #16
 80028dc:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80028de:	68e3      	ldr	r3, [r4, #12]
 80028e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e4:	60e3      	str	r3, [r4, #12]
 80028e6:	e7ef      	b.n	80028c8 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028e8:	68e3      	ldr	r3, [r4, #12]
 80028ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ee:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff ffa1 	bl	8002838 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80028f6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80028fa:	b923      	cbnz	r3, 8002906 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002904:	e7e3      	b.n	80028ce <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002906:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800290e:	e7de      	b.n	80028ce <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002910:	68a3      	ldr	r3, [r4, #8]
 8002912:	f043 0306 	orr.w	r3, r3, #6
 8002916:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002918:	68a3      	ldr	r3, [r4, #8]
 800291a:	f043 0320 	orr.w	r3, r3, #32
 800291e:	60a3      	str	r3, [r4, #8]
 8002920:	e7d9      	b.n	80028d6 <USB_CoreInit+0x46>
	...

08002924 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002924:	2a02      	cmp	r2, #2
 8002926:	d00a      	beq.n	800293e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002928:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800292a:	68c3      	ldr	r3, [r0, #12]
 800292c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002930:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002932:	68c3      	ldr	r3, [r0, #12]
 8002934:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002938:	60c3      	str	r3, [r0, #12]
}
 800293a:	2000      	movs	r0, #0
 800293c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <USB_SetTurnaroundTime+0xa8>)
 8002940:	440b      	add	r3, r1
 8002942:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <USB_SetTurnaroundTime+0xac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d92f      	bls.n	80029a8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002948:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <USB_SetTurnaroundTime+0xb0>)
 800294a:	440b      	add	r3, r1
 800294c:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <USB_SetTurnaroundTime+0xb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d92c      	bls.n	80029ac <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002952:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8002956:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 800295a:	4a20      	ldr	r2, [pc, #128]	@ (80029dc <USB_SetTurnaroundTime+0xb8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d927      	bls.n	80029b0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002960:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002964:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002968:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <USB_SetTurnaroundTime+0xbc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d322      	bcc.n	80029b4 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <USB_SetTurnaroundTime+0xc0>)
 8002970:	440b      	add	r3, r1
 8002972:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <USB_SetTurnaroundTime+0xc4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d91f      	bls.n	80029b8 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002978:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <USB_SetTurnaroundTime+0xc8>)
 800297a:	440b      	add	r3, r1
 800297c:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <USB_SetTurnaroundTime+0xcc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d31c      	bcc.n	80029bc <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002982:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <USB_SetTurnaroundTime+0xd0>)
 8002984:	440b      	add	r3, r1
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <USB_SetTurnaroundTime+0xd4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d319      	bcc.n	80029c0 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800298c:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002990:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002994:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <USB_SetTurnaroundTime+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d314      	bcc.n	80029c4 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800299a:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <USB_SetTurnaroundTime+0xdc>)
 800299c:	440b      	add	r3, r1
 800299e:	4a19      	ldr	r2, [pc, #100]	@ (8002a04 <USB_SetTurnaroundTime+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d211      	bcs.n	80029c8 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80029a4:	2207      	movs	r2, #7
 80029a6:	e7c0      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80029a8:	220f      	movs	r2, #15
 80029aa:	e7be      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80029ac:	220e      	movs	r2, #14
 80029ae:	e7bc      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80029b0:	220d      	movs	r2, #13
 80029b2:	e7ba      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80029b4:	220c      	movs	r2, #12
 80029b6:	e7b8      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80029b8:	220b      	movs	r2, #11
 80029ba:	e7b6      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80029bc:	220a      	movs	r2, #10
 80029be:	e7b4      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80029c0:	2209      	movs	r2, #9
 80029c2:	e7b2      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80029c4:	2208      	movs	r2, #8
 80029c6:	e7b0      	b.n	800292a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80029c8:	2206      	movs	r2, #6
 80029ca:	e7ae      	b.n	800292a <USB_SetTurnaroundTime+0x6>
 80029cc:	ff275340 	.word	0xff275340
 80029d0:	000c34ff 	.word	0x000c34ff
 80029d4:	ff1b1e40 	.word	0xff1b1e40
 80029d8:	000f423f 	.word	0x000f423f
 80029dc:	00124f7f 	.word	0x00124f7f
 80029e0:	0013d620 	.word	0x0013d620
 80029e4:	fee5b660 	.word	0xfee5b660
 80029e8:	0016e35f 	.word	0x0016e35f
 80029ec:	feced300 	.word	0xfeced300
 80029f0:	001b7740 	.word	0x001b7740
 80029f4:	feb35bc0 	.word	0xfeb35bc0
 80029f8:	002191c0 	.word	0x002191c0
 80029fc:	00387520 	.word	0x00387520
 8002a00:	fe5954e0 	.word	0xfe5954e0
 8002a04:	00419ce0 	.word	0x00419ce0

08002a08 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a08:	6883      	ldr	r3, [r0, #8]
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6083      	str	r3, [r0, #8]
}
 8002a10:	2000      	movs	r0, #0
 8002a12:	4770      	bx	lr

08002a14 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a14:	6883      	ldr	r3, [r0, #8]
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6083      	str	r3, [r0, #8]
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr

08002a20 <USB_FlushTxFifo>:
{
 8002a20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	9301      	str	r3, [sp, #4]
    count++;
 8002a26:	9b01      	ldr	r3, [sp, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002a2c:	9b01      	ldr	r3, [sp, #4]
 8002a2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a32:	d815      	bhi.n	8002a60 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a34:	6903      	ldr	r3, [r0, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	daf5      	bge.n	8002a26 <USB_FlushTxFifo+0x6>
  count = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a3e:	0189      	lsls	r1, r1, #6
 8002a40:	f041 0120 	orr.w	r1, r1, #32
 8002a44:	6101      	str	r1, [r0, #16]
    count++;
 8002a46:	9b01      	ldr	r3, [sp, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002a4c:	9b01      	ldr	r3, [sp, #4]
 8002a4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a52:	d808      	bhi.n	8002a66 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a54:	6903      	ldr	r3, [r0, #16]
 8002a56:	f013 0f20 	tst.w	r3, #32
 8002a5a:	d1f4      	bne.n	8002a46 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e000      	b.n	8002a62 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002a60:	2003      	movs	r0, #3
}
 8002a62:	b002      	add	sp, #8
 8002a64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a66:	2003      	movs	r0, #3
 8002a68:	e7fb      	b.n	8002a62 <USB_FlushTxFifo+0x42>

08002a6a <USB_FlushRxFifo>:
{
 8002a6a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9301      	str	r3, [sp, #4]
    count++;
 8002a70:	9b01      	ldr	r3, [sp, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a7c:	d813      	bhi.n	8002aa6 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a7e:	6903      	ldr	r3, [r0, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	daf5      	bge.n	8002a70 <USB_FlushRxFifo+0x6>
  count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a88:	2310      	movs	r3, #16
 8002a8a:	6103      	str	r3, [r0, #16]
    count++;
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a98:	d808      	bhi.n	8002aac <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a9a:	6903      	ldr	r3, [r0, #16]
 8002a9c:	f013 0f10 	tst.w	r3, #16
 8002aa0:	d1f4      	bne.n	8002a8c <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e000      	b.n	8002aa8 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002aa6:	2003      	movs	r0, #3
}
 8002aa8:	b002      	add	sp, #8
 8002aaa:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002aac:	2003      	movs	r0, #3
 8002aae:	e7fb      	b.n	8002aa8 <USB_FlushRxFifo+0x3e>

08002ab0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002ab0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002ab4:	4319      	orrs	r1, r3
 8002ab6:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002aba:	2000      	movs	r0, #0
 8002abc:	4770      	bx	lr
	...

08002ac0 <USB_DevInit>:
{
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	a807      	add	r0, sp, #28
 8002ac8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	e006      	b.n	8002ade <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8002ad0:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002ad4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002ad8:	2100      	movs	r1, #0
 8002ada:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002adc:	3301      	adds	r3, #1
 8002ade:	2b0e      	cmp	r3, #14
 8002ae0:	d9f6      	bls.n	8002ad0 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8002ae2:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8002ae6:	bb06      	cbnz	r6, 8002b2a <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ae8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002af4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002afa:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002afc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002afe:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002b02:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002b04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0a:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b12:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d115      	bne.n	8002b46 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8002b1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002b1e:	b96b      	cbnz	r3, 8002b3c <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002b20:	2100      	movs	r1, #0
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7ff ffc4 	bl	8002ab0 <USB_SetDevSpeed>
 8002b28:	e011      	b.n	8002b4e <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002b2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b30:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002b3a:	e7e7      	b.n	8002b0c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff ffb6 	bl	8002ab0 <USB_SetDevSpeed>
 8002b44:	e003      	b.n	8002b4e <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002b46:	2103      	movs	r1, #3
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff ffb1 	bl	8002ab0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b4e:	2110      	movs	r1, #16
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff ff65 	bl	8002a20 <USB_FlushTxFifo>
 8002b56:	4605      	mov	r5, r0
 8002b58:	b100      	cbz	r0, 8002b5c <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8002b5a:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff ff84 	bl	8002a6a <USB_FlushRxFifo>
 8002b62:	b100      	cbz	r0, 8002b66 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8002b64:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002b66:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b70:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b74:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b78:	e00d      	b.n	8002b96 <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b7e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002b82:	e002      	b.n	8002b8a <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b84:	2000      	movs	r0, #0
 8002b86:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b8e:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002b92:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b94:	3301      	adds	r3, #1
 8002b96:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8002b9a:	4299      	cmp	r1, r3
 8002b9c:	d90e      	bls.n	8002bbc <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b9e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002ba2:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8002ba6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8002baa:	2800      	cmp	r0, #0
 8002bac:	daea      	bge.n	8002b84 <USB_DevInit+0xc4>
      if (i == 0U)
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e3      	bne.n	8002b7a <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002bb2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002bb6:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002bba:	e7e6      	b.n	8002b8a <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e00a      	b.n	8002bd6 <USB_DevInit+0x116>
      if (i == 0U)
 8002bc0:	b1bb      	cbz	r3, 8002bf2 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002bc2:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8002bc6:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bca:	2200      	movs	r2, #0
 8002bcc:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bce:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002bd2:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4299      	cmp	r1, r3
 8002bd8:	d910      	bls.n	8002bfc <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bda:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002bde:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8002be2:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8002be6:	2f00      	cmp	r7, #0
 8002be8:	dbea      	blt.n	8002bc0 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bea:	2700      	movs	r7, #0
 8002bec:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002bf0:	e7eb      	b.n	8002bca <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002bf2:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8002bf6:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002bfa:	e7e6      	b.n	8002bca <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bfc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8002c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c04:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c0c:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8002c10:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002c12:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002c16:	b91b      	cbnz	r3, 8002c20 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c18:	69a3      	ldr	r3, [r4, #24]
 8002c1a:	f043 0310 	orr.w	r3, r3, #16
 8002c1e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c20:	69a2      	ldr	r2, [r4, #24]
 8002c22:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <USB_DevInit+0x194>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002c28:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8002c2c:	b11b      	cbz	r3, 8002c36 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c2e:	69a3      	ldr	r3, [r4, #24]
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002c36:	2e01      	cmp	r6, #1
 8002c38:	d004      	beq.n	8002c44 <USB_DevInit+0x184>
}
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c40:	b004      	add	sp, #16
 8002c42:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c44:	69a3      	ldr	r3, [r4, #24]
 8002c46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	61a3      	str	r3, [r4, #24]
 8002c50:	e7f3      	b.n	8002c3a <USB_DevInit+0x17a>
 8002c52:	bf00      	nop
 8002c54:	803c3800 	.word	0x803c3800

08002c58 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002c58:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002c5c:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d004      	beq.n	8002c6e <USB_GetDevSpeed+0x16>
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d004      	beq.n	8002c72 <USB_GetDevSpeed+0x1a>
 8002c68:	b92b      	cbnz	r3, 8002c76 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	4770      	bx	lr
 8002c6e:	2002      	movs	r0, #2
 8002c70:	4770      	bx	lr
 8002c72:	2002      	movs	r0, #2
 8002c74:	4770      	bx	lr
 8002c76:	200f      	movs	r0, #15
}
 8002c78:	4770      	bx	lr

08002c7a <USB_ActivateEndpoint>:
{
 8002c7a:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002c7c:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8002c80:	784b      	ldrb	r3, [r1, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d023      	beq.n	8002cce <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002c86:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8002c8a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8002c8e:	f00c 040f 	and.w	r4, ip, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	40a2      	lsls	r2, r4
 8002c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c9a:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002c9e:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002ca2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002ca6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002caa:	d10e      	bne.n	8002cca <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002cac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002cb0:	688a      	ldr	r2, [r1, #8]
 8002cb2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002cb6:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002cb8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002cca:	2000      	movs	r0, #0
 8002ccc:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cce:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002cd2:	f00c 0e0f 	and.w	lr, ip, #15
 8002cd6:	fa03 f30e 	lsl.w	r3, r3, lr
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ce2:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002ce6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002cea:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002cee:	d1ec      	bne.n	8002cca <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002cf0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002cf4:	688a      	ldr	r2, [r1, #8]
 8002cf6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002cfa:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002cfc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002d00:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d0e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002d12:	e7da      	b.n	8002cca <USB_ActivateEndpoint+0x50>

08002d14 <USB_DeactivateEndpoint>:
{
 8002d14:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002d16:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002d18:	784a      	ldrb	r2, [r1, #1]
 8002d1a:	2a01      	cmp	r2, #1
 8002d1c:	d026      	beq.n	8002d6c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d1e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d22:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002d26:	2a00      	cmp	r2, #0
 8002d28:	db52      	blt.n	8002dd0 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002d2a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8002d2e:	780a      	ldrb	r2, [r1, #0]
 8002d30:	f002 020f 	and.w	r2, r2, #15
 8002d34:	f04f 0c01 	mov.w	ip, #1
 8002d38:	fa0c f202 	lsl.w	r2, ip, r2
 8002d3c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8002d40:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002d44:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002d48:	7809      	ldrb	r1, [r1, #0]
 8002d4a:	f001 010f 	and.w	r1, r1, #15
 8002d4e:	fa0c fc01 	lsl.w	ip, ip, r1
 8002d52:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8002d56:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002d5a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002d5e:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <USB_DeactivateEndpoint+0xd8>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8002d66:	2000      	movs	r0, #0
 8002d68:	bc30      	pop	{r4, r5}
 8002d6a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d6c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d70:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	db1e      	blt.n	8002db6 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d78:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8002d7c:	780a      	ldrb	r2, [r1, #0]
 8002d7e:	f002 020f 	and.w	r2, r2, #15
 8002d82:	2401      	movs	r4, #1
 8002d84:	fa04 f202 	lsl.w	r2, r4, r2
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	ea25 0202 	bic.w	r2, r5, r2
 8002d8e:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d92:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002d96:	7809      	ldrb	r1, [r1, #0]
 8002d98:	f001 010f 	and.w	r1, r1, #15
 8002d9c:	408c      	lsls	r4, r1
 8002d9e:	b2a4      	uxth	r4, r4
 8002da0:	ea22 0204 	bic.w	r2, r2, r4
 8002da4:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002da8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002dac:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <USB_DeactivateEndpoint+0xdc>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002db4:	e7d7      	b.n	8002d66 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002db6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002dba:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002dbe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002dc2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002dc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dca:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002dce:	e7d3      	b.n	8002d78 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dd0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002dd4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002dd8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002ddc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002de0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002de4:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8002de8:	e79f      	b.n	8002d2a <USB_DeactivateEndpoint+0x16>
 8002dea:	bf00      	nop
 8002dec:	eff37800 	.word	0xeff37800
 8002df0:	ec337800 	.word	0xec337800

08002df4 <USB_EPStopXfer>:
{
 8002df4:	b410      	push	{r4}
 8002df6:	b083      	sub	sp, #12
 8002df8:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8002dfe:	7848      	ldrb	r0, [r1, #1]
 8002e00:	2801      	cmp	r0, #1
 8002e02:	d00b      	beq.n	8002e1c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e04:	780b      	ldrb	r3, [r1, #0]
 8002e06:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002e0a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	db2d      	blt.n	8002e6e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002e12:	2000      	movs	r0, #0
}
 8002e14:	b003      	add	sp, #12
 8002e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e1a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e1c:	780b      	ldrb	r3, [r1, #0]
 8002e1e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002e22:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002e26:	2c00      	cmp	r4, #0
 8002e28:	db01      	blt.n	8002e2e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e7f2      	b.n	8002e14 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002e2e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002e32:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002e36:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002e3a:	780b      	ldrb	r3, [r1, #0]
 8002e3c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002e40:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002e44:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002e48:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002e52:	9c01      	ldr	r4, [sp, #4]
 8002e54:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	d8db      	bhi.n	8002e14 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002e5c:	780b      	ldrb	r3, [r1, #0]
 8002e5e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002e62:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dbf0      	blt.n	8002e4c <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e7d2      	b.n	8002e14 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002e6e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002e72:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8002e76:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002e7a:	780b      	ldrb	r3, [r1, #0]
 8002e7c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002e80:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002e84:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002e88:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8002e8c:	9b01      	ldr	r3, [sp, #4]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002e92:	9801      	ldr	r0, [sp, #4]
 8002e94:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d808      	bhi.n	8002eae <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002e9c:	780b      	ldrb	r3, [r1, #0]
 8002e9e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002ea2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dbf0      	blt.n	8002e8c <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e7b2      	b.n	8002e14 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7b0      	b.n	8002e14 <USB_EPStopXfer+0x20>

08002eb2 <USB_WritePacket>:
{
 8002eb2:	b510      	push	{r4, lr}
 8002eb4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002eb8:	b984      	cbnz	r4, 8002edc <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002eba:	3303      	adds	r3, #3
 8002ebc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8002ec0:	f04f 0c00 	mov.w	ip, #0
 8002ec4:	e008      	b.n	8002ed8 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002ec6:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ece:	f851 4b04 	ldr.w	r4, [r1], #4
 8002ed2:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002ed4:	f10c 0c01 	add.w	ip, ip, #1
 8002ed8:	45f4      	cmp	ip, lr
 8002eda:	d3f4      	bcc.n	8002ec6 <USB_WritePacket+0x14>
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	bd10      	pop	{r4, pc}

08002ee0 <USB_EPStartXfer>:
{
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002ee4:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002ee6:	784b      	ldrb	r3, [r1, #1]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d02d      	beq.n	8002f48 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eec:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8002ef0:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8002ef4:	691d      	ldr	r5, [r3, #16]
 8002ef6:	f36f 0512 	bfc	r5, #0, #19
 8002efa:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002efc:	691d      	ldr	r5, [r3, #16]
 8002efe:	f36f 45dc 	bfc	r5, #19, #10
 8002f02:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8002f04:	2c00      	cmp	r4, #0
 8002f06:	f040 80ce 	bne.w	80030a6 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8002f0a:	690c      	ldr	r4, [r1, #16]
 8002f0c:	b10c      	cbz	r4, 8002f12 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8002f0e:	688c      	ldr	r4, [r1, #8]
 8002f10:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8002f12:	688c      	ldr	r4, [r1, #8]
 8002f14:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002f16:	691d      	ldr	r5, [r3, #16]
 8002f18:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002f1c:	432c      	orrs	r4, r5
 8002f1e:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002f20:	691c      	ldr	r4, [r3, #16]
 8002f22:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002f26:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002f28:	2a01      	cmp	r2, #1
 8002f2a:	f000 80df 	beq.w	80030ec <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8002f2e:	790b      	ldrb	r3, [r1, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f000 80e1 	beq.w	80030f8 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002f36:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002f3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002f3e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8002f42:	2000      	movs	r0, #0
 8002f44:	b003      	add	sp, #12
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002f48:	690b      	ldr	r3, [r1, #16]
 8002f4a:	bb73      	cbnz	r3, 8002faa <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f4c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002f50:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002f54:	f36f 45dc 	bfc	r5, #19, #10
 8002f58:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002f5c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002f60:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002f64:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f68:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002f6c:	f36f 0512 	bfc	r5, #0, #19
 8002f70:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8002f74:	2a01      	cmp	r2, #1
 8002f76:	d054      	beq.n	8003022 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f78:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002f7c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002f80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002f84:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002f88:	790b      	ldrb	r3, [r1, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d072      	beq.n	8003074 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8002f8e:	690b      	ldr	r3, [r1, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0d6      	beq.n	8002f42 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002f94:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8002f98:	7809      	ldrb	r1, [r1, #0]
 8002f9a:	f001 010f 	and.w	r1, r1, #15
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	408a      	lsls	r2, r1
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8002fa8:	e7cb      	b.n	8002f42 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002faa:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb2:	691d      	ldr	r5, [r3, #16]
 8002fb4:	f36f 0512 	bfc	r5, #0, #19
 8002fb8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fba:	691d      	ldr	r5, [r3, #16]
 8002fbc:	f36f 45dc 	bfc	r5, #19, #10
 8002fc0:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8002fc2:	b984      	cbnz	r4, 8002fe6 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8002fc4:	690e      	ldr	r6, [r1, #16]
 8002fc6:	688d      	ldr	r5, [r1, #8]
 8002fc8:	42ae      	cmp	r6, r5
 8002fca:	d900      	bls.n	8002fce <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8002fcc:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002fce:	691d      	ldr	r5, [r3, #16]
 8002fd0:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002fd4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002fd6:	691d      	ldr	r5, [r3, #16]
 8002fd8:	690e      	ldr	r6, [r1, #16]
 8002fda:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8002fde:	ea45 050c 	orr.w	r5, r5, ip
 8002fe2:	611d      	str	r5, [r3, #16]
 8002fe4:	e7c6      	b.n	8002f74 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002fe6:	690d      	ldr	r5, [r1, #16]
 8002fe8:	688e      	ldr	r6, [r1, #8]
 8002fea:	4435      	add	r5, r6
 8002fec:	3d01      	subs	r5, #1
 8002fee:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8002ff2:	691e      	ldr	r6, [r3, #16]
 8002ff4:	fa1f fc85 	uxth.w	ip, r5
 8002ff8:	4f49      	ldr	r7, [pc, #292]	@ (8003120 <USB_EPStartXfer+0x240>)
 8002ffa:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002ffe:	4335      	orrs	r5, r6
 8003000:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003002:	790d      	ldrb	r5, [r1, #4]
 8003004:	2d01      	cmp	r5, #1
 8003006:	d1e6      	bne.n	8002fd6 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003008:	691d      	ldr	r5, [r3, #16]
 800300a:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 800300e:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003010:	691d      	ldr	r5, [r3, #16]
 8003012:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003016:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800301a:	ea45 050c 	orr.w	r5, r5, ip
 800301e:	611d      	str	r5, [r3, #16]
 8003020:	e7d9      	b.n	8002fd6 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8003022:	69cb      	ldr	r3, [r1, #28]
 8003024:	b11b      	cbz	r3, 800302e <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003026:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800302a:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 800302e:	790b      	ldrb	r3, [r1, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d008      	beq.n	8003046 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003034:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003038:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800303c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003040:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003044:	e77d      	b.n	8002f42 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003046:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800304a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800304e:	d108      	bne.n	8003062 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003050:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003054:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800305c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003060:	e7e8      	b.n	8003034 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003062:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003066:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003072:	e7df      	b.n	8003034 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003074:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003078:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800307c:	d10c      	bne.n	8003098 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800307e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003086:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800308a:	9200      	str	r2, [sp, #0]
 800308c:	8a0b      	ldrh	r3, [r1, #16]
 800308e:	780a      	ldrb	r2, [r1, #0]
 8003090:	68c9      	ldr	r1, [r1, #12]
 8003092:	f7ff ff0e 	bl	8002eb2 <USB_WritePacket>
 8003096:	e754      	b.n	8002f42 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003098:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80030a4:	e7f1      	b.n	800308a <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80030a6:	690c      	ldr	r4, [r1, #16]
 80030a8:	b954      	cbnz	r4, 80030c0 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80030aa:	691c      	ldr	r4, [r3, #16]
 80030ac:	688d      	ldr	r5, [r1, #8]
 80030ae:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80030b2:	432c      	orrs	r4, r5
 80030b4:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80030b6:	691c      	ldr	r4, [r3, #16]
 80030b8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80030bc:	611c      	str	r4, [r3, #16]
 80030be:	e733      	b.n	8002f28 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80030c0:	688d      	ldr	r5, [r1, #8]
 80030c2:	442c      	add	r4, r5
 80030c4:	3c01      	subs	r4, #1
 80030c6:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80030ca:	b2a4      	uxth	r4, r4
 80030cc:	fb04 f505 	mul.w	r5, r4, r5
 80030d0:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80030d2:	691d      	ldr	r5, [r3, #16]
 80030d4:	4e12      	ldr	r6, [pc, #72]	@ (8003120 <USB_EPStartXfer+0x240>)
 80030d6:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80030da:	432c      	orrs	r4, r5
 80030dc:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80030de:	691c      	ldr	r4, [r3, #16]
 80030e0:	6a0d      	ldr	r5, [r1, #32]
 80030e2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80030e6:	432c      	orrs	r4, r5
 80030e8:	611c      	str	r4, [r3, #16]
 80030ea:	e71d      	b.n	8002f28 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 80030ec:	68ca      	ldr	r2, [r1, #12]
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	f43f af1d 	beq.w	8002f2e <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80030f4:	615a      	str	r2, [r3, #20]
 80030f6:	e71a      	b.n	8002f2e <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80030f8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80030fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003100:	d106      	bne.n	8003110 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003102:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003106:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800310a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800310e:	e712      	b.n	8002f36 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003110:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003118:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800311c:	e70b      	b.n	8002f36 <USB_EPStartXfer+0x56>
 800311e:	bf00      	nop
 8003120:	1ff80000 	.word	0x1ff80000

08003124 <USB_ReadPacket>:
{
 8003124:	b510      	push	{r4, lr}
 8003126:	4684      	mov	ip, r0
 8003128:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800312a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800312e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	e005      	b.n	8003142 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003136:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800313a:	6809      	ldr	r1, [r1, #0]
 800313c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003140:	3301      	adds	r3, #1
 8003142:	4573      	cmp	r3, lr
 8003144:	d3f7      	bcc.n	8003136 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003146:	b17a      	cbz	r2, 8003168 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003148:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800314c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003150:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003152:	b2cb      	uxtb	r3, r1
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	fa24 f303 	lsr.w	r3, r4, r3
 800315a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800315e:	3101      	adds	r1, #1
      remaining_bytes--;
 8003160:	3a01      	subs	r2, #1
 8003162:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003164:	2a00      	cmp	r2, #0
 8003166:	d1f4      	bne.n	8003152 <USB_ReadPacket+0x2e>
}
 8003168:	bd10      	pop	{r4, pc}

0800316a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800316a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800316c:	784a      	ldrb	r2, [r1, #1]
 800316e:	2a01      	cmp	r2, #1
 8003170:	d014      	beq.n	800319c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003172:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003176:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800317a:	2a00      	cmp	r2, #0
 800317c:	db06      	blt.n	800318c <USB_EPSetStall+0x22>
 800317e:	b12b      	cbz	r3, 800318c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003180:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003184:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003188:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800318c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003194:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003198:	2000      	movs	r0, #0
 800319a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800319c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80031a0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	db06      	blt.n	80031b6 <USB_EPSetStall+0x4c>
 80031a8:	b12b      	cbz	r3, 80031b6 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80031aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80031ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031b2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80031b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80031ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031be:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80031c2:	e7e9      	b.n	8003198 <USB_EPSetStall+0x2e>

080031c4 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80031c4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80031c6:	784a      	ldrb	r2, [r1, #1]
 80031c8:	2a01      	cmp	r2, #1
 80031ca:	d00e      	beq.n	80031ea <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80031d0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80031d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031d8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80031dc:	790b      	ldrb	r3, [r1, #4]
 80031de:	3b02      	subs	r3, #2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d915      	bls.n	8003212 <USB_EPClearStall+0x4e>
}
 80031e6:	2000      	movs	r0, #0
 80031e8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80031ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80031f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031f6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80031fa:	790b      	ldrb	r3, [r1, #4]
 80031fc:	3b02      	subs	r3, #2
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d8f0      	bhi.n	80031e6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003204:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003210:	e7e9      	b.n	80031e6 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003212:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800321e:	e7e2      	b.n	80031e6 <USB_EPClearStall+0x22>

08003220 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003220:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003224:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003228:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800322c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003230:	0109      	lsls	r1, r1, #4
 8003232:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003236:	430b      	orrs	r3, r1
 8003238:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 800323c:	2000      	movs	r0, #0
 800323e:	4770      	bx	lr

08003240 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003240:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003244:	f023 0303 	bic.w	r3, r3, #3
 8003248:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800324c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003258:	2000      	movs	r0, #0
 800325a:	4770      	bx	lr

0800325c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800325c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003260:	f023 0303 	bic.w	r3, r3, #3
 8003264:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003268:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003274:	2000      	movs	r0, #0
 8003276:	4770      	bx	lr

08003278 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003278:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800327a:	6980      	ldr	r0, [r0, #24]
}
 800327c:	4010      	ands	r0, r2
 800327e:	4770      	bx	lr

08003280 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003280:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003284:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003288:	69c0      	ldr	r0, [r0, #28]
 800328a:	4018      	ands	r0, r3
}
 800328c:	0c00      	lsrs	r0, r0, #16
 800328e:	4770      	bx	lr

08003290 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003290:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003294:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003298:	69c0      	ldr	r0, [r0, #28]
 800329a:	4018      	ands	r0, r3
}
 800329c:	b280      	uxth	r0, r0
 800329e:	4770      	bx	lr

080032a0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80032a0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80032a4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80032a8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80032ac:	6940      	ldr	r0, [r0, #20]
}
 80032ae:	4010      	ands	r0, r2
 80032b0:	4770      	bx	lr

080032b2 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80032b2:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80032b6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80032ba:	f001 0c0f 	and.w	ip, r1, #15
 80032be:	fa23 f30c 	lsr.w	r3, r3, ip
 80032c2:	01db      	lsls	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80032c8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80032cc:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80032d0:	6880      	ldr	r0, [r0, #8]
}
 80032d2:	4018      	ands	r0, r3
 80032d4:	4770      	bx	lr

080032d6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80032d6:	6940      	ldr	r0, [r0, #20]
}
 80032d8:	f000 0001 	and.w	r0, r0, #1
 80032dc:	4770      	bx	lr

080032de <USB_SetCurrentMode>:
{
 80032de:	b538      	push	{r3, r4, r5, lr}
 80032e0:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032e2:	68c3      	ldr	r3, [r0, #12]
 80032e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80032e8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80032ea:	2901      	cmp	r1, #1
 80032ec:	d013      	beq.n	8003316 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80032ee:	bb19      	cbnz	r1, 8003338 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032f0:	68c3      	ldr	r3, [r0, #12]
 80032f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032f6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80032f8:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80032fa:	200a      	movs	r0, #10
 80032fc:	f7fd fae2 	bl	80008c4 <HAL_Delay>
      ms += 10U;
 8003300:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff ffe7 	bl	80032d6 <USB_GetMode>
 8003308:	b108      	cbz	r0, 800330e <USB_SetCurrentMode+0x30>
 800330a:	2cc7      	cmp	r4, #199	@ 0xc7
 800330c:	d9f5      	bls.n	80032fa <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800330e:	2cc8      	cmp	r4, #200	@ 0xc8
 8003310:	d014      	beq.n	800333c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003312:	2000      	movs	r0, #0
}
 8003314:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003316:	68c3      	ldr	r3, [r0, #12]
 8003318:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800331c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800331e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003320:	200a      	movs	r0, #10
 8003322:	f7fd facf 	bl	80008c4 <HAL_Delay>
      ms += 10U;
 8003326:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff ffd4 	bl	80032d6 <USB_GetMode>
 800332e:	2801      	cmp	r0, #1
 8003330:	d0ed      	beq.n	800330e <USB_SetCurrentMode+0x30>
 8003332:	2cc7      	cmp	r4, #199	@ 0xc7
 8003334:	d9f4      	bls.n	8003320 <USB_SetCurrentMode+0x42>
 8003336:	e7ea      	b.n	800330e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003338:	2001      	movs	r0, #1
 800333a:	e7eb      	b.n	8003314 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
 800333e:	e7e9      	b.n	8003314 <USB_SetCurrentMode+0x36>

08003340 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003340:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003344:	f36f 030a 	bfc	r3, #0, #11
 8003348:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800334c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003354:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003358:	2000      	movs	r0, #0
 800335a:	4770      	bx	lr

0800335c <USB_EP0_OutStart>:
{
 800335c:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800335e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003360:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <USB_EP0_OutStart+0x5c>)
 8003362:	429c      	cmp	r4, r3
 8003364:	d903      	bls.n	800336e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003366:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800336a:	2b00      	cmp	r3, #0
 800336c:	db16      	blt.n	800339c <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800336e:	2400      	movs	r4, #0
 8003370:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003374:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003378:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800337c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003380:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003384:	f044 0418 	orr.w	r4, r4, #24
 8003388:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800338c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003390:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003394:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8003398:	2901      	cmp	r1, #1
 800339a:	d003      	beq.n	80033a4 <USB_EP0_OutStart+0x48>
}
 800339c:	2000      	movs	r0, #0
 800339e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033a2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80033a4:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80033a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80033ac:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80033b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80033b4:	e7f2      	b.n	800339c <USB_EP0_OutStart+0x40>
 80033b6:	bf00      	nop
 80033b8:	4f54300a 	.word	0x4f54300a

080033bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033bc:	4a03      	ldr	r2, [pc, #12]	@ (80033cc <SystemInit+0x10>)
 80033be:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80033c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80033d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80033d2:	2200      	movs	r2, #0
 80033d4:	490f      	ldr	r1, [pc, #60]	@ (8003414 <MX_USB_DEVICE_Init+0x44>)
 80033d6:	4810      	ldr	r0, [pc, #64]	@ (8003418 <MX_USB_DEVICE_Init+0x48>)
 80033d8:	f000 fc04 	bl	8003be4 <USBD_Init>
 80033dc:	b970      	cbnz	r0, 80033fc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80033de:	490f      	ldr	r1, [pc, #60]	@ (800341c <MX_USB_DEVICE_Init+0x4c>)
 80033e0:	480d      	ldr	r0, [pc, #52]	@ (8003418 <MX_USB_DEVICE_Init+0x48>)
 80033e2:	f000 fc16 	bl	8003c12 <USBD_RegisterClass>
 80033e6:	b960      	cbnz	r0, 8003402 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80033e8:	490d      	ldr	r1, [pc, #52]	@ (8003420 <MX_USB_DEVICE_Init+0x50>)
 80033ea:	480b      	ldr	r0, [pc, #44]	@ (8003418 <MX_USB_DEVICE_Init+0x48>)
 80033ec:	f000 fa39 	bl	8003862 <USBD_CDC_RegisterInterface>
 80033f0:	b950      	cbnz	r0, 8003408 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80033f2:	4809      	ldr	r0, [pc, #36]	@ (8003418 <MX_USB_DEVICE_Init+0x48>)
 80033f4:	f000 fc2d 	bl	8003c52 <USBD_Start>
 80033f8:	b948      	cbnz	r0, 800340e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80033fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80033fc:	f7fd f876 	bl	80004ec <Error_Handler>
 8003400:	e7ed      	b.n	80033de <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003402:	f7fd f873 	bl	80004ec <Error_Handler>
 8003406:	e7ef      	b.n	80033e8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003408:	f7fd f870 	bl	80004ec <Error_Handler>
 800340c:	e7f1      	b.n	80033f2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800340e:	f7fd f86d 	bl	80004ec <Error_Handler>
}
 8003412:	e7f2      	b.n	80033fa <MX_USB_DEVICE_Init+0x2a>
 8003414:	200000dc 	.word	0x200000dc
 8003418:	2000a3e0 	.word	0x2000a3e0
 800341c:	20000050 	.word	0x20000050
 8003420:	20000094 	.word	0x20000094

08003424 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003424:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003426:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800342a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800342e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8003432:	b18c      	cbz	r4, 8003458 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003434:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003438:	6843      	ldr	r3, [r0, #4]
 800343a:	b17b      	cbz	r3, 800345c <USBD_CDC_EP0_RxReady+0x38>
 800343c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8003440:	28ff      	cmp	r0, #255	@ 0xff
 8003442:	d00d      	beq.n	8003460 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800344a:	4621      	mov	r1, r4
 800344c:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800344e:	23ff      	movs	r3, #255	@ 0xff
 8003450:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8003454:	2000      	movs	r0, #0
}
 8003456:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8003458:	2003      	movs	r0, #3
 800345a:	e7fc      	b.n	8003456 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 800345c:	2000      	movs	r0, #0
 800345e:	e7fa      	b.n	8003456 <USBD_CDC_EP0_RxReady+0x32>
 8003460:	2000      	movs	r0, #0
 8003462:	e7f8      	b.n	8003456 <USBD_CDC_EP0_RxReady+0x32>

08003464 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003464:	230a      	movs	r3, #10
 8003466:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003468:	4800      	ldr	r0, [pc, #0]	@ (800346c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800346a:	4770      	bx	lr
 800346c:	20000088 	.word	0x20000088

08003470 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003474:	4f0f      	ldr	r7, [pc, #60]	@ (80034b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003476:	2182      	movs	r1, #130	@ 0x82
 8003478:	4638      	mov	r0, r7
 800347a:	f000 fda2 	bl	8003fc2 <USBD_GetEpDesc>
 800347e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003480:	2101      	movs	r1, #1
 8003482:	4638      	mov	r0, r7
 8003484:	f000 fd9d 	bl	8003fc2 <USBD_GetEpDesc>
 8003488:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800348a:	2181      	movs	r1, #129	@ 0x81
 800348c:	4638      	mov	r0, r7
 800348e:	f000 fd98 	bl	8003fc2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003492:	b10d      	cbz	r5, 8003498 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003494:	2210      	movs	r2, #16
 8003496:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003498:	b11c      	cbz	r4, 80034a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800349a:	2240      	movs	r2, #64	@ 0x40
 800349c:	7122      	strb	r2, [r4, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80034a2:	b118      	cbz	r0, 80034ac <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80034a4:	2240      	movs	r2, #64	@ 0x40
 80034a6:	7102      	strb	r2, [r0, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80034ac:	2343      	movs	r3, #67	@ 0x43
 80034ae:	8033      	strh	r3, [r6, #0]
}
 80034b0:	4800      	ldr	r0, [pc, #0]	@ (80034b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80034b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <USBD_CDC_GetFSCfgDesc>:
{
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80034bc:	4f0f      	ldr	r7, [pc, #60]	@ (80034fc <USBD_CDC_GetFSCfgDesc+0x44>)
 80034be:	2182      	movs	r1, #130	@ 0x82
 80034c0:	4638      	mov	r0, r7
 80034c2:	f000 fd7e 	bl	8003fc2 <USBD_GetEpDesc>
 80034c6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80034c8:	2101      	movs	r1, #1
 80034ca:	4638      	mov	r0, r7
 80034cc:	f000 fd79 	bl	8003fc2 <USBD_GetEpDesc>
 80034d0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80034d2:	2181      	movs	r1, #129	@ 0x81
 80034d4:	4638      	mov	r0, r7
 80034d6:	f000 fd74 	bl	8003fc2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80034da:	b10d      	cbz	r5, 80034e0 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80034dc:	2210      	movs	r2, #16
 80034de:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80034e0:	b11c      	cbz	r4, 80034ea <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80034e2:	2240      	movs	r2, #64	@ 0x40
 80034e4:	7122      	strb	r2, [r4, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80034ea:	b118      	cbz	r0, 80034f4 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80034ec:	2240      	movs	r2, #64	@ 0x40
 80034ee:	7102      	strb	r2, [r0, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80034f4:	2343      	movs	r3, #67	@ 0x43
 80034f6:	8033      	strh	r3, [r6, #0]
}
 80034f8:	4800      	ldr	r0, [pc, #0]	@ (80034fc <USBD_CDC_GetFSCfgDesc+0x44>)
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034fc:	2000000c 	.word	0x2000000c

08003500 <USBD_CDC_GetHSCfgDesc>:
{
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003504:	4f0f      	ldr	r7, [pc, #60]	@ (8003544 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003506:	2182      	movs	r1, #130	@ 0x82
 8003508:	4638      	mov	r0, r7
 800350a:	f000 fd5a 	bl	8003fc2 <USBD_GetEpDesc>
 800350e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003510:	2101      	movs	r1, #1
 8003512:	4638      	mov	r0, r7
 8003514:	f000 fd55 	bl	8003fc2 <USBD_GetEpDesc>
 8003518:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800351a:	2181      	movs	r1, #129	@ 0x81
 800351c:	4638      	mov	r0, r7
 800351e:	f000 fd50 	bl	8003fc2 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003522:	b10d      	cbz	r5, 8003528 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8003524:	2210      	movs	r2, #16
 8003526:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003528:	b11c      	cbz	r4, 8003532 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800352a:	2200      	movs	r2, #0
 800352c:	7122      	strb	r2, [r4, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003532:	b118      	cbz	r0, 800353c <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003534:	2200      	movs	r2, #0
 8003536:	7102      	strb	r2, [r0, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800353c:	2343      	movs	r3, #67	@ 0x43
 800353e:	8033      	strh	r3, [r6, #0]
}
 8003540:	4800      	ldr	r0, [pc, #0]	@ (8003544 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003544:	2000000c 	.word	0x2000000c

08003548 <USBD_CDC_DataOut>:
{
 8003548:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800354a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800354e:	33b0      	adds	r3, #176	@ 0xb0
 8003550:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003554:	b195      	cbz	r5, 800357c <USBD_CDC_DataOut+0x34>
 8003556:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003558:	f000 faec 	bl	8003b34 <USBD_LL_GetRxDataSize>
 800355c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003560:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003564:	33b0      	adds	r3, #176	@ 0xb0
 8003566:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8003572:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8003576:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003578:	2000      	movs	r0, #0
}
 800357a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800357c:	2003      	movs	r0, #3
 800357e:	e7fc      	b.n	800357a <USBD_CDC_DataOut+0x32>

08003580 <USBD_CDC_DataIn>:
{
 8003580:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8003582:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003586:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800358a:	33b0      	adds	r3, #176	@ 0xb0
 800358c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8003590:	b384      	cbz	r4, 80035f4 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003592:	f001 030f 	and.w	r3, r1, #15
 8003596:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800359a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800359e:	6952      	ldr	r2, [r2, #20]
 80035a0:	b14a      	cbz	r2, 80035b6 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80035a2:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 80035a6:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 80035aa:	69ed      	ldr	r5, [r5, #28]
 80035ac:	fbb2 fcf5 	udiv	ip, r2, r5
 80035b0:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80035b4:	b192      	cbz	r2, 80035dc <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80035bc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80035c0:	33b0      	adds	r3, #176	@ 0xb0
 80035c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80035c6:	6843      	ldr	r3, [r0, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	b1ab      	cbz	r3, 80035f8 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80035cc:	460a      	mov	r2, r1
 80035ce:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 80035d2:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 80035d6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80035d8:	2000      	movs	r0, #0
}
 80035da:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80035dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80035e4:	2400      	movs	r4, #0
 80035e6:	615c      	str	r4, [r3, #20]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80035e8:	4623      	mov	r3, r4
 80035ea:	4622      	mov	r2, r4
 80035ec:	f000 faea 	bl	8003bc4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80035f0:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80035f2:	e7f2      	b.n	80035da <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 80035f4:	2003      	movs	r0, #3
 80035f6:	e7f0      	b.n	80035da <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 80035f8:	2000      	movs	r0, #0
 80035fa:	e7ee      	b.n	80035da <USBD_CDC_DataIn+0x5a>

080035fc <USBD_CDC_Setup>:
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003600:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003604:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003608:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 800360c:	2200      	movs	r2, #0
 800360e:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8003612:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8003616:	2f00      	cmp	r7, #0
 8003618:	d078      	beq.n	800370c <USBD_CDC_Setup+0x110>
 800361a:	4604      	mov	r4, r0
 800361c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800361e:	7809      	ldrb	r1, [r1, #0]
 8003620:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8003624:	d034      	beq.n	8003690 <USBD_CDC_Setup+0x94>
 8003626:	2e20      	cmp	r6, #32
 8003628:	d169      	bne.n	80036fe <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 800362a:	88ea      	ldrh	r2, [r5, #6]
 800362c:	b32a      	cbz	r2, 800367a <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 800362e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003632:	d10e      	bne.n	8003652 <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 8003634:	786b      	ldrb	r3, [r5, #1]
 8003636:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800363a:	88ea      	ldrh	r2, [r5, #6]
 800363c:	2a3f      	cmp	r2, #63	@ 0x3f
 800363e:	d81a      	bhi.n	8003676 <USBD_CDC_Setup+0x7a>
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8003646:	4639      	mov	r1, r7
 8003648:	4620      	mov	r0, r4
 800364a:	f001 f925 	bl	8004898 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800364e:	2600      	movs	r6, #0
 8003650:	e059      	b.n	8003706 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003652:	33b0      	adds	r3, #176	@ 0xb0
 8003654:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4639      	mov	r1, r7
 800365e:	7868      	ldrb	r0, [r5, #1]
 8003660:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8003662:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8003664:	2a07      	cmp	r2, #7
 8003666:	bf28      	it	cs
 8003668:	2207      	movcs	r2, #7
 800366a:	4639      	mov	r1, r7
 800366c:	4620      	mov	r0, r4
 800366e:	f001 f8fd 	bl	800486c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003672:	2600      	movs	r6, #0
 8003674:	e047      	b.n	8003706 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003676:	2240      	movs	r2, #64	@ 0x40
 8003678:	e7e3      	b.n	8003642 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800367a:	33b0      	adds	r3, #176	@ 0xb0
 800367c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	4629      	mov	r1, r5
 8003688:	7868      	ldrb	r0, [r5, #1]
 800368a:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800368c:	2600      	movs	r6, #0
 800368e:	e03a      	b.n	8003706 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8003690:	786f      	ldrb	r7, [r5, #1]
 8003692:	2f0b      	cmp	r7, #11
 8003694:	d82e      	bhi.n	80036f4 <USBD_CDC_Setup+0xf8>
 8003696:	e8df f007 	tbb	[pc, r7]
 800369a:	3606      	.short	0x3606
 800369c:	2d2d2d2d 	.word	0x2d2d2d2d
 80036a0:	2d2d2d2d 	.word	0x2d2d2d2d
 80036a4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036a6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d004      	beq.n	80036b8 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 80036ae:	4629      	mov	r1, r5
 80036b0:	f000 fcc4 	bl	800403c <USBD_CtlError>
            ret = USBD_FAIL;
 80036b4:	2603      	movs	r6, #3
 80036b6:	e026      	b.n	8003706 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80036b8:	2202      	movs	r2, #2
 80036ba:	a901      	add	r1, sp, #4
 80036bc:	f001 f8d6 	bl	800486c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80036c0:	463e      	mov	r6, r7
 80036c2:	e020      	b.n	8003706 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d004      	beq.n	80036d6 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 80036cc:	4629      	mov	r1, r5
 80036ce:	f000 fcb5 	bl	800403c <USBD_CtlError>
            ret = USBD_FAIL;
 80036d2:	2603      	movs	r6, #3
 80036d4:	e017      	b.n	8003706 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80036d6:	2201      	movs	r2, #1
 80036d8:	f10d 0107 	add.w	r1, sp, #7
 80036dc:	f001 f8c6 	bl	800486c <USBD_CtlSendData>
 80036e0:	e011      	b.n	8003706 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80036e2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d00d      	beq.n	8003706 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 80036ea:	4629      	mov	r1, r5
 80036ec:	f000 fca6 	bl	800403c <USBD_CtlError>
            ret = USBD_FAIL;
 80036f0:	2603      	movs	r6, #3
 80036f2:	e008      	b.n	8003706 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 80036f4:	4629      	mov	r1, r5
 80036f6:	f000 fca1 	bl	800403c <USBD_CtlError>
          ret = USBD_FAIL;
 80036fa:	2603      	movs	r6, #3
          break;
 80036fc:	e003      	b.n	8003706 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 80036fe:	4629      	mov	r1, r5
 8003700:	f000 fc9c 	bl	800403c <USBD_CtlError>
      ret = USBD_FAIL;
 8003704:	2603      	movs	r6, #3
}
 8003706:	4630      	mov	r0, r6
 8003708:	b003      	add	sp, #12
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800370c:	2603      	movs	r6, #3
 800370e:	e7fa      	b.n	8003706 <USBD_CDC_Setup+0x10a>

08003710 <USBD_CDC_DeInit>:
{
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003714:	2181      	movs	r1, #129	@ 0x81
 8003716:	f000 fa35 	bl	8003b84 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800371a:	2500      	movs	r5, #0
 800371c:	f884 5037 	strb.w	r5, [r4, #55]	@ 0x37
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8003720:	2101      	movs	r1, #1
 8003722:	4620      	mov	r0, r4
 8003724:	f000 fa2e 	bl	8003b84 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8003728:	f884 5177 	strb.w	r5, [r4, #375]	@ 0x177
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800372c:	2182      	movs	r1, #130	@ 0x82
 800372e:	4620      	mov	r0, r4
 8003730:	f000 fa28 	bl	8003b84 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8003734:	f884 504b 	strb.w	r5, [r4, #75]	@ 0x4b
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8003738:	6465      	str	r5, [r4, #68]	@ 0x44
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800373a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800373e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003746:	b19a      	cbz	r2, 8003770 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003748:	33b0      	adds	r3, #176	@ 0xb0
 800374a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8003754:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003758:	33b0      	adds	r3, #176	@ 0xb0
 800375a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800375e:	f000 f9f3 	bl	8003b48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003762:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003766:	33b0      	adds	r3, #176	@ 0xb0
 8003768:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800376c:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8003770:	2000      	movs	r0, #0
 8003772:	bd38      	pop	{r3, r4, r5, pc}

08003774 <USBD_CDC_Init>:
{
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003778:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800377c:	f000 f9e0 	bl	8003b40 <USBD_static_malloc>
  if (hcdc == NULL)
 8003780:	2800      	cmp	r0, #0
 8003782:	d049      	beq.n	8003818 <USBD_CDC_Init+0xa4>
 8003784:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003786:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800378a:	2100      	movs	r1, #0
 800378c:	f001 f8dd 	bl	800494a <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003790:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003794:	33b0      	adds	r3, #176	@ 0xb0
 8003796:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800379a:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800379e:	7c23      	ldrb	r3, [r4, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d141      	bne.n	8003828 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80037a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037a8:	2202      	movs	r2, #2
 80037aa:	2181      	movs	r1, #129	@ 0x81
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f9de 	bl	8003b6e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80037b2:	2601      	movs	r6, #1
 80037b4:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80037b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037bc:	2202      	movs	r2, #2
 80037be:	4631      	mov	r1, r6
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f9d4 	bl	8003b6e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80037c6:	f884 6177 	strb.w	r6, [r4, #375]	@ 0x177
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80037ca:	2310      	movs	r3, #16
 80037cc:	6463      	str	r3, [r4, #68]	@ 0x44
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80037ce:	2308      	movs	r3, #8
 80037d0:	2203      	movs	r2, #3
 80037d2:	2182      	movs	r1, #130	@ 0x82
 80037d4:	4620      	mov	r0, r4
 80037d6:	f000 f9ca 	bl	8003b6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80037da:	2301      	movs	r3, #1
 80037dc:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
  hcdc->RxBuffer = NULL;
 80037e0:	2600      	movs	r6, #0
 80037e2:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80037e6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80037ea:	33b0      	adds	r3, #176	@ 0xb0
 80037ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4798      	blx	r3
  hcdc->TxState = 0U;
 80037f6:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 80037fa:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 80037fe:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8003802:	b362      	cbz	r2, 800385e <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003804:	7c25      	ldrb	r5, [r4, #16]
 8003806:	bb1d      	cbnz	r5, 8003850 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800380c:	2101      	movs	r1, #1
 800380e:	4620      	mov	r0, r4
 8003810:	f000 f9e0 	bl	8003bd4 <USBD_LL_PrepareReceive>
}
 8003814:	4628      	mov	r0, r5
 8003816:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003818:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800381c:	33b0      	adds	r3, #176	@ 0xb0
 800381e:	2200      	movs	r2, #0
 8003820:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003824:	2502      	movs	r5, #2
 8003826:	e7f5      	b.n	8003814 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003828:	2340      	movs	r3, #64	@ 0x40
 800382a:	2202      	movs	r2, #2
 800382c:	2181      	movs	r1, #129	@ 0x81
 800382e:	4620      	mov	r0, r4
 8003830:	f000 f99d 	bl	8003b6e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003834:	2601      	movs	r6, #1
 8003836:	f884 6037 	strb.w	r6, [r4, #55]	@ 0x37
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800383a:	2340      	movs	r3, #64	@ 0x40
 800383c:	2202      	movs	r2, #2
 800383e:	4631      	mov	r1, r6
 8003840:	4620      	mov	r0, r4
 8003842:	f000 f994 	bl	8003b6e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003846:	f884 6177 	strb.w	r6, [r4, #375]	@ 0x177
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800384a:	2310      	movs	r3, #16
 800384c:	6463      	str	r3, [r4, #68]	@ 0x44
 800384e:	e7be      	b.n	80037ce <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003850:	2340      	movs	r3, #64	@ 0x40
 8003852:	2101      	movs	r1, #1
 8003854:	4620      	mov	r0, r4
 8003856:	f000 f9bd 	bl	8003bd4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800385a:	2500      	movs	r5, #0
 800385c:	e7da      	b.n	8003814 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 800385e:	2502      	movs	r5, #2
 8003860:	e7d8      	b.n	8003814 <USBD_CDC_Init+0xa0>

08003862 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8003862:	b139      	cbz	r1, 8003874 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8003864:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003868:	33b0      	adds	r3, #176	@ 0xb0
 800386a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800386e:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8003870:	2000      	movs	r0, #0
 8003872:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003874:	2003      	movs	r0, #3
}
 8003876:	4770      	bx	lr

08003878 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003878:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800387c:	33b0      	adds	r3, #176	@ 0xb0
 800387e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8003882:	b12b      	cbz	r3, 8003890 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8003884:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8003888:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800388c:	2000      	movs	r0, #0
 800388e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003890:	2003      	movs	r0, #3
}
 8003892:	4770      	bx	lr

08003894 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003894:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003898:	33b0      	adds	r3, #176	@ 0xb0
 800389a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800389e:	b11b      	cbz	r3, 80038a8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80038a0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80038a8:	2003      	movs	r0, #3
}
 80038aa:	4770      	bx	lr

080038ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80038ac:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80038ae:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80038b2:	33b0      	adds	r3, #176	@ 0xb0
 80038b4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80038b8:	b192      	cbz	r2, 80038e0 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80038ba:	7c04      	ldrb	r4, [r0, #16]
 80038bc:	b944      	cbnz	r4, 80038d0 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80038be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038c2:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80038c6:	2101      	movs	r1, #1
 80038c8:	f000 f984 	bl	8003bd4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80038cc:	4620      	mov	r0, r4
 80038ce:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80038d0:	2340      	movs	r3, #64	@ 0x40
 80038d2:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80038d6:	2101      	movs	r1, #1
 80038d8:	f000 f97c 	bl	8003bd4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80038dc:	2400      	movs	r4, #0
 80038de:	e7f5      	b.n	80038cc <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80038e0:	2403      	movs	r4, #3
 80038e2:	e7f3      	b.n	80038cc <USBD_CDC_ReceivePacket+0x20>

080038e4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80038e4:	2000      	movs	r0, #0
 80038e6:	4770      	bx	lr

080038e8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80038e8:	2000      	movs	r0, #0
 80038ea:	4770      	bx	lr

080038ec <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80038ec:	2000      	movs	r0, #0
 80038ee:	4770      	bx	lr

080038f0 <CDC_Receive_FS>:
{
 80038f0:	b510      	push	{r4, lr}
  CDC_ReceiveCallBack(Buf, *Len);
 80038f2:	6809      	ldr	r1, [r1, #0]
 80038f4:	f7fc fd0e 	bl	8000314 <CDC_ReceiveCallBack>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80038f8:	4c04      	ldr	r4, [pc, #16]	@ (800390c <CDC_Receive_FS+0x1c>)
 80038fa:	4905      	ldr	r1, [pc, #20]	@ (8003910 <CDC_Receive_FS+0x20>)
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7ff ffc9 	bl	8003894 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ffd2 	bl	80038ac <USBD_CDC_ReceivePacket>
}
 8003908:	2000      	movs	r0, #0
 800390a:	bd10      	pop	{r4, pc}
 800390c:	2000a3e0 	.word	0x2000a3e0
 8003910:	2000aebc 	.word	0x2000aebc

08003914 <CDC_Init_FS>:
{
 8003914:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003916:	4c06      	ldr	r4, [pc, #24]	@ (8003930 <CDC_Init_FS+0x1c>)
 8003918:	2200      	movs	r2, #0
 800391a:	4906      	ldr	r1, [pc, #24]	@ (8003934 <CDC_Init_FS+0x20>)
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff ffab 	bl	8003878 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003922:	4905      	ldr	r1, [pc, #20]	@ (8003938 <CDC_Init_FS+0x24>)
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ffb5 	bl	8003894 <USBD_CDC_SetRxBuffer>
}
 800392a:	2000      	movs	r0, #0
 800392c:	bd10      	pop	{r4, pc}
 800392e:	bf00      	nop
 8003930:	2000a3e0 	.word	0x2000a3e0
 8003934:	2000a6bc 	.word	0x2000a6bc
 8003938:	2000aebc 	.word	0x2000aebc

0800393c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800393c:	b530      	push	{r4, r5, lr}
 800393e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	2300      	movs	r3, #0
 8003942:	9303      	str	r3, [sp, #12]
 8003944:	9304      	str	r3, [sp, #16]
 8003946:	9305      	str	r3, [sp, #20]
 8003948:	9306      	str	r3, [sp, #24]
 800394a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800394c:	6803      	ldr	r3, [r0, #0]
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003952:	d001      	beq.n	8003958 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003954:	b009      	add	sp, #36	@ 0x24
 8003956:	bd30      	pop	{r4, r5, pc}
 8003958:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	2500      	movs	r5, #0
 800395c:	9501      	str	r5, [sp, #4]
 800395e:	4c17      	ldr	r4, [pc, #92]	@ (80039bc <HAL_PCD_MspInit+0x80>)
 8003960:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6323      	str	r3, [r4, #48]	@ 0x30
 8003968:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003972:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003976:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003980:	230a      	movs	r3, #10
 8003982:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	4611      	mov	r1, r2
 8003986:	480e      	ldr	r0, [pc, #56]	@ (80039c0 <HAL_PCD_MspInit+0x84>)
 8003988:	f7fd fa30 	bl	8000dec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800398c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800398e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003992:	6363      	str	r3, [r4, #52]	@ 0x34
 8003994:	9502      	str	r5, [sp, #8]
 8003996:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399c:	6463      	str	r3, [r4, #68]	@ 0x44
 800399e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80039a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a4:	9302      	str	r3, [sp, #8]
 80039a6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80039a8:	462a      	mov	r2, r5
 80039aa:	4629      	mov	r1, r5
 80039ac:	2043      	movs	r0, #67	@ 0x43
 80039ae:	f7fc fff1 	bl	8000994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80039b2:	2043      	movs	r0, #67	@ 0x43
 80039b4:	f7fc fffe 	bl	80009b4 <HAL_NVIC_EnableIRQ>
}
 80039b8:	e7cc      	b.n	8003954 <HAL_PCD_MspInit+0x18>
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000

080039c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80039c4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80039c6:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80039ca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80039ce:	f000 f956 	bl	8003c7e <USBD_LL_SetupStage>
}
 80039d2:	bd08      	pop	{r3, pc}

080039d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80039d4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80039d6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80039da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80039de:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80039e2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80039e6:	f000 fa18 	bl	8003e1a <USBD_LL_DataOutStage>
}
 80039ea:	bd08      	pop	{r3, pc}

080039ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80039ec:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80039ee:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80039f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80039fc:	f000 fa70 	bl	8003ee0 <USBD_LL_DataInStage>
}
 8003a00:	bd08      	pop	{r3, pc}

08003a02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a02:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003a04:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a08:	f000 f9b5 	bl	8003d76 <USBD_LL_SOF>
}
 8003a0c:	bd08      	pop	{r3, pc}

08003a0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003a12:	79c3      	ldrb	r3, [r0, #7]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d109      	bne.n	8003a2c <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003a1e:	f000 f98d 	bl	8003d3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003a22:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8003a26:	f000 f956 	bl	8003cd6 <USBD_LL_Reset>
}
 8003a2a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003a2c:	f7fc fd5e 	bl	80004ec <Error_Handler>
 8003a30:	e7f2      	b.n	8003a18 <HAL_PCD_ResetCallback+0xa>
	...

08003a34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a34:	b510      	push	{r4, lr}
 8003a36:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003a38:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a3c:	f000 f981 	bl	8003d42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003a4e:	7ae3      	ldrb	r3, [r4, #11]
 8003a50:	b123      	cbz	r3, 8003a5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003a52:	4a03      	ldr	r2, [pc, #12]	@ (8003a60 <HAL_PCD_SuspendCallback+0x2c>)
 8003a54:	6913      	ldr	r3, [r2, #16]
 8003a56:	f043 0306 	orr.w	r3, r3, #6
 8003a5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003a5c:	bd10      	pop	{r4, pc}
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003a66:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a6a:	f000 f978 	bl	8003d5e <USBD_LL_Resume>
}
 8003a6e:	bd08      	pop	{r3, pc}

08003a70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a70:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003a72:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a76:	f000 f9a4 	bl	8003dc2 <USBD_LL_IsoOUTIncomplete>
}
 8003a7a:	bd08      	pop	{r3, pc}

08003a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a7c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003a7e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a82:	f000 f988 	bl	8003d96 <USBD_LL_IsoINIncomplete>
}
 8003a86:	bd08      	pop	{r3, pc}

08003a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a88:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003a8a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a8e:	f000 f9ae 	bl	8003dee <USBD_LL_DevConnected>
}
 8003a92:	bd08      	pop	{r3, pc}

08003a94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003a94:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003a96:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8003a9a:	f000 f9aa 	bl	8003df2 <USBD_LL_DevDisconnected>
}
 8003a9e:	bd08      	pop	{r3, pc}

08003aa0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003aa0:	7802      	ldrb	r2, [r0, #0]
 8003aa2:	b10a      	cbz	r2, 8003aa8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4770      	bx	lr
{
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8003aac:	4815      	ldr	r0, [pc, #84]	@ (8003b04 <USBD_LL_Init+0x64>)
 8003aae:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8003ab2:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003ab6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003aba:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003abc:	2304      	movs	r3, #4
 8003abe:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003ac8:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003aca:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003acc:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ace:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003ad0:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003ad2:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ad4:	f7fd faf8 	bl	80010c8 <HAL_PCD_Init>
 8003ad8:	b980      	cbnz	r0, 8003afc <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003ada:	4c0a      	ldr	r4, [pc, #40]	@ (8003b04 <USBD_LL_Init+0x64>)
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fe f8c0 	bl	8001c64 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003ae4:	2240      	movs	r2, #64	@ 0x40
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7fe f895 	bl	8001c18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003aee:	2280      	movs	r2, #128	@ 0x80
 8003af0:	2101      	movs	r1, #1
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7fe f890 	bl	8001c18 <HAL_PCDEx_SetTxFiFo>
}
 8003af8:	2000      	movs	r0, #0
 8003afa:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003afc:	f7fc fcf6 	bl	80004ec <Error_Handler>
 8003b00:	e7eb      	b.n	8003ada <USBD_LL_Init+0x3a>
 8003b02:	bf00      	nop
 8003b04:	2000b8dc 	.word	0x2000b8dc

08003b08 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003b08:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8003b0c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003b10:	d108      	bne.n	8003b24 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003b12:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003b16:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003b1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003b1e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8003b22:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003b24:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003b28:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003b2c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003b30:	7d98      	ldrb	r0, [r3, #22]
 8003b32:	4770      	bx	lr

08003b34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b34:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003b36:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003b3a:	f7fd fcc9 	bl	80014d0 <HAL_PCD_EP_GetRxCount>
}
 8003b3e:	bd08      	pop	{r3, pc}

08003b40 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003b40:	4800      	ldr	r0, [pc, #0]	@ (8003b44 <USBD_static_malloc+0x4>)
 8003b42:	4770      	bx	lr
 8003b44:	2000b6bc 	.word	0x2000b6bc

08003b48 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003b48:	4770      	bx	lr

08003b4a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d805      	bhi.n	8003b5a <USBD_Get_USB_Status+0x10>
 8003b4e:	e8df f000 	tbb	[pc, r0]
 8003b52:	0405      	.short	0x0405
 8003b54:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8003b56:	2001      	movs	r0, #1
    break;
 8003b58:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8003b5a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003b5c:	4770      	bx	lr

08003b5e <USBD_LL_Start>:
{
 8003b5e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003b60:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003b64:	f7fd fb31 	bl	80011ca <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b68:	f7ff ffef 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003b6c:	bd08      	pop	{r3, pc}

08003b6e <USBD_LL_OpenEP>:
{
 8003b6e:	b508      	push	{r3, lr}
 8003b70:	4694      	mov	ip, r2
 8003b72:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003b74:	4663      	mov	r3, ip
 8003b76:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003b7a:	f7fd fc06 	bl	800138a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b7e:	f7ff ffe4 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <USBD_LL_CloseEP>:
{
 8003b84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003b86:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003b8a:	f7fd fc44 	bl	8001416 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b8e:	f7ff ffdc 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003b92:	bd08      	pop	{r3, pc}

08003b94 <USBD_LL_StallEP>:
{
 8003b94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003b96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003b9a:	f7fd fcc7 	bl	800152c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b9e:	f7ff ffd4 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003ba2:	bd08      	pop	{r3, pc}

08003ba4 <USBD_LL_ClearStallEP>:
{
 8003ba4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003ba6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003baa:	f7fd fd02 	bl	80015b2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bae:	f7ff ffcc 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003bb2:	bd08      	pop	{r3, pc}

08003bb4 <USBD_LL_SetUSBAddress>:
{
 8003bb4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003bb6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003bba:	f7fd fbd3 	bl	8001364 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bbe:	f7ff ffc4 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003bc2:	bd08      	pop	{r3, pc}

08003bc4 <USBD_LL_Transmit>:
{
 8003bc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003bc6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003bca:	f7fd fc8a 	bl	80014e2 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bce:	f7ff ffbc 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003bd2:	bd08      	pop	{r3, pc}

08003bd4 <USBD_LL_PrepareReceive>:
{
 8003bd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003bd6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8003bda:	f7fd fc54 	bl	8001486 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bde:	f7ff ffb4 	bl	8003b4a <USBD_Get_USB_Status>
}
 8003be2:	bd08      	pop	{r3, pc}

08003be4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003be4:	b198      	cbz	r0, 8003c0e <USBD_Init+0x2a>
{
 8003be6:	b508      	push	{r3, lr}
 8003be8:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003bea:	2000      	movs	r0, #0
 8003bec:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8003bf0:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003bf4:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003bf8:	b109      	cbz	r1, 8003bfe <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003bfa:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8003c04:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff4a 	bl	8003aa0 <USBD_LL_Init>

  return ret;
}
 8003c0c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003c0e:	2003      	movs	r0, #3
}
 8003c10:	4770      	bx	lr

08003c12 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003c12:	b510      	push	{r4, lr}
 8003c14:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003c1c:	b1b9      	cbz	r1, 8003c4e <USBD_RegisterClass+0x3c>
 8003c1e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8003c20:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003c24:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003c28:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003c2a:	b143      	cbz	r3, 8003c3e <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8003c2c:	32ae      	adds	r2, #174	@ 0xae
 8003c2e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	f10d 0006 	add.w	r0, sp, #6
 8003c38:	4798      	blx	r3
 8003c3a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8003c3e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8003c42:	3301      	adds	r3, #1
 8003c44:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8003c48:	2000      	movs	r0, #0
}
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003c4e:	2003      	movs	r0, #3
 8003c50:	e7fb      	b.n	8003c4a <USBD_RegisterClass+0x38>

08003c52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003c52:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003c54:	f7ff ff83 	bl	8003b5e <USBD_LL_Start>
}
 8003c58:	bd08      	pop	{r3, pc}

08003c5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c5a:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003c5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003c60:	b113      	cbz	r3, 8003c68 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003c66:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e7fc      	b.n	8003c66 <USBD_SetClassConfig+0xc>

08003c6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c6c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003c6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4798      	blx	r3
 8003c76:	b900      	cbnz	r0, 8003c7a <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003c78:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	e7fc      	b.n	8003c78 <USBD_ClrClassConfig+0xc>

08003c7e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003c7e:	b538      	push	{r3, r4, r5, lr}
 8003c80:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003c82:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f9c4 	bl	8004014 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003c92:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8003c96:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003c9a:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8003c9e:	f001 031f 	and.w	r3, r1, #31
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d007      	beq.n	8003cb6 <USBD_LL_SetupStage+0x38>
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d00a      	beq.n	8003cc0 <USBD_LL_SetupStage+0x42>
 8003caa:	b973      	cbnz	r3, 8003cca <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003cac:	4629      	mov	r1, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 fb84 	bl	80043bc <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fbba 	bl	8004432 <USBD_StdItfReq>
      break;
 8003cbe:	e7f9      	b.n	8003cb4 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 fbf7 	bl	80044b6 <USBD_StdEPReq>
      break;
 8003cc8:	e7f4      	b.n	8003cb4 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003cca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7ff ff60 	bl	8003b94 <USBD_LL_StallEP>
      break;
 8003cd4:	e7ee      	b.n	8003cb4 <USBD_LL_SetupStage+0x36>

08003cd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8003ce6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003ce8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8003cec:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8003cf0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003cf4:	b1e3      	cbz	r3, 8003d30 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	b1e3      	cbz	r3, 8003d34 <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4798      	blx	r3
 8003cfe:	4607      	mov	r7, r0
 8003d00:	b9d0      	cbnz	r0, 8003d38 <USBD_LL_Reset+0x62>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d02:	2340      	movs	r3, #64	@ 0x40
 8003d04:	2200      	movs	r2, #0
 8003d06:	4611      	mov	r1, r2
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7ff ff30 	bl	8003b6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d0e:	2601      	movs	r6, #1
 8003d10:	f884 6163 	strb.w	r6, [r4, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d14:	2540      	movs	r5, #64	@ 0x40
 8003d16:	f8a4 5160 	strh.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2180      	movs	r1, #128	@ 0x80
 8003d20:	4620      	mov	r0, r4
 8003d22:	f7ff ff24 	bl	8003b6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d26:	f884 6023 	strb.w	r6, [r4, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d2a:	8425      	strh	r5, [r4, #32]

  return ret;
}
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8003d30:	2700      	movs	r7, #0
 8003d32:	e7e6      	b.n	8003d02 <USBD_LL_Reset+0x2c>
 8003d34:	2700      	movs	r7, #0
 8003d36:	e7e4      	b.n	8003d02 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8003d38:	2703      	movs	r7, #3
 8003d3a:	e7e2      	b.n	8003d02 <USBD_LL_Reset+0x2c>

08003d3c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003d3c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003d3e:	2000      	movs	r0, #0
 8003d40:	4770      	bx	lr

08003d42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8003d42:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d004      	beq.n	8003d54 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8003d4a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003d54:	2304      	movs	r3, #4
 8003d56:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	4770      	bx	lr

08003d5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003d5e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d001      	beq.n	8003d6a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003d66:	2000      	movs	r0, #0
 8003d68:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003d6a:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8003d74:	e7f7      	b.n	8003d66 <USBD_LL_Resume+0x8>

08003d76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003d76:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d78:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d001      	beq.n	8003d84 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8003d80:	2000      	movs	r0, #0
 8003d82:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8003d84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f9      	beq.n	8003d80 <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f6      	beq.n	8003d80 <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8003d92:	4798      	blx	r3
 8003d94:	e7f4      	b.n	8003d80 <USBD_LL_SOF+0xa>

08003d96 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8003d96:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003d98:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003d9c:	33ae      	adds	r3, #174	@ 0xae
 8003d9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003da2:	b153      	cbz	r3, 8003dba <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003da4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003da8:	2a03      	cmp	r2, #3
 8003daa:	d001      	beq.n	8003db0 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003dac:	2000      	movs	r0, #0
}
 8003dae:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	b123      	cbz	r3, 8003dbe <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003db4:	4798      	blx	r3
  return USBD_OK;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e7f9      	b.n	8003dae <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8003dba:	2003      	movs	r0, #3
 8003dbc:	e7f7      	b.n	8003dae <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e7f5      	b.n	8003dae <USBD_LL_IsoINIncomplete+0x18>

08003dc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8003dc2:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8003dc4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003dc8:	33ae      	adds	r3, #174	@ 0xae
 8003dca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003dce:	b153      	cbz	r3, 8003de6 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003dd0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003dd4:	2a03      	cmp	r2, #3
 8003dd6:	d001      	beq.n	8003ddc <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003dd8:	2000      	movs	r0, #0
}
 8003dda:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	b123      	cbz	r3, 8003dea <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003de0:	4798      	blx	r3
  return USBD_OK;
 8003de2:	2000      	movs	r0, #0
 8003de4:	e7f9      	b.n	8003dda <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8003de6:	2003      	movs	r0, #3
 8003de8:	e7f7      	b.n	8003dda <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8003dea:	2000      	movs	r0, #0
 8003dec:	e7f5      	b.n	8003dda <USBD_LL_IsoOUTIncomplete+0x18>

08003dee <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8003dee:	2000      	movs	r0, #0
 8003df0:	4770      	bx	lr

08003df2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003df2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003dfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003dfe:	b123      	cbz	r3, 8003e0a <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	7901      	ldrb	r1, [r0, #4]
 8003e04:	4798      	blx	r3
 8003e06:	b910      	cbnz	r0, 8003e0e <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003e08:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e7fc      	b.n	8003e08 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8003e0e:	2003      	movs	r0, #3
 8003e10:	e7fa      	b.n	8003e08 <USBD_LL_DevDisconnected+0x16>

08003e12 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003e12:	2000      	movs	r0, #0
 8003e14:	4770      	bx	lr

08003e16 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003e16:	2000      	movs	r0, #0
 8003e18:	4770      	bx	lr

08003e1a <USBD_LL_DataOutStage>:
{
 8003e1a:	b538      	push	{r3, r4, r5, lr}
 8003e1c:	4604      	mov	r4, r0
  if (epnum == 0U)
 8003e1e:	460d      	mov	r5, r1
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d144      	bne.n	8003eae <USBD_LL_DataOutStage+0x94>
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003e24:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d001      	beq.n	8003e30 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8003e2c:	4608      	mov	r0, r1
}
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003e30:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8003e34:	f8b0 2160 	ldrh.w	r2, [r0, #352]	@ 0x160
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d809      	bhi.n	8003e50 <USBD_LL_DataOutStage+0x36>
        switch (pdev->request.bmRequest & 0x1FU)
 8003e3c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d012      	beq.n	8003e6e <USBD_LL_DataOutStage+0x54>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d01e      	beq.n	8003e8a <USBD_LL_DataOutStage+0x70>
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	e013      	b.n	8003e78 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
        pep->pbuffer += pep->maxpacket;
 8003e56:	f8d0 1164 	ldr.w	r1, [r0, #356]	@ 0x164
 8003e5a:	4411      	add	r1, r2
 8003e5c:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8003e60:	429a      	cmp	r2, r3
 8003e62:	bf38      	it	cc
 8003e64:	461a      	movcc	r2, r3
 8003e66:	f000 fd28 	bl	80048ba <USBD_CtlContinueRx>
  return USBD_OK;
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	e7df      	b.n	8003e2e <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8003e6e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003e72:	f7ff ffce 	bl	8003e12 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8003e76:	b918      	cbnz	r0, 8003e80 <USBD_LL_DataOutStage+0x66>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e78:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d009      	beq.n	8003e94 <USBD_LL_DataOutStage+0x7a>
        (void)USBD_CtlSendStatus(pdev);
 8003e80:	4620      	mov	r0, r4
 8003e82:	f000 fd22 	bl	80048ca <USBD_CtlSendStatus>
  return USBD_OK;
 8003e86:	4628      	mov	r0, r5
 8003e88:	e7d1      	b.n	8003e2e <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8003e8a:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003e8e:	f7ff ffc2 	bl	8003e16 <USBD_CoreFindEP>
            break;
 8003e92:	e7f0      	b.n	8003e76 <USBD_LL_DataOutStage+0x5c>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8003e94:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003e98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	d0ee      	beq.n	8003e80 <USBD_LL_DataOutStage+0x66>
              pdev->classId = idx;
 8003ea2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4798      	blx	r3
 8003eac:	e7e8      	b.n	8003e80 <USBD_LL_DataOutStage+0x66>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8003eae:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003eb2:	f7ff ffb0 	bl	8003e16 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003eb6:	b988      	cbnz	r0, 8003edc <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003eb8:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d1b6      	bne.n	8003e2e <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 8003ec0:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003ec4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d0af      	beq.n	8003e2e <USBD_LL_DataOutStage+0x14>
          pdev->classId = idx;
 8003ece:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	4798      	blx	r3
      if (ret != USBD_OK)
 8003eda:	e7a8      	b.n	8003e2e <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8003edc:	2000      	movs	r0, #0
 8003ede:	e7a6      	b.n	8003e2e <USBD_LL_DataOutStage+0x14>

08003ee0 <USBD_LL_DataInStage>:
{
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4604      	mov	r4, r0
  if (epnum == 0U)
 8003ee4:	460d      	mov	r5, r1
 8003ee6:	2900      	cmp	r1, #0
 8003ee8:	d14b      	bne.n	8003f82 <USBD_LL_DataInStage+0xa2>
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003eea:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d007      	beq.n	8003f02 <USBD_LL_DataInStage+0x22>
    if (pdev->dev_test_mode != 0U)
 8003ef2:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8003ef6:	b118      	cbz	r0, 8003f00 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8003efe:	4628      	mov	r0, r5
}
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003f02:	6982      	ldr	r2, [r0, #24]
 8003f04:	8c03      	ldrh	r3, [r0, #32]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d80d      	bhi.n	8003f26 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d019      	beq.n	8003f42 <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f0e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d029      	beq.n	8003f6a <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7ff fe3b 	bl	8003b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 fcde 	bl	80048e0 <USBD_CtlReceiveStatus>
 8003f24:	e7e5      	b.n	8003ef2 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	6182      	str	r2, [r0, #24]
        pep->pbuffer += pep->maxpacket;
 8003f2a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003f2c:	4419      	add	r1, r3
 8003f2e:	6241      	str	r1, [r0, #36]	@ 0x24
        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8003f30:	f000 fcaa 	bl	8004888 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003f34:	2300      	movs	r3, #0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fe4a 	bl	8003bd4 <USBD_LL_PrepareReceive>
 8003f40:	e7d7      	b.n	8003ef2 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 8003f42:	6942      	ldr	r2, [r0, #20]
        if ((pep->maxpacket == pep->rem_length) &&
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d8e2      	bhi.n	8003f0e <USBD_LL_DataInStage+0x2e>
            (pep->total_length < pdev->ep0_data_len))
 8003f48:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d2de      	bcs.n	8003f0e <USBD_LL_DataInStage+0x2e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003f50:	2200      	movs	r2, #0
 8003f52:	4611      	mov	r1, r2
 8003f54:	f000 fc98 	bl	8004888 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003f5e:	460b      	mov	r3, r1
 8003f60:	460a      	mov	r2, r1
 8003f62:	4620      	mov	r0, r4
 8003f64:	f7ff fe36 	bl	8003bd4 <USBD_LL_PrepareReceive>
 8003f68:	e7c3      	b.n	8003ef2 <USBD_LL_DataInStage+0x12>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003f6a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d0d0      	beq.n	8003f16 <USBD_LL_DataInStage+0x36>
              pdev->classId = 0U;
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	4798      	blx	r3
 8003f80:	e7c9      	b.n	8003f16 <USBD_LL_DataInStage+0x36>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8003f82:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003f86:	f7ff ff46 	bl	8003e16 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003f8a:	b988      	cbnz	r0, 8003fb0 <USBD_LL_DataInStage+0xd0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f8c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d1b5      	bne.n	8003f00 <USBD_LL_DataInStage+0x20>
        if (pdev->pClass[idx]->DataIn != NULL)
 8003f94:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003f98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	d0ae      	beq.n	8003f00 <USBD_LL_DataInStage+0x20>
          pdev->classId = idx;
 8003fa2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4620      	mov	r0, r4
 8003fac:	4798      	blx	r3
          if (ret != USBD_OK)
 8003fae:	e7a7      	b.n	8003f00 <USBD_LL_DataInStage+0x20>
  return USBD_OK;
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7a5      	b.n	8003f00 <USBD_LL_DataInStage+0x20>

08003fb4 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8003fb4:	880b      	ldrh	r3, [r1, #0]
 8003fb6:	7802      	ldrb	r2, [r0, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8003fbc:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8003fbe:	4418      	add	r0, r3
 8003fc0:	4770      	bx	lr

08003fc2 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8003fc2:	8842      	ldrh	r2, [r0, #2]
 8003fc4:	7803      	ldrb	r3, [r0, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d918      	bls.n	8003ffc <USBD_GetEpDesc+0x3a>
{
 8003fca:	b530      	push	{r4, r5, lr}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8003fd2:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8003fd6:	8863      	ldrh	r3, [r4, #2]
 8003fd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20a      	bcs.n	8003ff6 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8003fe0:	f10d 0106 	add.w	r1, sp, #6
 8003fe4:	f7ff ffe6 	bl	8003fb4 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8003fe8:	7843      	ldrb	r3, [r0, #1]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d1f3      	bne.n	8003fd6 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8003fee:	7883      	ldrb	r3, [r0, #2]
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	d1f0      	bne.n	8003fd6 <USBD_GetEpDesc+0x14>
 8003ff4:	e000      	b.n	8003ff8 <USBD_GetEpDesc+0x36>
 8003ff6:	2000      	movs	r0, #0
}
 8003ff8:	b003      	add	sp, #12
 8003ffa:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8003ffc:	2000      	movs	r0, #0
}
 8003ffe:	4770      	bx	lr

08004000 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004000:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004002:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004004:	e002      	b.n	800400c <USBD_GetLen+0xc>
  {
    len++;
 8004006:	3001      	adds	r0, #1
 8004008:	b2c0      	uxtb	r0, r0
    pbuff++;
 800400a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	2a00      	cmp	r2, #0
 8004010:	d1f9      	bne.n	8004006 <USBD_GetLen+0x6>
  }

  return len;
}
 8004012:	4770      	bx	lr

08004014 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004014:	780b      	ldrb	r3, [r1, #0]
 8004016:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004018:	784b      	ldrb	r3, [r1, #1]
 800401a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800401c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800401e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004020:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004024:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004026:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004028:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800402a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800402e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004030:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8004032:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004038:	80c3      	strh	r3, [r0, #6]
}
 800403a:	4770      	bx	lr

0800403c <USBD_CtlError>:
{
 800403c:	b510      	push	{r4, lr}
 800403e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004040:	2180      	movs	r1, #128	@ 0x80
 8004042:	f7ff fda7 	bl	8003b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004046:	2100      	movs	r1, #0
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff fda3 	bl	8003b94 <USBD_LL_StallEP>
}
 800404e:	bd10      	pop	{r4, pc}

08004050 <USBD_GetDescriptor>:
{
 8004050:	b530      	push	{r4, r5, lr}
 8004052:	b083      	sub	sp, #12
 8004054:	4604      	mov	r4, r0
 8004056:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800405e:	884a      	ldrh	r2, [r1, #2]
 8004060:	0a13      	lsrs	r3, r2, #8
 8004062:	3b01      	subs	r3, #1
 8004064:	2b06      	cmp	r3, #6
 8004066:	f200 80aa 	bhi.w	80041be <USBD_GetDescriptor+0x16e>
 800406a:	e8df f003 	tbb	[pc, r3]
 800406e:	1e04      	.short	0x1e04
 8004070:	8ca8a832 	.word	0x8ca8a832
 8004074:	99          	.byte	0x99
 8004075:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004076:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f10d 0106 	add.w	r1, sp, #6
 8004080:	7c00      	ldrb	r0, [r0, #16]
 8004082:	4798      	blx	r3
  if (req->wLength != 0U)
 8004084:	88ea      	ldrh	r2, [r5, #6]
 8004086:	2a00      	cmp	r2, #0
 8004088:	f000 80a3 	beq.w	80041d2 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800408c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8099 	beq.w	80041c8 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004096:	429a      	cmp	r2, r3
 8004098:	bf28      	it	cs
 800409a:	461a      	movcs	r2, r3
 800409c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80040a0:	4601      	mov	r1, r0
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fbe2 	bl	800486c <USBD_CtlSendData>
 80040a8:	e08c      	b.n	80041c4 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040aa:	7c03      	ldrb	r3, [r0, #16]
 80040ac:	b943      	cbnz	r3, 80040c0 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80040ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	f10d 0006 	add.w	r0, sp, #6
 80040b8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040ba:	2302      	movs	r3, #2
 80040bc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80040be:	e7e1      	b.n	8004084 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80040c0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	f10d 0006 	add.w	r0, sp, #6
 80040ca:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040cc:	2302      	movs	r3, #2
 80040ce:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80040d0:	e7d8      	b.n	8004084 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	2a05      	cmp	r2, #5
 80040d6:	d852      	bhi.n	800417e <USBD_GetDescriptor+0x12e>
 80040d8:	e8df f002 	tbb	[pc, r2]
 80040dc:	2a1d1003 	.word	0x2a1d1003
 80040e0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80040e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	b123      	cbz	r3, 80040f4 <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80040ea:	f10d 0106 	add.w	r1, sp, #6
 80040ee:	7c00      	ldrb	r0, [r0, #16]
 80040f0:	4798      	blx	r3
  if (err != 0U)
 80040f2:	e7c7      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7ff ffa1 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 80040fa:	e063      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80040fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	b123      	cbz	r3, 800410e <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004104:	f10d 0106 	add.w	r1, sp, #6
 8004108:	7c00      	ldrb	r0, [r0, #16]
 800410a:	4798      	blx	r3
  if (err != 0U)
 800410c:	e7ba      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800410e:	4629      	mov	r1, r5
 8004110:	f7ff ff94 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 8004114:	e056      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004116:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	b123      	cbz	r3, 8004128 <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800411e:	f10d 0106 	add.w	r1, sp, #6
 8004122:	7c00      	ldrb	r0, [r0, #16]
 8004124:	4798      	blx	r3
  if (err != 0U)
 8004126:	e7ad      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004128:	4629      	mov	r1, r5
 800412a:	f7ff ff87 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 800412e:	e049      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004130:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	b123      	cbz	r3, 8004142 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004138:	f10d 0106 	add.w	r1, sp, #6
 800413c:	7c00      	ldrb	r0, [r0, #16]
 800413e:	4798      	blx	r3
  if (err != 0U)
 8004140:	e7a0      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004142:	4629      	mov	r1, r5
 8004144:	f7ff ff7a 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 8004148:	e03c      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800414a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	b123      	cbz	r3, 800415c <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004152:	f10d 0106 	add.w	r1, sp, #6
 8004156:	7c00      	ldrb	r0, [r0, #16]
 8004158:	4798      	blx	r3
  if (err != 0U)
 800415a:	e793      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800415c:	4629      	mov	r1, r5
 800415e:	f7ff ff6d 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 8004162:	e02f      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004164:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	b123      	cbz	r3, 8004176 <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800416c:	f10d 0106 	add.w	r1, sp, #6
 8004170:	7c00      	ldrb	r0, [r0, #16]
 8004172:	4798      	blx	r3
  if (err != 0U)
 8004174:	e786      	b.n	8004084 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004176:	4629      	mov	r1, r5
 8004178:	f7ff ff60 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 800417c:	e022      	b.n	80041c4 <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800417e:	4629      	mov	r1, r5
 8004180:	f7ff ff5c 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 8004184:	e01e      	b.n	80041c4 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004186:	7c03      	ldrb	r3, [r0, #16]
 8004188:	b933      	cbnz	r3, 8004198 <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800418a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800418e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004190:	f10d 0006 	add.w	r0, sp, #6
 8004194:	4798      	blx	r3
  if (err != 0U)
 8004196:	e775      	b.n	8004084 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004198:	4629      	mov	r1, r5
 800419a:	f7ff ff4f 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 800419e:	e011      	b.n	80041c4 <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041a0:	7c03      	ldrb	r3, [r0, #16]
 80041a2:	b943      	cbnz	r3, 80041b6 <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80041a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	f10d 0006 	add.w	r0, sp, #6
 80041ae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80041b0:	2307      	movs	r3, #7
 80041b2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80041b4:	e766      	b.n	8004084 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7ff ff40 	bl	800403c <USBD_CtlError>
  if (err != 0U)
 80041bc:	e002      	b.n	80041c4 <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 80041be:	4629      	mov	r1, r5
 80041c0:	f7ff ff3c 	bl	800403c <USBD_CtlError>
}
 80041c4:	b003      	add	sp, #12
 80041c6:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 80041c8:	4629      	mov	r1, r5
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff36 	bl	800403c <USBD_CtlError>
 80041d0:	e7f8      	b.n	80041c4 <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fb79 	bl	80048ca <USBD_CtlSendStatus>
 80041d8:	e7f4      	b.n	80041c4 <USBD_GetDescriptor+0x174>

080041da <USBD_SetAddress>:
{
 80041da:	b538      	push	{r3, r4, r5, lr}
 80041dc:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80041de:	888b      	ldrh	r3, [r1, #4]
 80041e0:	b9f3      	cbnz	r3, 8004220 <USBD_SetAddress+0x46>
 80041e2:	88cb      	ldrh	r3, [r1, #6]
 80041e4:	b9e3      	cbnz	r3, 8004220 <USBD_SetAddress+0x46>
 80041e6:	884b      	ldrh	r3, [r1, #2]
 80041e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80041ea:	d819      	bhi.n	8004220 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80041ec:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d00c      	beq.n	8004212 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80041f8:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7ff fcd9 	bl	8003bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004202:	4620      	mov	r0, r4
 8004204:	f000 fb61 	bl	80048ca <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004208:	b135      	cbz	r5, 8004218 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800420a:	2302      	movs	r3, #2
 800420c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004210:	e009      	b.n	8004226 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8004212:	f7ff ff13 	bl	800403c <USBD_CtlError>
 8004216:	e006      	b.n	8004226 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004218:	2301      	movs	r3, #1
 800421a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800421e:	e002      	b.n	8004226 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8004220:	4620      	mov	r0, r4
 8004222:	f7ff ff0b 	bl	800403c <USBD_CtlError>
}
 8004226:	bd38      	pop	{r3, r4, r5, pc}

08004228 <USBD_SetConfig>:
{
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4604      	mov	r4, r0
 800422c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800422e:	788d      	ldrb	r5, [r1, #2]
 8004230:	4b2f      	ldr	r3, [pc, #188]	@ (80042f0 <USBD_SetConfig+0xc8>)
 8004232:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004234:	2d01      	cmp	r5, #1
 8004236:	d810      	bhi.n	800425a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8004238:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800423c:	b2da      	uxtb	r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d00f      	beq.n	8004262 <USBD_SetConfig+0x3a>
 8004242:	2a03      	cmp	r2, #3
 8004244:	d026      	beq.n	8004294 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8004246:	f7ff fef9 	bl	800403c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800424a:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <USBD_SetConfig+0xc8>)
 800424c:	7819      	ldrb	r1, [r3, #0]
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fd0c 	bl	8003c6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004254:	2503      	movs	r5, #3
}
 8004256:	4628      	mov	r0, r5
 8004258:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800425a:	f7ff feef 	bl	800403c <USBD_CtlError>
    return USBD_FAIL;
 800425e:	2503      	movs	r5, #3
 8004260:	e7f9      	b.n	8004256 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004262:	b1a5      	cbz	r5, 800428e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004264:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004266:	4629      	mov	r1, r5
 8004268:	f7ff fcf7 	bl	8003c5a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800426c:	4605      	mov	r5, r0
 800426e:	b138      	cbz	r0, 8004280 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8004270:	4631      	mov	r1, r6
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff fee2 	bl	800403c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004278:	2302      	movs	r3, #2
 800427a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800427e:	e7ea      	b.n	8004256 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004280:	4620      	mov	r0, r4
 8004282:	f000 fb22 	bl	80048ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004286:	2303      	movs	r3, #3
 8004288:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800428c:	e7e3      	b.n	8004256 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800428e:	f000 fb1c 	bl	80048ca <USBD_CtlSendStatus>
 8004292:	e7e0      	b.n	8004256 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004294:	b1cd      	cbz	r5, 80042ca <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8004296:	6841      	ldr	r1, [r0, #4]
 8004298:	428d      	cmp	r5, r1
 800429a:	d025      	beq.n	80042e8 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800429c:	b2c9      	uxtb	r1, r1
 800429e:	f7ff fce5 	bl	8003c6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80042a2:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <USBD_SetConfig+0xc8>)
 80042a4:	7819      	ldrb	r1, [r3, #0]
 80042a6:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff fcd6 	bl	8003c5a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80042ae:	4605      	mov	r5, r0
 80042b0:	b1b0      	cbz	r0, 80042e0 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 80042b2:	4631      	mov	r1, r6
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fec1 	bl	800403c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80042ba:	7921      	ldrb	r1, [r4, #4]
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fcd5 	bl	8003c6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80042c2:	2302      	movs	r3, #2
 80042c4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80042c8:	e7c5      	b.n	8004256 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042ca:	2302      	movs	r3, #2
 80042cc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80042d0:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80042d2:	4629      	mov	r1, r5
 80042d4:	f7ff fcca 	bl	8003c6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 faf6 	bl	80048ca <USBD_CtlSendStatus>
 80042de:	e7ba      	b.n	8004256 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80042e0:	4620      	mov	r0, r4
 80042e2:	f000 faf2 	bl	80048ca <USBD_CtlSendStatus>
 80042e6:	e7b6      	b.n	8004256 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80042e8:	f000 faef 	bl	80048ca <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80042ec:	2500      	movs	r5, #0
 80042ee:	e7b2      	b.n	8004256 <USBD_SetConfig+0x2e>
 80042f0:	2000bdc0 	.word	0x2000bdc0

080042f4 <USBD_GetConfig>:
{
 80042f4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80042f6:	88cb      	ldrh	r3, [r1, #6]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10b      	bne.n	8004314 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80042fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004300:	b2da      	uxtb	r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d909      	bls.n	800431a <USBD_GetConfig+0x26>
 8004306:	2a03      	cmp	r2, #3
 8004308:	d111      	bne.n	800432e <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800430a:	2201      	movs	r2, #1
 800430c:	1d01      	adds	r1, r0, #4
 800430e:	f000 faad 	bl	800486c <USBD_CtlSendData>
        break;
 8004312:	e001      	b.n	8004318 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004314:	f7ff fe92 	bl	800403c <USBD_CtlError>
}
 8004318:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800431a:	b252      	sxtb	r2, r2
 800431c:	b13a      	cbz	r2, 800432e <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800431e:	4601      	mov	r1, r0
 8004320:	2300      	movs	r3, #0
 8004322:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004326:	2201      	movs	r2, #1
 8004328:	f000 faa0 	bl	800486c <USBD_CtlSendData>
        break;
 800432c:	e7f4      	b.n	8004318 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800432e:	f7ff fe85 	bl	800403c <USBD_CtlError>
}
 8004332:	e7f1      	b.n	8004318 <USBD_GetConfig+0x24>

08004334 <USBD_GetStatus>:
{
 8004334:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004336:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800433a:	3b01      	subs	r3, #1
 800433c:	2b02      	cmp	r3, #2
 800433e:	d812      	bhi.n	8004366 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004340:	88cb      	ldrh	r3, [r1, #6]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d10c      	bne.n	8004360 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004346:	2301      	movs	r3, #1
 8004348:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800434a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800434e:	b10b      	cbz	r3, 8004354 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004350:	2303      	movs	r3, #3
 8004352:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004354:	2202      	movs	r2, #2
 8004356:	f100 010c 	add.w	r1, r0, #12
 800435a:	f000 fa87 	bl	800486c <USBD_CtlSendData>
}
 800435e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004360:	f7ff fe6c 	bl	800403c <USBD_CtlError>
        break;
 8004364:	e7fb      	b.n	800435e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004366:	f7ff fe69 	bl	800403c <USBD_CtlError>
}
 800436a:	e7f8      	b.n	800435e <USBD_GetStatus+0x2a>

0800436c <USBD_SetFeature>:
{
 800436c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800436e:	884b      	ldrh	r3, [r1, #2]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d004      	beq.n	800437e <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004374:	2b02      	cmp	r3, #2
 8004376:	d007      	beq.n	8004388 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8004378:	f7ff fe60 	bl	800403c <USBD_CtlError>
}
 800437c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800437e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004382:	f000 faa2 	bl	80048ca <USBD_CtlSendStatus>
 8004386:	e7f9      	b.n	800437c <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8004388:	888b      	ldrh	r3, [r1, #4]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004390:	f000 fa9b 	bl	80048ca <USBD_CtlSendStatus>
 8004394:	e7f2      	b.n	800437c <USBD_SetFeature+0x10>

08004396 <USBD_ClrFeature>:
{
 8004396:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004398:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800439c:	3b01      	subs	r3, #1
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d809      	bhi.n	80043b6 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80043a2:	884b      	ldrh	r3, [r1, #2]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d000      	beq.n	80043aa <USBD_ClrFeature+0x14>
}
 80043a8:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80043b0:	f000 fa8b 	bl	80048ca <USBD_CtlSendStatus>
 80043b4:	e7f8      	b.n	80043a8 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80043b6:	f7ff fe41 	bl	800403c <USBD_CtlError>
}
 80043ba:	e7f5      	b.n	80043a8 <USBD_ClrFeature+0x12>

080043bc <USBD_StdDevReq>:
{
 80043bc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043be:	780c      	ldrb	r4, [r1, #0]
 80043c0:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80043c4:	2c20      	cmp	r4, #32
 80043c6:	d006      	beq.n	80043d6 <USBD_StdDevReq+0x1a>
 80043c8:	2c40      	cmp	r4, #64	@ 0x40
 80043ca:	d004      	beq.n	80043d6 <USBD_StdDevReq+0x1a>
 80043cc:	b16c      	cbz	r4, 80043ea <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 80043ce:	f7ff fe35 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80043d2:	2400      	movs	r4, #0
      break;
 80043d4:	e007      	b.n	80043e6 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80043d6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80043da:	33ae      	adds	r3, #174	@ 0xae
 80043dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4798      	blx	r3
 80043e4:	4604      	mov	r4, r0
}
 80043e6:	4620      	mov	r0, r4
 80043e8:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80043ea:	784d      	ldrb	r5, [r1, #1]
 80043ec:	2d09      	cmp	r5, #9
 80043ee:	d81d      	bhi.n	800442c <USBD_StdDevReq+0x70>
 80043f0:	e8df f005 	tbb	[pc, r5]
 80043f4:	161c1912 	.word	0x161c1912
 80043f8:	1c05081c 	.word	0x1c05081c
 80043fc:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80043fe:	f7ff fe27 	bl	8004050 <USBD_GetDescriptor>
          break;
 8004402:	e7f0      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8004404:	f7ff fee9 	bl	80041da <USBD_SetAddress>
          break;
 8004408:	e7ed      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800440a:	f7ff ff0d 	bl	8004228 <USBD_SetConfig>
 800440e:	4604      	mov	r4, r0
          break;
 8004410:	e7e9      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8004412:	f7ff ff6f 	bl	80042f4 <USBD_GetConfig>
          break;
 8004416:	e7e6      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8004418:	f7ff ff8c 	bl	8004334 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800441c:	462c      	mov	r4, r5
          break;
 800441e:	e7e2      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8004420:	f7ff ffa4 	bl	800436c <USBD_SetFeature>
          break;
 8004424:	e7df      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8004426:	f7ff ffb6 	bl	8004396 <USBD_ClrFeature>
          break;
 800442a:	e7dc      	b.n	80043e6 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800442c:	f7ff fe06 	bl	800403c <USBD_CtlError>
          break;
 8004430:	e7d9      	b.n	80043e6 <USBD_StdDevReq+0x2a>

08004432 <USBD_StdItfReq>:
{
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	4605      	mov	r5, r0
 8004436:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004438:	780b      	ldrb	r3, [r1, #0]
 800443a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800443e:	2b20      	cmp	r3, #32
 8004440:	d007      	beq.n	8004452 <USBD_StdItfReq+0x20>
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d005      	beq.n	8004452 <USBD_StdItfReq+0x20>
 8004446:	b123      	cbz	r3, 8004452 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004448:	f7ff fdf8 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800444c:	2600      	movs	r6, #0
}
 800444e:	4630      	mov	r0, r6
 8004450:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004452:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8004456:	3b01      	subs	r3, #1
 8004458:	2b02      	cmp	r3, #2
 800445a:	d826      	bhi.n	80044aa <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800445c:	7921      	ldrb	r1, [r4, #4]
 800445e:	2901      	cmp	r1, #1
 8004460:	d905      	bls.n	800446e <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f7ff fde9 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800446a:	2600      	movs	r6, #0
 800446c:	e7ef      	b.n	800444e <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff fccf 	bl	8003e12 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004474:	b968      	cbnz	r0, 8004492 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8004476:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800447a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800447e:	6891      	ldr	r1, [r2, #8]
 8004480:	b189      	cbz	r1, 80044a6 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004482:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004486:	6893      	ldr	r3, [r2, #8]
 8004488:	4621      	mov	r1, r4
 800448a:	4628      	mov	r0, r5
 800448c:	4798      	blx	r3
 800448e:	4606      	mov	r6, r0
 8004490:	e000      	b.n	8004494 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004492:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004494:	88e3      	ldrh	r3, [r4, #6]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1d9      	bne.n	800444e <USBD_StdItfReq+0x1c>
 800449a:	2e00      	cmp	r6, #0
 800449c:	d1d7      	bne.n	800444e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fa13 	bl	80048ca <USBD_CtlSendStatus>
 80044a4:	e7d3      	b.n	800444e <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80044a6:	2603      	movs	r6, #3
 80044a8:	e7f4      	b.n	8004494 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f7ff fdc5 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80044b2:	2600      	movs	r6, #0
          break;
 80044b4:	e7cb      	b.n	800444e <USBD_StdItfReq+0x1c>

080044b6 <USBD_StdEPReq>:
{
 80044b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ba:	4606      	mov	r6, r0
 80044bc:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80044be:	888b      	ldrh	r3, [r1, #4]
 80044c0:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044c2:	780c      	ldrb	r4, [r1, #0]
 80044c4:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80044c8:	2c20      	cmp	r4, #32
 80044ca:	d008      	beq.n	80044de <USBD_StdEPReq+0x28>
 80044cc:	2c40      	cmp	r4, #64	@ 0x40
 80044ce:	d006      	beq.n	80044de <USBD_StdEPReq+0x28>
 80044d0:	b1dc      	cbz	r4, 800450a <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 80044d2:	f7ff fdb3 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80044d6:	2400      	movs	r4, #0
}
 80044d8:	4620      	mov	r0, r4
 80044da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80044de:	4639      	mov	r1, r7
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7ff fc98 	bl	8003e16 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80044e6:	4604      	mov	r4, r0
 80044e8:	2800      	cmp	r0, #0
 80044ea:	f040 80fd 	bne.w	80046e8 <USBD_StdEPReq+0x232>
        pdev->classId = idx;
 80044ee:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 80044f2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80044f6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0eb      	beq.n	80044d8 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004500:	4629      	mov	r1, r5
 8004502:	4630      	mov	r0, r6
 8004504:	4798      	blx	r3
 8004506:	4604      	mov	r4, r0
 8004508:	e7e6      	b.n	80044d8 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800450a:	f891 8001 	ldrb.w	r8, [r1, #1]
 800450e:	f1b8 0f01 	cmp.w	r8, #1
 8004512:	d031      	beq.n	8004578 <USBD_StdEPReq+0xc2>
 8004514:	f1b8 0f03 	cmp.w	r8, #3
 8004518:	d005      	beq.n	8004526 <USBD_StdEPReq+0x70>
 800451a:	f1b8 0f00 	cmp.w	r8, #0
 800451e:	d067      	beq.n	80045f0 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8004520:	f7ff fd8c 	bl	800403c <USBD_CtlError>
          break;
 8004524:	e7d8      	b.n	80044d8 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8004526:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800452a:	b2da      	uxtb	r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d004      	beq.n	800453a <USBD_StdEPReq+0x84>
 8004530:	2a03      	cmp	r2, #3
 8004532:	d012      	beq.n	800455a <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8004534:	f7ff fd82 	bl	800403c <USBD_CtlError>
              break;
 8004538:	e7ce      	b.n	80044d8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800453a:	b10f      	cbz	r7, 8004540 <USBD_StdEPReq+0x8a>
 800453c:	2f80      	cmp	r7, #128	@ 0x80
 800453e:	d104      	bne.n	800454a <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff fd7a 	bl	800403c <USBD_CtlError>
 8004548:	e7c6      	b.n	80044d8 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800454a:	4639      	mov	r1, r7
 800454c:	f7ff fb22 	bl	8003b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004550:	2180      	movs	r1, #128	@ 0x80
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff fb1e 	bl	8003b94 <USBD_LL_StallEP>
 8004558:	e7be      	b.n	80044d8 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800455a:	884b      	ldrh	r3, [r1, #2]
 800455c:	b923      	cbnz	r3, 8004568 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800455e:	b11f      	cbz	r7, 8004568 <USBD_StdEPReq+0xb2>
 8004560:	2f80      	cmp	r7, #128	@ 0x80
 8004562:	d001      	beq.n	8004568 <USBD_StdEPReq+0xb2>
 8004564:	88cb      	ldrh	r3, [r1, #6]
 8004566:	b11b      	cbz	r3, 8004570 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f9ae 	bl	80048ca <USBD_CtlSendStatus>
              break;
 800456e:	e7b3      	b.n	80044d8 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004570:	4639      	mov	r1, r7
 8004572:	f7ff fb0f 	bl	8003b94 <USBD_LL_StallEP>
 8004576:	e7f7      	b.n	8004568 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004578:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800457c:	b2da      	uxtb	r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d004      	beq.n	800458c <USBD_StdEPReq+0xd6>
 8004582:	2a03      	cmp	r2, #3
 8004584:	d012      	beq.n	80045ac <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004586:	f7ff fd59 	bl	800403c <USBD_CtlError>
              break;
 800458a:	e7a5      	b.n	80044d8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800458c:	b10f      	cbz	r7, 8004592 <USBD_StdEPReq+0xdc>
 800458e:	2f80      	cmp	r7, #128	@ 0x80
 8004590:	d104      	bne.n	800459c <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004592:	4629      	mov	r1, r5
 8004594:	4630      	mov	r0, r6
 8004596:	f7ff fd51 	bl	800403c <USBD_CtlError>
 800459a:	e79d      	b.n	80044d8 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800459c:	4639      	mov	r1, r7
 800459e:	f7ff faf9 	bl	8003b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80045a2:	2180      	movs	r1, #128	@ 0x80
 80045a4:	4630      	mov	r0, r6
 80045a6:	f7ff faf5 	bl	8003b94 <USBD_LL_StallEP>
 80045aa:	e795      	b.n	80044d8 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80045ac:	884b      	ldrh	r3, [r1, #2]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d192      	bne.n	80044d8 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 80045b2:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 80045b6:	d117      	bne.n	80045e8 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 f986 	bl	80048ca <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80045be:	4639      	mov	r1, r7
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff fc28 	bl	8003e16 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d186      	bne.n	80044d8 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 80045ca:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80045ce:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80045d2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	f000 8087 	beq.w	80046ec <USBD_StdEPReq+0x236>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80045de:	4629      	mov	r1, r5
 80045e0:	4630      	mov	r0, r6
 80045e2:	4790      	blx	r2
 80045e4:	4604      	mov	r4, r0
 80045e6:	e777      	b.n	80044d8 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7ff fadb 	bl	8003ba4 <USBD_LL_ClearStallEP>
 80045ee:	e7e3      	b.n	80045b8 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 80045f0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80045f4:	b2d1      	uxtb	r1, r2
 80045f6:	2a02      	cmp	r2, #2
 80045f8:	d006      	beq.n	8004608 <USBD_StdEPReq+0x152>
 80045fa:	2903      	cmp	r1, #3
 80045fc:	d02a      	beq.n	8004654 <USBD_StdEPReq+0x19e>
              USBD_CtlError(pdev, req);
 80045fe:	4629      	mov	r1, r5
 8004600:	f7ff fd1c 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004604:	4644      	mov	r4, r8
              break;
 8004606:	e767      	b.n	80044d8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004608:	b10f      	cbz	r7, 800460e <USBD_StdEPReq+0x158>
 800460a:	2f80      	cmp	r7, #128	@ 0x80
 800460c:	d114      	bne.n	8004638 <USBD_StdEPReq+0x182>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800460e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004612:	d116      	bne.n	8004642 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004614:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004618:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800461c:	00b9      	lsls	r1, r7, #2
 800461e:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004622:	4431      	add	r1, r6
 8004624:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004626:	2300      	movs	r3, #0
 8004628:	f801 3f0e 	strb.w	r3, [r1, #14]!
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800462c:	2202      	movs	r2, #2
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f91c 	bl	800486c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004634:	4644      	mov	r4, r8
              break;
 8004636:	e74f      	b.n	80044d8 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004638:	4629      	mov	r1, r5
 800463a:	f7ff fcff 	bl	800403c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800463e:	4644      	mov	r4, r8
                break;
 8004640:	e74a      	b.n	80044d8 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004642:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004646:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800464a:	00b9      	lsls	r1, r7, #2
 800464c:	3110      	adds	r1, #16
 800464e:	4431      	add	r1, r6
 8004650:	3104      	adds	r1, #4
 8004652:	e7e8      	b.n	8004626 <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 8004654:	b25b      	sxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	db20      	blt.n	800469c <USBD_StdEPReq+0x1e6>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800465a:	f007 020f 	and.w	r2, r7, #15
 800465e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004662:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004666:	f892 4163 	ldrb.w	r4, [r2, #355]	@ 0x163
 800466a:	b32c      	cbz	r4, 80046b8 <USBD_StdEPReq+0x202>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800466c:	2b00      	cmp	r3, #0
 800466e:	db27      	blt.n	80046c0 <USBD_StdEPReq+0x20a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004670:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004674:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004678:	009c      	lsls	r4, r3, #2
 800467a:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800467e:	4434      	add	r4, r6
 8004680:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004682:	b10f      	cbz	r7, 8004688 <USBD_StdEPReq+0x1d2>
 8004684:	2f80      	cmp	r7, #128	@ 0x80
 8004686:	d124      	bne.n	80046d2 <USBD_StdEPReq+0x21c>
                pep->status = 0x0000U;
 8004688:	2300      	movs	r3, #0
 800468a:	73a3      	strb	r3, [r4, #14]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800468c:	2202      	movs	r2, #2
 800468e:	f104 010e 	add.w	r1, r4, #14
 8004692:	4630      	mov	r0, r6
 8004694:	f000 f8ea 	bl	800486c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004698:	4644      	mov	r4, r8
              break;
 800469a:	e71d      	b.n	80044d8 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800469c:	f007 020f 	and.w	r2, r7, #15
 80046a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80046a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80046a8:	f892 4023 	ldrb.w	r4, [r2, #35]	@ 0x23
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	d1dd      	bne.n	800466c <USBD_StdEPReq+0x1b6>
                  USBD_CtlError(pdev, req);
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7ff fcc3 	bl	800403c <USBD_CtlError>
                  break;
 80046b6:	e70f      	b.n	80044d8 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7ff fcbf 	bl	800403c <USBD_CtlError>
                  break;
 80046be:	e70b      	b.n	80044d8 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046c0:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 80046c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046c8:	009c      	lsls	r4, r3, #2
 80046ca:	3410      	adds	r4, #16
 80046cc:	4434      	add	r4, r6
 80046ce:	3404      	adds	r4, #4
 80046d0:	e7d7      	b.n	8004682 <USBD_StdEPReq+0x1cc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80046d2:	4639      	mov	r1, r7
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7ff fa17 	bl	8003b08 <USBD_LL_IsStallEP>
 80046da:	b110      	cbz	r0, 80046e2 <USBD_StdEPReq+0x22c>
                pep->status = 0x0001U;
 80046dc:	2301      	movs	r3, #1
 80046de:	73a3      	strb	r3, [r4, #14]
 80046e0:	e7d4      	b.n	800468c <USBD_StdEPReq+0x1d6>
                pep->status = 0x0000U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73a3      	strb	r3, [r4, #14]
 80046e6:	e7d1      	b.n	800468c <USBD_StdEPReq+0x1d6>
  USBD_StatusTypeDef ret = USBD_OK;
 80046e8:	2400      	movs	r4, #0
 80046ea:	e6f5      	b.n	80044d8 <USBD_StdEPReq+0x22>
 80046ec:	4604      	mov	r4, r0
 80046ee:	e6f3      	b.n	80044d8 <USBD_StdEPReq+0x22>

080046f0 <USBD_GetString>:
  if (desc == NULL)
 80046f0:	b300      	cbz	r0, 8004734 <USBD_GetString+0x44>
{
 80046f2:	b570      	push	{r4, r5, r6, lr}
 80046f4:	460d      	mov	r5, r1
 80046f6:	4616      	mov	r6, r2
 80046f8:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80046fa:	f7ff fc81 	bl	8004000 <USBD_GetLen>
 80046fe:	3001      	adds	r0, #1
 8004700:	0043      	lsls	r3, r0, #1
 8004702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004706:	d806      	bhi.n	8004716 <USBD_GetString+0x26>
 8004708:	b29b      	uxth	r3, r3
 800470a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800470c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800470e:	2303      	movs	r3, #3
 8004710:	706b      	strb	r3, [r5, #1]
  idx++;
 8004712:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004714:	e00a      	b.n	800472c <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800471a:	e7f6      	b.n	800470a <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800471c:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800471e:	3401      	adds	r4, #1
    idx++;
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004724:	2100      	movs	r1, #0
 8004726:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004728:	3302      	adds	r3, #2
 800472a:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800472c:	7822      	ldrb	r2, [r4, #0]
 800472e:	2a00      	cmp	r2, #0
 8004730:	d1f4      	bne.n	800471c <USBD_GetString+0x2c>
}
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	4770      	bx	lr
	...

08004738 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004738:	2312      	movs	r3, #18
 800473a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800473c:	4800      	ldr	r0, [pc, #0]	@ (8004740 <USBD_FS_DeviceDescriptor+0x8>)
 800473e:	4770      	bx	lr
 8004740:	200000c8 	.word	0x200000c8

08004744 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004744:	2304      	movs	r3, #4
 8004746:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004748:	4800      	ldr	r0, [pc, #0]	@ (800474c <USBD_FS_LangIDStrDescriptor+0x8>)
 800474a:	4770      	bx	lr
 800474c:	200000c4 	.word	0x200000c4

08004750 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004750:	2300      	movs	r3, #0
 8004752:	4293      	cmp	r3, r2
 8004754:	d21e      	bcs.n	8004794 <IntToUnicode+0x44>
{
 8004756:	b500      	push	{lr}
 8004758:	e010      	b.n	800477c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800475a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800475e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004762:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004764:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004768:	f10c 0c01 	add.w	ip, ip, #1
 800476c:	f04f 0e00 	mov.w	lr, #0
 8004770:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004774:	3301      	adds	r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4293      	cmp	r3, r2
 800477a:	d209      	bcs.n	8004790 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800477c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004780:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004784:	d2e9      	bcs.n	800475a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004786:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800478a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800478e:	e7e8      	b.n	8004762 <IntToUnicode+0x12>
  }
}
 8004790:	f85d fb04 	ldr.w	pc, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <Get_SerialNum>:
{
 8004798:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <Get_SerialNum+0x30>)
 800479c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80047a0:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80047a4:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 80047a8:	18c0      	adds	r0, r0, r3
 80047aa:	d100      	bne.n	80047ae <Get_SerialNum+0x16>
}
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80047ae:	4d07      	ldr	r5, [pc, #28]	@ (80047cc <Get_SerialNum+0x34>)
 80047b0:	2208      	movs	r2, #8
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7ff ffcc 	bl	8004750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80047b8:	2204      	movs	r2, #4
 80047ba:	f105 0110 	add.w	r1, r5, #16
 80047be:	4620      	mov	r0, r4
 80047c0:	f7ff ffc6 	bl	8004750 <IntToUnicode>
}
 80047c4:	e7f2      	b.n	80047ac <Get_SerialNum+0x14>
 80047c6:	bf00      	nop
 80047c8:	1fff7000 	.word	0x1fff7000
 80047cc:	200000aa 	.word	0x200000aa

080047d0 <USBD_FS_SerialStrDescriptor>:
{
 80047d0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80047d2:	231a      	movs	r3, #26
 80047d4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80047d6:	f7ff ffdf 	bl	8004798 <Get_SerialNum>
}
 80047da:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <USBD_FS_SerialStrDescriptor+0x10>)
 80047dc:	bd08      	pop	{r3, pc}
 80047de:	bf00      	nop
 80047e0:	200000a8 	.word	0x200000a8

080047e4 <USBD_FS_ProductStrDescriptor>:
{
 80047e4:	b508      	push	{r3, lr}
 80047e6:	460a      	mov	r2, r1
  if(speed == 0)
 80047e8:	b928      	cbnz	r0, 80047f6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047ea:	4905      	ldr	r1, [pc, #20]	@ (8004800 <USBD_FS_ProductStrDescriptor+0x1c>)
 80047ec:	4805      	ldr	r0, [pc, #20]	@ (8004804 <USBD_FS_ProductStrDescriptor+0x20>)
 80047ee:	f7ff ff7f 	bl	80046f0 <USBD_GetString>
}
 80047f2:	4803      	ldr	r0, [pc, #12]	@ (8004800 <USBD_FS_ProductStrDescriptor+0x1c>)
 80047f4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047f6:	4902      	ldr	r1, [pc, #8]	@ (8004800 <USBD_FS_ProductStrDescriptor+0x1c>)
 80047f8:	4802      	ldr	r0, [pc, #8]	@ (8004804 <USBD_FS_ProductStrDescriptor+0x20>)
 80047fa:	f7ff ff79 	bl	80046f0 <USBD_GetString>
 80047fe:	e7f8      	b.n	80047f2 <USBD_FS_ProductStrDescriptor+0xe>
 8004800:	2000bdc4 	.word	0x2000bdc4
 8004804:	08004ce8 	.word	0x08004ce8

08004808 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004808:	b510      	push	{r4, lr}
 800480a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800480c:	4c03      	ldr	r4, [pc, #12]	@ (800481c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800480e:	4621      	mov	r1, r4
 8004810:	4803      	ldr	r0, [pc, #12]	@ (8004820 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004812:	f7ff ff6d 	bl	80046f0 <USBD_GetString>
}
 8004816:	4620      	mov	r0, r4
 8004818:	bd10      	pop	{r4, pc}
 800481a:	bf00      	nop
 800481c:	2000bdc4 	.word	0x2000bdc4
 8004820:	08004d00 	.word	0x08004d00

08004824 <USBD_FS_ConfigStrDescriptor>:
{
 8004824:	b508      	push	{r3, lr}
 8004826:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004828:	b928      	cbnz	r0, 8004836 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800482a:	4905      	ldr	r1, [pc, #20]	@ (8004840 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800482c:	4805      	ldr	r0, [pc, #20]	@ (8004844 <USBD_FS_ConfigStrDescriptor+0x20>)
 800482e:	f7ff ff5f 	bl	80046f0 <USBD_GetString>
}
 8004832:	4803      	ldr	r0, [pc, #12]	@ (8004840 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004834:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004836:	4902      	ldr	r1, [pc, #8]	@ (8004840 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <USBD_FS_ConfigStrDescriptor+0x20>)
 800483a:	f7ff ff59 	bl	80046f0 <USBD_GetString>
 800483e:	e7f8      	b.n	8004832 <USBD_FS_ConfigStrDescriptor+0xe>
 8004840:	2000bdc4 	.word	0x2000bdc4
 8004844:	08004d14 	.word	0x08004d14

08004848 <USBD_FS_InterfaceStrDescriptor>:
{
 8004848:	b508      	push	{r3, lr}
 800484a:	460a      	mov	r2, r1
  if(speed == 0)
 800484c:	b928      	cbnz	r0, 800485a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800484e:	4905      	ldr	r1, [pc, #20]	@ (8004864 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004850:	4805      	ldr	r0, [pc, #20]	@ (8004868 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004852:	f7ff ff4d 	bl	80046f0 <USBD_GetString>
}
 8004856:	4803      	ldr	r0, [pc, #12]	@ (8004864 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004858:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800485a:	4902      	ldr	r1, [pc, #8]	@ (8004864 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800485c:	4802      	ldr	r0, [pc, #8]	@ (8004868 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800485e:	f7ff ff47 	bl	80046f0 <USBD_GetString>
 8004862:	e7f8      	b.n	8004856 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004864:	2000bdc4 	.word	0x2000bdc4
 8004868:	08004d20 	.word	0x08004d20

0800486c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800486c:	b508      	push	{r3, lr}
 800486e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004870:	2202      	movs	r2, #2
 8004872:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004876:	6143      	str	r3, [r0, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8004878:	6241      	str	r1, [r0, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800487a:	6183      	str	r3, [r0, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800487c:	460a      	mov	r2, r1
 800487e:	2100      	movs	r1, #0
 8004880:	f7ff f9a0 	bl	8003bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004884:	2000      	movs	r0, #0
 8004886:	bd08      	pop	{r3, pc}

08004888 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004888:	b508      	push	{r3, lr}
 800488a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800488c:	460a      	mov	r2, r1
 800488e:	2100      	movs	r1, #0
 8004890:	f7ff f998 	bl	8003bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004894:	2000      	movs	r0, #0
 8004896:	bd08      	pop	{r3, pc}

08004898 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004898:	b508      	push	{r3, lr}
 800489a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800489c:	2203      	movs	r2, #3
 800489e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80048a2:	f8c0 3154 	str.w	r3, [r0, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80048a6:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80048aa:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80048ae:	460a      	mov	r2, r1
 80048b0:	2100      	movs	r1, #0
 80048b2:	f7ff f98f 	bl	8003bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80048b6:	2000      	movs	r0, #0
 80048b8:	bd08      	pop	{r3, pc}

080048ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80048ba:	b508      	push	{r3, lr}
 80048bc:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80048be:	460a      	mov	r2, r1
 80048c0:	2100      	movs	r1, #0
 80048c2:	f7ff f987 	bl	8003bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80048c6:	2000      	movs	r0, #0
 80048c8:	bd08      	pop	{r3, pc}

080048ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80048ca:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80048cc:	2204      	movs	r2, #4
 80048ce:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80048d2:	2300      	movs	r3, #0
 80048d4:	461a      	mov	r2, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	f7ff f974 	bl	8003bc4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80048dc:	2000      	movs	r0, #0
 80048de:	bd08      	pop	{r3, pc}

080048e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80048e0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80048e2:	2205      	movs	r2, #5
 80048e4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048e8:	2300      	movs	r3, #0
 80048ea:	461a      	mov	r2, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	f7ff f971 	bl	8003bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80048f2:	2000      	movs	r0, #0
 80048f4:	bd08      	pop	{r3, pc}
	...

080048f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80048f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004930 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048fc:	f7fe fd5e 	bl	80033bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004900:	480c      	ldr	r0, [pc, #48]	@ (8004934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004902:	490d      	ldr	r1, [pc, #52]	@ (8004938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004904:	4a0d      	ldr	r2, [pc, #52]	@ (800493c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004908:	e002      	b.n	8004910 <LoopCopyDataInit>

0800490a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800490a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800490c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800490e:	3304      	adds	r3, #4

08004910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004914:	d3f9      	bcc.n	800490a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004916:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004918:	4c0a      	ldr	r4, [pc, #40]	@ (8004944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800491a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800491c:	e001      	b.n	8004922 <LoopFillZerobss>

0800491e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800491e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004920:	3204      	adds	r2, #4

08004922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004924:	d3fb      	bcc.n	800491e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004926:	f000 f819 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800492a:	f7fb fe37 	bl	800059c <main>
  bx  lr    
 800492e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004938:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800493c:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8004940:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8004944:	2000bfc4 	.word	0x2000bfc4

08004948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004948:	e7fe      	b.n	8004948 <ADC_IRQHandler>

0800494a <memset>:
 800494a:	4402      	add	r2, r0
 800494c:	4603      	mov	r3, r0
 800494e:	4293      	cmp	r3, r2
 8004950:	d100      	bne.n	8004954 <memset+0xa>
 8004952:	4770      	bx	lr
 8004954:	f803 1b01 	strb.w	r1, [r3], #1
 8004958:	e7f9      	b.n	800494e <memset+0x4>
	...

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <__libc_init_array+0x38>)
 8004960:	4d0d      	ldr	r5, [pc, #52]	@ (8004998 <__libc_init_array+0x3c>)
 8004962:	1b5b      	subs	r3, r3, r5
 8004964:	109c      	asrs	r4, r3, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	f000 f9a4 	bl	8004cb8 <_init>
 8004970:	4d0a      	ldr	r5, [pc, #40]	@ (800499c <__libc_init_array+0x40>)
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <__libc_init_array+0x44>)
 8004974:	1b5b      	subs	r3, r3, r5
 8004976:	109c      	asrs	r4, r3, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08004d38 	.word	0x08004d38
 8004998:	08004d38 	.word	0x08004d38
 800499c:	08004d38 	.word	0x08004d38
 80049a0:	08004d3c 	.word	0x08004d3c

080049a4 <memcpy>:
 80049a4:	440a      	add	r2, r1
 80049a6:	4291      	cmp	r1, r2
 80049a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049ac:	d100      	bne.n	80049b0 <memcpy+0xc>
 80049ae:	4770      	bx	lr
 80049b0:	b510      	push	{r4, lr}
 80049b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ba:	4291      	cmp	r1, r2
 80049bc:	d1f9      	bne.n	80049b2 <memcpy+0xe>
 80049be:	bd10      	pop	{r4, pc}

080049c0 <__udivmoddi4>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	9d08      	ldr	r5, [sp, #32]
 80049c6:	460f      	mov	r7, r1
 80049c8:	4604      	mov	r4, r0
 80049ca:	468c      	mov	ip, r1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d148      	bne.n	8004a62 <__udivmoddi4+0xa2>
 80049d0:	428a      	cmp	r2, r1
 80049d2:	4616      	mov	r6, r2
 80049d4:	d961      	bls.n	8004a9a <__udivmoddi4+0xda>
 80049d6:	fab2 f382 	clz	r3, r2
 80049da:	b14b      	cbz	r3, 80049f0 <__udivmoddi4+0x30>
 80049dc:	f1c3 0220 	rsb	r2, r3, #32
 80049e0:	fa01 fc03 	lsl.w	ip, r1, r3
 80049e4:	fa20 f202 	lsr.w	r2, r0, r2
 80049e8:	409e      	lsls	r6, r3
 80049ea:	ea42 0c0c 	orr.w	ip, r2, ip
 80049ee:	409c      	lsls	r4, r3
 80049f0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80049f4:	b2b7      	uxth	r7, r6
 80049f6:	fbbc f1fe 	udiv	r1, ip, lr
 80049fa:	0c22      	lsrs	r2, r4, #16
 80049fc:	fb0e cc11 	mls	ip, lr, r1, ip
 8004a00:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8004a04:	fb01 f007 	mul.w	r0, r1, r7
 8004a08:	4290      	cmp	r0, r2
 8004a0a:	d909      	bls.n	8004a20 <__udivmoddi4+0x60>
 8004a0c:	18b2      	adds	r2, r6, r2
 8004a0e:	f101 3cff 	add.w	ip, r1, #4294967295
 8004a12:	f080 80ee 	bcs.w	8004bf2 <__udivmoddi4+0x232>
 8004a16:	4290      	cmp	r0, r2
 8004a18:	f240 80eb 	bls.w	8004bf2 <__udivmoddi4+0x232>
 8004a1c:	3902      	subs	r1, #2
 8004a1e:	4432      	add	r2, r6
 8004a20:	1a12      	subs	r2, r2, r0
 8004a22:	b2a4      	uxth	r4, r4
 8004a24:	fbb2 f0fe 	udiv	r0, r2, lr
 8004a28:	fb0e 2210 	mls	r2, lr, r0, r2
 8004a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004a30:	fb00 f707 	mul.w	r7, r0, r7
 8004a34:	42a7      	cmp	r7, r4
 8004a36:	d909      	bls.n	8004a4c <__udivmoddi4+0x8c>
 8004a38:	1934      	adds	r4, r6, r4
 8004a3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004a3e:	f080 80da 	bcs.w	8004bf6 <__udivmoddi4+0x236>
 8004a42:	42a7      	cmp	r7, r4
 8004a44:	f240 80d7 	bls.w	8004bf6 <__udivmoddi4+0x236>
 8004a48:	4434      	add	r4, r6
 8004a4a:	3802      	subs	r0, #2
 8004a4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004a50:	1be4      	subs	r4, r4, r7
 8004a52:	2100      	movs	r1, #0
 8004a54:	b11d      	cbz	r5, 8004a5e <__udivmoddi4+0x9e>
 8004a56:	40dc      	lsrs	r4, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e9c5 4300 	strd	r4, r3, [r5]
 8004a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a62:	428b      	cmp	r3, r1
 8004a64:	d906      	bls.n	8004a74 <__udivmoddi4+0xb4>
 8004a66:	b10d      	cbz	r5, 8004a6c <__udivmoddi4+0xac>
 8004a68:	e9c5 0100 	strd	r0, r1, [r5]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4608      	mov	r0, r1
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	fab3 f183 	clz	r1, r3
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d148      	bne.n	8004b0e <__udivmoddi4+0x14e>
 8004a7c:	42bb      	cmp	r3, r7
 8004a7e:	d302      	bcc.n	8004a86 <__udivmoddi4+0xc6>
 8004a80:	4282      	cmp	r2, r0
 8004a82:	f200 8107 	bhi.w	8004c94 <__udivmoddi4+0x2d4>
 8004a86:	1a84      	subs	r4, r0, r2
 8004a88:	eb67 0203 	sbc.w	r2, r7, r3
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	4694      	mov	ip, r2
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	d0e4      	beq.n	8004a5e <__udivmoddi4+0x9e>
 8004a94:	e9c5 4c00 	strd	r4, ip, [r5]
 8004a98:	e7e1      	b.n	8004a5e <__udivmoddi4+0x9e>
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	f000 8092 	beq.w	8004bc4 <__udivmoddi4+0x204>
 8004aa0:	fab2 f382 	clz	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 80a8 	bne.w	8004bfa <__udivmoddi4+0x23a>
 8004aaa:	1a8a      	subs	r2, r1, r2
 8004aac:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004ab0:	fa1f fc86 	uxth.w	ip, r6
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	0c20      	lsrs	r0, r4, #16
 8004ab8:	fbb2 f7fe 	udiv	r7, r2, lr
 8004abc:	fb0e 2217 	mls	r2, lr, r7, r2
 8004ac0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8004ac4:	fb0c f007 	mul.w	r0, ip, r7
 8004ac8:	4290      	cmp	r0, r2
 8004aca:	d907      	bls.n	8004adc <__udivmoddi4+0x11c>
 8004acc:	18b2      	adds	r2, r6, r2
 8004ace:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ad2:	d202      	bcs.n	8004ada <__udivmoddi4+0x11a>
 8004ad4:	4290      	cmp	r0, r2
 8004ad6:	f200 80e2 	bhi.w	8004c9e <__udivmoddi4+0x2de>
 8004ada:	4647      	mov	r7, r8
 8004adc:	1a12      	subs	r2, r2, r0
 8004ade:	b2a4      	uxth	r4, r4
 8004ae0:	fbb2 f0fe 	udiv	r0, r2, lr
 8004ae4:	fb0e 2210 	mls	r2, lr, r0, r2
 8004ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004aec:	fb0c fc00 	mul.w	ip, ip, r0
 8004af0:	45a4      	cmp	ip, r4
 8004af2:	d907      	bls.n	8004b04 <__udivmoddi4+0x144>
 8004af4:	1934      	adds	r4, r6, r4
 8004af6:	f100 32ff 	add.w	r2, r0, #4294967295
 8004afa:	d202      	bcs.n	8004b02 <__udivmoddi4+0x142>
 8004afc:	45a4      	cmp	ip, r4
 8004afe:	f200 80cb 	bhi.w	8004c98 <__udivmoddi4+0x2d8>
 8004b02:	4610      	mov	r0, r2
 8004b04:	eba4 040c 	sub.w	r4, r4, ip
 8004b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004b0c:	e7a2      	b.n	8004a54 <__udivmoddi4+0x94>
 8004b0e:	f1c1 0620 	rsb	r6, r1, #32
 8004b12:	408b      	lsls	r3, r1
 8004b14:	fa22 fc06 	lsr.w	ip, r2, r6
 8004b18:	ea4c 0c03 	orr.w	ip, ip, r3
 8004b1c:	fa07 f401 	lsl.w	r4, r7, r1
 8004b20:	fa20 f306 	lsr.w	r3, r0, r6
 8004b24:	40f7      	lsrs	r7, r6
 8004b26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004b2a:	4323      	orrs	r3, r4
 8004b2c:	fa00 f801 	lsl.w	r8, r0, r1
 8004b30:	fa1f fe8c 	uxth.w	lr, ip
 8004b34:	fbb7 f0f9 	udiv	r0, r7, r9
 8004b38:	0c1c      	lsrs	r4, r3, #16
 8004b3a:	fb09 7710 	mls	r7, r9, r0, r7
 8004b3e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8004b42:	fb00 f70e 	mul.w	r7, r0, lr
 8004b46:	42a7      	cmp	r7, r4
 8004b48:	fa02 f201 	lsl.w	r2, r2, r1
 8004b4c:	d90a      	bls.n	8004b64 <__udivmoddi4+0x1a4>
 8004b4e:	eb1c 0404 	adds.w	r4, ip, r4
 8004b52:	f100 3aff 	add.w	sl, r0, #4294967295
 8004b56:	f080 809b 	bcs.w	8004c90 <__udivmoddi4+0x2d0>
 8004b5a:	42a7      	cmp	r7, r4
 8004b5c:	f240 8098 	bls.w	8004c90 <__udivmoddi4+0x2d0>
 8004b60:	3802      	subs	r0, #2
 8004b62:	4464      	add	r4, ip
 8004b64:	1be4      	subs	r4, r4, r7
 8004b66:	b29f      	uxth	r7, r3
 8004b68:	fbb4 f3f9 	udiv	r3, r4, r9
 8004b6c:	fb09 4413 	mls	r4, r9, r3, r4
 8004b70:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8004b74:	fb03 fe0e 	mul.w	lr, r3, lr
 8004b78:	45a6      	cmp	lr, r4
 8004b7a:	d909      	bls.n	8004b90 <__udivmoddi4+0x1d0>
 8004b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8004b80:	f103 37ff 	add.w	r7, r3, #4294967295
 8004b84:	f080 8082 	bcs.w	8004c8c <__udivmoddi4+0x2cc>
 8004b88:	45a6      	cmp	lr, r4
 8004b8a:	d97f      	bls.n	8004c8c <__udivmoddi4+0x2cc>
 8004b8c:	3b02      	subs	r3, #2
 8004b8e:	4464      	add	r4, ip
 8004b90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004b94:	eba4 040e 	sub.w	r4, r4, lr
 8004b98:	fba0 e702 	umull	lr, r7, r0, r2
 8004b9c:	42bc      	cmp	r4, r7
 8004b9e:	4673      	mov	r3, lr
 8004ba0:	46b9      	mov	r9, r7
 8004ba2:	d363      	bcc.n	8004c6c <__udivmoddi4+0x2ac>
 8004ba4:	d060      	beq.n	8004c68 <__udivmoddi4+0x2a8>
 8004ba6:	b15d      	cbz	r5, 8004bc0 <__udivmoddi4+0x200>
 8004ba8:	ebb8 0203 	subs.w	r2, r8, r3
 8004bac:	eb64 0409 	sbc.w	r4, r4, r9
 8004bb0:	fa04 f606 	lsl.w	r6, r4, r6
 8004bb4:	fa22 f301 	lsr.w	r3, r2, r1
 8004bb8:	431e      	orrs	r6, r3
 8004bba:	40cc      	lsrs	r4, r1
 8004bbc:	e9c5 6400 	strd	r6, r4, [r5]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	e74c      	b.n	8004a5e <__udivmoddi4+0x9e>
 8004bc4:	0862      	lsrs	r2, r4, #1
 8004bc6:	0848      	lsrs	r0, r1, #1
 8004bc8:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8004bcc:	0c0b      	lsrs	r3, r1, #16
 8004bce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bd2:	b28a      	uxth	r2, r1
 8004bd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bd8:	fbb3 f1f6 	udiv	r1, r3, r6
 8004bdc:	07e4      	lsls	r4, r4, #31
 8004bde:	46b4      	mov	ip, r6
 8004be0:	4637      	mov	r7, r6
 8004be2:	46b6      	mov	lr, r6
 8004be4:	231f      	movs	r3, #31
 8004be6:	fbb0 f0f6 	udiv	r0, r0, r6
 8004bea:	1bd2      	subs	r2, r2, r7
 8004bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004bf0:	e761      	b.n	8004ab6 <__udivmoddi4+0xf6>
 8004bf2:	4661      	mov	r1, ip
 8004bf4:	e714      	b.n	8004a20 <__udivmoddi4+0x60>
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	e728      	b.n	8004a4c <__udivmoddi4+0x8c>
 8004bfa:	f1c3 0120 	rsb	r1, r3, #32
 8004bfe:	fa20 f201 	lsr.w	r2, r0, r1
 8004c02:	409e      	lsls	r6, r3
 8004c04:	fa27 f101 	lsr.w	r1, r7, r1
 8004c08:	409f      	lsls	r7, r3
 8004c0a:	433a      	orrs	r2, r7
 8004c0c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004c10:	fa1f fc86 	uxth.w	ip, r6
 8004c14:	fbb1 f7fe 	udiv	r7, r1, lr
 8004c18:	fb0e 1017 	mls	r0, lr, r7, r1
 8004c1c:	0c11      	lsrs	r1, r2, #16
 8004c1e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c22:	fb07 f80c 	mul.w	r8, r7, ip
 8004c26:	4588      	cmp	r8, r1
 8004c28:	fa04 f403 	lsl.w	r4, r4, r3
 8004c2c:	d93a      	bls.n	8004ca4 <__udivmoddi4+0x2e4>
 8004c2e:	1871      	adds	r1, r6, r1
 8004c30:	f107 30ff 	add.w	r0, r7, #4294967295
 8004c34:	d201      	bcs.n	8004c3a <__udivmoddi4+0x27a>
 8004c36:	4588      	cmp	r8, r1
 8004c38:	d81f      	bhi.n	8004c7a <__udivmoddi4+0x2ba>
 8004c3a:	eba1 0108 	sub.w	r1, r1, r8
 8004c3e:	fbb1 f8fe 	udiv	r8, r1, lr
 8004c42:	fb08 f70c 	mul.w	r7, r8, ip
 8004c46:	fb0e 1118 	mls	r1, lr, r8, r1
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c50:	42ba      	cmp	r2, r7
 8004c52:	d22f      	bcs.n	8004cb4 <__udivmoddi4+0x2f4>
 8004c54:	18b2      	adds	r2, r6, r2
 8004c56:	f108 31ff 	add.w	r1, r8, #4294967295
 8004c5a:	d2c6      	bcs.n	8004bea <__udivmoddi4+0x22a>
 8004c5c:	42ba      	cmp	r2, r7
 8004c5e:	d2c4      	bcs.n	8004bea <__udivmoddi4+0x22a>
 8004c60:	f1a8 0102 	sub.w	r1, r8, #2
 8004c64:	4432      	add	r2, r6
 8004c66:	e7c0      	b.n	8004bea <__udivmoddi4+0x22a>
 8004c68:	45f0      	cmp	r8, lr
 8004c6a:	d29c      	bcs.n	8004ba6 <__udivmoddi4+0x1e6>
 8004c6c:	ebbe 0302 	subs.w	r3, lr, r2
 8004c70:	eb67 070c 	sbc.w	r7, r7, ip
 8004c74:	3801      	subs	r0, #1
 8004c76:	46b9      	mov	r9, r7
 8004c78:	e795      	b.n	8004ba6 <__udivmoddi4+0x1e6>
 8004c7a:	eba6 0808 	sub.w	r8, r6, r8
 8004c7e:	4441      	add	r1, r8
 8004c80:	1eb8      	subs	r0, r7, #2
 8004c82:	fbb1 f8fe 	udiv	r8, r1, lr
 8004c86:	fb08 f70c 	mul.w	r7, r8, ip
 8004c8a:	e7dc      	b.n	8004c46 <__udivmoddi4+0x286>
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	e77f      	b.n	8004b90 <__udivmoddi4+0x1d0>
 8004c90:	4650      	mov	r0, sl
 8004c92:	e767      	b.n	8004b64 <__udivmoddi4+0x1a4>
 8004c94:	4608      	mov	r0, r1
 8004c96:	e6fb      	b.n	8004a90 <__udivmoddi4+0xd0>
 8004c98:	4434      	add	r4, r6
 8004c9a:	3802      	subs	r0, #2
 8004c9c:	e732      	b.n	8004b04 <__udivmoddi4+0x144>
 8004c9e:	3f02      	subs	r7, #2
 8004ca0:	4432      	add	r2, r6
 8004ca2:	e71b      	b.n	8004adc <__udivmoddi4+0x11c>
 8004ca4:	eba1 0108 	sub.w	r1, r1, r8
 8004ca8:	4638      	mov	r0, r7
 8004caa:	fbb1 f8fe 	udiv	r8, r1, lr
 8004cae:	fb08 f70c 	mul.w	r7, r8, ip
 8004cb2:	e7c8      	b.n	8004c46 <__udivmoddi4+0x286>
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	e798      	b.n	8004bea <__udivmoddi4+0x22a>

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
